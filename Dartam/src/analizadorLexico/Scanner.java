// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/analizadorLexico/Scanner.flex

/**
 * Assignatura 21742 - Compiladors I 
 * Estudis: Grau en Informàtica 
 * Itinerari: Computació 
 * Curs: 2023-2024
 *
 * Equipo: Marta, Arturo, Dani
 */

package analizadorLexico;
import java.io.*; // aquí van los imports
import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import analizadorSintactico.ParserSym;

//import jlex_cup_example.compiler_components.cup.ParserSym;


@SuppressWarnings("fallthrough")
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\0\1\2\22\0\1\1\1\0"+
    "\1\3\1\4\1\0\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\6\22\2\23\1\24\1\25\1\26\1\27\1\30\2\0"+
    "\4\31\1\32\1\31\24\33\1\34\1\35\1\36\1\0"+
    "\1\37\1\0\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\33\1\47\2\33\1\50\1\51\1\52\1\53"+
    "\1\54\1\33\1\55\1\56\1\57\1\60\1\61\1\33"+
    "\1\62\2\33\1\63\1\64\1\65\56\0\1\66\u0153\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\2\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\12\24\1\30\1\31\1\32\1\33\1\34\2\0"+
    "\1\35\1\0\1\36\2\0\1\35\1\37\3\0\1\40"+
    "\1\41\2\24\1\42\4\24\1\43\3\24\1\44\2\24"+
    "\1\0\1\36\1\0\1\45\3\16\1\46\1\24\1\47"+
    "\4\24\1\50\6\24\1\0\1\36\4\24\1\51\1\52"+
    "\1\24\1\53\3\24\1\54\1\24\1\55\2\24\1\56"+
    "\1\24\1\57\1\60\1\61\2\24\1\62";

  private static int [] zzUnpackAction() {
    int [] result = new int[117];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\67"+
    "\0\u0181\0\67\0\67\0\67\0\u01b8\0\67\0\u01b8\0\u01ef"+
    "\0\u0226\0\u01b8\0\67\0\67\0\u025d\0\u0294\0\u02cb\0\u0302"+
    "\0\67\0\67\0\67\0\u0339\0\u0370\0\u03a7\0\u03de\0\u0415"+
    "\0\u044c\0\u0483\0\u04ba\0\u04f1\0\u0528\0\67\0\u01b8\0\67"+
    "\0\67\0\67\0\334\0\u0113\0\u0113\0\u055f\0\u0596\0\u05cd"+
    "\0\u0604\0\67\0\67\0\u063b\0\u0672\0\u06a9\0\67\0\67"+
    "\0\u06e0\0\u0717\0\u0302\0\u074e\0\u0785\0\u07bc\0\u07f3\0\u0302"+
    "\0\u082a\0\u0861\0\u0898\0\u08cf\0\u0906\0\u093d\0\u0974\0\u09ab"+
    "\0\u09e2\0\67\0\u063b\0\u0672\0\u06a9\0\u0302\0\u0a19\0\u0302"+
    "\0\u0a50\0\u0a87\0\u0abe\0\u0af5\0\u0302\0\u0b2c\0\u0b63\0\u0b9a"+
    "\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b"+
    "\0\u0d52\0\u0302\0\u0302\0\u0d89\0\u0302\0\u0dc0\0\u0df7\0\u0e2e"+
    "\0\u0302\0\u0e65\0\u0302\0\u0e9c\0\u0ed3\0\u0302\0\u0f0a\0\u0302"+
    "\0\u0302\0\u0302\0\u0f41\0\u0f78\0\u0302";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[117];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\2\1\20"+
    "\1\21\3\22\1\23\1\24\1\25\1\26\1\27\3\30"+
    "\1\31\1\32\1\33\3\30\1\34\1\35\1\36\1\37"+
    "\1\30\1\40\1\41\1\30\1\42\1\30\1\43\1\30"+
    "\1\44\2\30\1\45\1\30\1\46\1\47\1\50\1\51"+
    "\70\0\1\3\67\0\1\4\67\0\1\52\14\0\4\53"+
    "\5\0\3\53\4\0\23\53\4\0\4\54\1\55\62\54"+
    "\13\0\1\56\1\0\1\56\1\57\1\0\4\60\40\0"+
    "\1\56\22\0\4\61\5\0\3\61\4\0\23\61\24\0"+
    "\4\22\62\0\1\62\7\0\1\63\57\0\4\22\15\0"+
    "\1\64\11\0\1\65\6\0\1\66\33\0\1\67\65\0"+
    "\1\67\1\0\1\70\65\0\1\70\57\0\4\30\5\0"+
    "\3\30\3\0\24\30\24\0\4\30\5\0\3\30\3\0"+
    "\1\30\1\71\6\30\1\72\13\30\24\0\4\30\5\0"+
    "\3\30\3\0\14\30\1\73\7\30\24\0\4\30\5\0"+
    "\3\30\3\0\13\30\1\74\10\30\24\0\4\30\5\0"+
    "\3\30\3\0\1\30\1\75\22\30\24\0\4\30\5\0"+
    "\3\30\3\0\13\30\1\76\10\30\24\0\4\30\5\0"+
    "\3\30\3\0\14\30\1\77\7\30\24\0\4\30\5\0"+
    "\3\30\3\0\14\30\1\100\7\30\24\0\4\30\5\0"+
    "\3\30\3\0\14\30\1\101\1\30\1\102\5\30\24\0"+
    "\4\30\5\0\3\30\3\0\5\30\1\103\2\30\1\104"+
    "\7\30\1\105\3\30\24\0\4\30\5\0\3\30\3\0"+
    "\1\30\1\106\22\30\24\0\4\60\56\0\1\107\1\0"+
    "\1\107\2\0\4\110\6\0\1\111\11\0\1\111\17\0"+
    "\1\107\20\0\1\57\1\0\4\60\52\0\1\112\77\0"+
    "\2\113\65\0\3\114\64\0\4\115\5\0\2\115\5\0"+
    "\6\115\41\0\4\30\5\0\3\30\3\0\16\30\1\116"+
    "\5\30\24\0\4\30\5\0\3\30\3\0\5\30\1\117"+
    "\16\30\24\0\4\30\5\0\3\30\3\0\20\30\1\120"+
    "\3\30\24\0\4\30\5\0\3\30\3\0\11\30\1\121"+
    "\12\30\24\0\4\30\5\0\3\30\3\0\10\30\1\122"+
    "\1\30\1\123\11\30\24\0\4\30\5\0\3\30\3\0"+
    "\14\30\1\124\7\30\24\0\4\30\5\0\3\30\3\0"+
    "\15\30\1\125\6\30\24\0\4\30\5\0\3\30\3\0"+
    "\14\30\1\126\7\30\24\0\4\30\5\0\3\30\3\0"+
    "\11\30\1\127\12\30\24\0\4\30\5\0\3\30\3\0"+
    "\13\30\1\130\10\30\24\0\4\30\5\0\3\30\3\0"+
    "\16\30\1\131\5\30\24\0\4\30\5\0\3\30\3\0"+
    "\3\30\1\132\5\30\1\133\12\30\24\0\4\110\63\0"+
    "\4\110\6\0\1\111\11\0\1\111\35\0\1\134\1\0"+
    "\1\134\2\0\4\135\40\0\1\134\22\0\4\30\5\0"+
    "\3\30\3\0\16\30\1\136\5\30\24\0\4\30\5\0"+
    "\3\30\3\0\17\30\1\137\4\30\24\0\4\30\5\0"+
    "\3\30\3\0\3\30\1\140\20\30\24\0\4\30\5\0"+
    "\3\30\3\0\21\30\1\141\2\30\24\0\4\30\5\0"+
    "\3\30\3\0\15\30\1\142\6\30\24\0\4\30\5\0"+
    "\3\30\3\0\15\30\1\143\6\30\24\0\4\30\5\0"+
    "\3\30\3\0\5\30\1\144\16\30\24\0\4\30\5\0"+
    "\3\30\3\0\14\30\1\145\7\30\24\0\4\30\5\0"+
    "\3\30\3\0\10\30\1\146\13\30\24\0\4\30\5\0"+
    "\3\30\3\0\10\30\1\147\13\30\24\0\4\30\5\0"+
    "\3\30\3\0\1\150\23\30\24\0\4\135\63\0\4\30"+
    "\5\0\3\30\3\0\20\30\1\137\3\30\24\0\4\30"+
    "\5\0\3\30\3\0\14\30\1\151\7\30\24\0\4\30"+
    "\5\0\3\30\3\0\10\30\1\152\13\30\24\0\4\30"+
    "\5\0\3\30\3\0\20\30\1\153\3\30\24\0\4\30"+
    "\5\0\3\30\3\0\3\30\1\154\20\30\24\0\4\30"+
    "\5\0\3\30\3\0\13\30\1\155\10\30\24\0\4\30"+
    "\5\0\3\30\3\0\14\30\1\156\7\30\24\0\4\30"+
    "\5\0\3\30\3\0\16\30\1\157\5\30\24\0\4\30"+
    "\5\0\3\30\3\0\14\30\1\160\7\30\24\0\4\30"+
    "\5\0\3\30\3\0\20\30\1\161\3\30\24\0\4\30"+
    "\5\0\3\30\3\0\7\30\1\162\14\30\24\0\4\30"+
    "\5\0\3\30\3\0\5\30\1\163\16\30\24\0\4\30"+
    "\5\0\3\30\3\0\1\30\1\164\22\30\24\0\4\30"+
    "\5\0\3\30\3\0\11\30\1\165\12\30\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[4015];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\1\11\1\1\3\11\1\1\1\11"+
    "\4\1\2\11\4\1\3\11\12\1\1\11\1\1\3\11"+
    "\2\0\1\1\1\0\1\1\2\0\2\11\3\0\2\11"+
    "\16\1\1\0\1\1\1\0\1\11\21\1\1\0\31\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[117];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private ArrayList<String> tokens = new ArrayList<>();
    private ArrayList<String> errors = new ArrayList<>();
    
    public String writeTokens(){
		String tokenList = "";
		for(String s : tokens){
			tokenList += s + "\n";
		}
		return tokenList;
    }

    private int parseNum(String s) throws NumberFormatException {
		// We check whether the first number is a 0, if so there might be a prefix specifying base, unless it's just a 0 by itself.
		if(s.charAt(0) != '0' || s.length() == 1) return Integer.parseInt(s);
		// If 
		char base = s.charAt(1);
		String num = s.substring(2);
		//String[] sParts = s.split(""+base);
		switch(base){
			case 'b':
				return Integer.parseInt(num, 2);
			case 'o':
				return Integer.parseInt(num, 8);
			case 'x':
				return Integer.parseInt(num, 16);
			default:
				throw new NumberFormatException(errorMessage());
		}
    }

    private String errorMessage(){
		return " !! Lexic error: Not recognized token " + yytext() + " at position [line: " + (yyline+1) + ", column: " + (yycolumn+1) + "]";
    }
    
    /***
       Mecanismes de gestió de símbols basat en ComplexSymbol. Tot i que en
       aquest cas potser no és del tot necessari.
     ***/
    /**
     Construcció d'un symbol sense atribut associat.
     **/
    private ComplexSymbol symbol(int type) {
        // Sumar 1 per a que la primera línia i columna no sigui 0.
        ComplexSymbol simbolo = new ComplexSymbol(ParserSym.terminalNames[type], type);
        simbolo.xleft = yyline +1;
        simbolo.xright = yycolumn;
        tokens.add(simbolo);
        return simbolo;
     }
    
    /**
     Construcció d'un symbol amb un atribut associat.
     **/
    private Symbol symbol(int type, Object value) {
        // Sumar 1 per a que la primera línia i columna no sigui 0.
        ComplexSymbol simbolo = new ComplexSymbol(ParserSym.terminalNames[type],type, value);
        simbolo.xleft = yyline + 1;
        simbolo.xright = yycolumn;
        tokens.add(simbolo);
        return simbolo;
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {   return symbol(ParserSym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { errors.add(errorMessage()); System.err.println(errorMessage());
						return symbol(ParserSym.error);
            }
          // fall through
          case 51: break;
          case 2:
            { /* no hacemos nada*/
            }
          // fall through
          case 52: break;
          case 3:
            { return symbol(ParserSym.EOF)
            }
          // fall through
          case 53: break;
          case 4:
            { tokens.add(yytext() + " : DQUOTE"); return symbol(ParserSym.DQUOTE);
            }
          // fall through
          case 54: break;
          case 5:
            { tokens.add(yytext() + " : KW_AND"); return symbol(ParserSym.AND);
            }
          // fall through
          case 55: break;
          case 6:
            { tokens.add(yytext() + " : SQUOTE"); return symbol(ParserSym.SQUOTE);
            }
          // fall through
          case 56: break;
          case 7:
            { tokens.add(yytext() + " : L_PAREN"); return symbol(ParserSym.L_PAREN);
            }
          // fall through
          case 57: break;
          case 8:
            { tokens.add(yytext() + " : R_PAREN"); return symbol(ParserSym.R_PAREN);
            }
          // fall through
          case 58: break;
          case 9:
            { tokens.add(yytext() + " : OP_PROD"); return symbol(ParserSym.PROD);
            }
          // fall through
          case 59: break;
          case 10:
            { tokens.add(yytext() + " : OP_ADD"); return symbol(ParserSym.ADD);
            }
          // fall through
          case 60: break;
          case 11:
            { tokens.add(yytext() + " : COMMA"); return symbol(ParserSym.COMMA);
            }
          // fall through
          case 61: break;
          case 12:
            { tokens.add(yytext() + " : OP_SUB"); return symbol(ParserSym.SUB);
            }
          // fall through
          case 62: break;
          case 13:
            { tokens.add(yytext() + " : OP_DIV"); return symbol(ParserSym.DIV);
            }
          // fall through
          case 63: break;
          case 14:
            { try {tokens.add(yytext() + " : INTEGER"); return symbol{ParserSym.INT, Integer.parseInt(yytext())};} catch(Exception nf){return symbol(ParserSym.error);}
            }
          // fall through
          case 64: break;
          case 15:
            { tokens.add(yytext() + " : SYM_ASIG"); return symbol(ParserSym.ASIG);
            }
          // fall through
          case 65: break;
          case 16:
            { tokens.add(yytext() + " : ENDLINE"); return symbol(ParserSym.ENDLINE);
            }
          // fall through
          case 66: break;
          case 17:
            { tokens.add(yytext() + " : OP_LESSER"); return symbol(ParserSym.LESSER);
            }
          // fall through
          case 67: break;
          case 18:
            { tokens.add(yytext() + " : OP_IS_EQUAL"); return symbol(ParserSym.IS_EQUAL);
            }
          // fall through
          case 68: break;
          case 19:
            { tokens.add(yytext() + " : OP_BIGGER"); return symbol(ParserSym.BIGGER);
            }
          // fall through
          case 69: break;
          case 20:
            { tokens.add(yytext() + " : IDENTIFIER"); return symbol(ParserSym.IDENTIFIER, yytext());
            }
          // fall through
          case 70: break;
          case 21:
            { tokens.add(yytext() + " : L_BRACKET"); return symbol(ParserSym.L_BRACKET);
            }
          // fall through
          case 71: break;
          case 22:
            { tokens.add(yytext() + " : OP_MOD"); return symbol(ParserSym.MOD);
            }
          // fall through
          case 72: break;
          case 23:
            { tokens.add(yytext() + " : R_BRACKET"); return symbol(ParserSym.R_BRACKET);
            }
          // fall through
          case 73: break;
          case 24:
            { tokens.add(yytext() + " : L_KEY"); return symbol(ParserSym.L_KEY);
            }
          // fall through
          case 74: break;
          case 25:
            { tokens.add(yytext() + " : KW_OR"); return symbol(ParserSym.OR);
            }
          // fall through
          case 75: break;
          case 26:
            { tokens.add(yytext() + " : R_KEY"); return symbol(ParserSym.R_KEY);
            }
          // fall through
          case 76: break;
          case 27:
            { tokens.add(yytext() + " : KW_NOT"); return symbol(ParserSym.NOT);
            }
          // fall through
          case 77: break;
          case 28:
            { tokens.add(yytext() + " : STRING"); return symbol(ParserSym.STRING, yytext());
            }
          // fall through
          case 78: break;
          case 29:
            { /* No hacemos nada */
            }
          // fall through
          case 79: break;
          case 30:
            { try {tokens.add(yytext() + " : DOUBLE"); return symbol(ParserSym.REAL, Double.parseDouble(this.yytext()));} catch(Exception nf){return symbol(ParserSym.error);}
            }
          // fall through
          case 80: break;
          case 31:
            { tokens.add(yytext() + " : OP_NEQ"); return symbol(ParserSym.NEQ);
            }
          // fall through
          case 81: break;
          case 32:
            { tokens.add(yytext() + " : OP_LEQ"); return symbol(ParserSym.LEQ);
            }
          // fall through
          case 82: break;
          case 33:
            { tokens.add(yytext() + " : OP_BEQ"); return symbol(ParserSym.BEQ);
            }
          // fall through
          case 83: break;
          case 34:
            { tokens.add(yytext() + " : KW_DO"); return symbol(ParserSym.KW_DO);
            }
          // fall through
          case 84: break;
          case 35:
            { tokens.add(yytext() + " : KW_ELSE"); return symbol(ParserSym.KW_ELSE);
            }
          // fall through
          case 85: break;
          case 36:
            { tokens.add(yytext() + " : KW_IF"); return symbol(ParserSym.KW_IF);
            }
          // fall through
          case 86: break;
          case 37:
            { tokens.add(yytext() + " : CHAR"); return symbol(ParserSym.STRING, yytext().charAt(0));
            }
          // fall through
          case 87: break;
          case 38:
            { tokens.add(yytext() + " : TYPE_CHARACTER"); return symbol(ParserSym.TYPE_CHARACTER);
            }
          // fall through
          case 88: break;
          case 39:
            { tokens.add(yytext() + " : TYPE_INTEGER"); return symbol(ParserSym.TYPE_INTEGER);
            }
          // fall through
          case 89: break;
          case 40:
            { tokens.add(yytext() + " : KW_RETURN"); return symbol(ParserSym.KW_RETURN);
            }
          // fall through
          case 90: break;
          case 41:
            { tokens.add(yytext() + " : KW_LOOP"); return symbol(ParserSym.KW_LOOP);
            }
          // fall through
          case 91: break;
          case 42:
            { tokens.add(yytext() + " : TYPE_BOOLEAN"); return symbol(ParserSym.TYPE_BOOLEAN);
            }
          // fall through
          case 92: break;
          case 43:
            { tokens.add(yytext() + " : KW_ELIF"); return symbol(ParserSym.KW_ELIF);
            }
          // fall through
          case 93: break;
          case 44:
            { tokens.add(yytext() + " : BOOLEAN"); return symbol(ParserSym.BOOLEAN, Boolean.parseBoolean(yytext()));
            }
          // fall through
          case 94: break;
          case 45:
            { tokens.add(yytext() + " : TYPE_CONSTANT"); return symbol(ParserSym.TYPE_CONSTANT);
            }
          // fall through
          case 95: break;
          case 46:
            { tokens.add(yytext() + " : TYPE_VOID"); return symbol(ParserSym.TYPE_VOID);
            }
          // fall through
          case 96: break;
          case 47:
            { tokens.add(yytext() + " : KW_MAIN"); return symbol(ParserSym.RES_MAIN);
            }
          // fall through
          case 97: break;
          case 48:
            { tokens.add(yytext() + " : KW_RETURN"); return symbol(ParserSym.KW_SWITCH);
            }
          // fall through
          case 98: break;
          case 49:
            { tokens.add(yytext() + " : TYPE_STRING"); return symbol(ParserSym.TYPE_STRING);
            }
          // fall through
          case 99: break;
          case 50:
            { tokens.add(yytext() + " : TYPE_DOUBLE"); return symbol(ParserSym.DOUBLE);
            }
          // fall through
          case 100: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
