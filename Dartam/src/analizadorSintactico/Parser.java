
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadorSintactico;

import java_cup.runtime.*;
import analizadorSintactico.symbols.*;
import java.io.PrintStream;
import java.util.HashMap;
import java.util.List;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\172\000\002\002\004\000\002\047\004\000\002\047" +
    "\003\000\002\050\013\000\002\050\003\000\002\050\010" +
    "\000\002\004\003\000\002\004\003\000\002\052\004\000" +
    "\002\052\002\000\002\003\016\000\002\003\004\000\002" +
    "\002\004\000\002\002\002\000\002\006\003\000\002\006" +
    "\004\000\002\006\004\000\002\006\005\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\007\003\000\002\007\002\000\002" +
    "\010\006\000\002\010\004\000\002\011\006\000\002\011" +
    "\005\000\002\051\006\000\002\051\005\000\002\012\006" +
    "\000\002\012\004\000\002\013\004\000\002\013\002\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\016\004\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\017\006" +
    "\000\002\017\005\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\021\005\000\002\021\003\000\002\022\004\000\002\022" +
    "\005\000\002\023\006\000\002\024\005\000\002\024\004" +
    "\000\002\014\005\000\002\014\011\000\002\014\007\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\005\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\007\000\002" +
    "\026\005\000\002\027\004\000\002\027\004\000\002\030" +
    "\005\000\002\031\007\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\036\007\000\002\036\010" +
    "\000\002\037\003\000\002\037\007\000\002\040\011\000" +
    "\002\041\004\000\002\041\002\000\002\042\007\000\002" +
    "\043\006\000\002\043\002\000\002\044\010\000\002\045" +
    "\007\000\002\045\002\000\002\046\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\342\000\022\043\012\044\017\045\021\046\005\047" +
    "\014\063\006\064\013\065\020\001\002\000\022\043\012" +
    "\044\017\045\021\046\005\047\014\063\006\064\013\065" +
    "\020\001\002\000\006\055\uffec\104\uffec\001\002\000\020" +
    "\043\012\044\017\045\021\046\005\047\014\050\331\064" +
    "\022\001\002\000\024\002\uffff\043\012\044\017\045\021" +
    "\046\005\047\014\063\153\064\013\065\020\001\002\000" +
    "\024\002\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd" +
    "\063\ufffd\064\ufffd\065\ufffd\001\002\000\006\055\133\104" +
    "\ufff3\001\002\000\006\055\uffef\104\uffef\001\002\000\004" +
    "\104\142\001\002\000\006\055\uffeb\104\uffeb\001\002\000" +
    "\004\002\141\001\002\000\004\104\024\001\002\000\006" +
    "\055\uffee\104\uffee\001\002\000\016\043\012\044\017\045" +
    "\021\046\005\047\014\064\022\001\002\000\006\055\uffed" +
    "\104\uffed\001\002\000\004\104\131\001\002\000\004\104" +
    "\024\001\002\000\010\013\027\057\uffdf\060\uffdf\001\002" +
    "\000\004\057\026\001\002\000\060\002\uffe6\043\uffe6\044" +
    "\uffe6\045\uffe6\046\uffe6\047\uffe6\053\uffe6\054\uffe6\057\uffe6" +
    "\063\uffe6\064\uffe6\065\uffe6\066\uffe6\071\uffe6\072\uffe6\073" +
    "\uffe6\074\uffe6\075\uffe6\077\uffe6\100\uffe6\101\uffe6\102\uffe6" +
    "\104\uffe6\001\002\000\036\004\050\005\053\034\036\051" +
    "\037\077\041\100\035\101\033\102\056\104\042\105\046" +
    "\106\045\107\057\110\055\111\044\001\002\000\006\057" +
    "\uffe1\060\031\001\002\000\004\104\024\001\002\000\004" +
    "\057\uffe2\001\002\000\004\051\uffcf\001\002\000\070\004" +
    "\uffb7\005\uffb7\006\uffb7\007\uffb7\010\uffb7\011\uffb7\012\uffb7" +
    "\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032" +
    "\uffb7\033\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7" +
    "\052\uffb7\053\uffb7\054\uffb7\056\uffb7\057\uffb7\060\uffb7\103" +
    "\uffb7\001\002\000\004\051\uffd1\001\002\000\036\004\uff9b" +
    "\005\uff9b\034\uff9b\051\uff9b\077\uff9b\100\uff9b\101\uff9b\102" +
    "\uff9b\104\uff9b\105\uff9b\106\uff9b\107\uff9b\110\uff9b\111\uff9b" +
    "\001\002\000\036\004\050\005\053\034\036\051\037\077" +
    "\041\100\035\101\033\102\056\104\042\105\046\106\045" +
    "\107\057\110\055\111\044\001\002\000\070\004\uffba\005" +
    "\uffba\006\uffba\007\uffba\010\uffba\011\uffba\012\uffba\024\uffba" +
    "\025\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033" +
    "\uffba\036\uffba\037\uffba\040\uffba\041\uffba\042\uffba\052\uffba" +
    "\053\uffba\054\uffba\056\uffba\057\uffba\060\uffba\103\uffba\001" +
    "\002\000\004\051\uffd2\001\002\000\072\004\uffaf\005\uffaf" +
    "\006\uffaf\007\uffaf\010\uffaf\011\uffaf\012\uffaf\024\uffaf\025" +
    "\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf" +
    "\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\051\uffd3\052" +
    "\uffaf\053\uffaf\054\uffaf\056\uffaf\057\uffaf\060\uffaf\103\uffaf" +
    "\001\002\000\056\004\101\005\104\006\103\007\077\010" +
    "\112\011\102\012\066\024\113\025\072\026\110\027\106" +
    "\030\070\031\111\032\067\033\073\036\071\037\074\040" +
    "\114\042\075\057\uffe0\060\uffe0\103\107\001\002\000\070" +
    "\004\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa\011\uffaa\012" +
    "\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa" +
    "\032\uffaa\033\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042" +
    "\uffaa\052\uffaa\053\uffaa\054\uffaa\056\uffaa\057\uffaa\060\uffaa" +
    "\103\uffaa\001\002\000\070\004\uffad\005\uffad\006\uffad\007" +
    "\uffad\010\uffad\011\uffad\012\uffad\024\uffad\025\uffad\026\uffad" +
    "\027\uffad\030\uffad\031\uffad\032\uffad\033\uffad\036\uffad\037" +
    "\uffad\040\uffad\041\uffad\042\uffad\052\uffad\053\uffad\054\uffad" +
    "\056\uffad\057\uffad\060\uffad\103\uffad\001\002\000\070\004" +
    "\uffae\005\uffae\006\uffae\007\uffae\010\uffae\011\uffae\012\uffae" +
    "\024\uffae\025\uffae\026\uffae\027\uffae\030\uffae\031\uffae\032" +
    "\uffae\033\uffae\036\uffae\037\uffae\040\uffae\041\uffae\042\uffae" +
    "\052\uffae\053\uffae\054\uffae\056\uffae\057\uffae\060\uffae\103" +
    "\uffae\001\002\000\070\004\uffb8\005\uffb8\006\uffb8\007\uffb8" +
    "\010\uffb8\011\uffb8\012\uffb8\024\uffb8\025\uffb8\026\uffb8\027" +
    "\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\036\uffb8\037\uffb8" +
    "\040\uffb8\041\uffb8\042\uffb8\052\uffb8\053\uffb8\054\uffb8\056" +
    "\uffb8\057\uffb8\060\uffb8\103\uffb8\001\002\000\036\004\uff9a" +
    "\005\uff9a\034\uff9a\051\uff9a\077\uff9a\100\uff9a\101\uff9a\102" +
    "\uff9a\104\uff9a\105\uff9a\106\uff9a\107\uff9a\110\uff9a\111\uff9a" +
    "\001\002\000\036\004\050\005\053\034\036\051\037\077" +
    "\041\100\035\101\033\102\056\104\042\105\046\106\045" +
    "\107\057\110\055\111\044\001\002\000\070\004\uffbb\005" +
    "\uffbb\006\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb\024\uffbb" +
    "\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033" +
    "\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\052\uffbb" +
    "\053\uffbb\054\uffbb\056\uffbb\057\uffbb\060\uffbb\103\uffbb\001" +
    "\002\000\036\004\uff99\005\uff99\034\uff99\051\uff99\077\uff99" +
    "\100\uff99\101\uff99\102\uff99\104\uff99\105\uff99\106\uff99\107" +
    "\uff99\110\uff99\111\uff99\001\002\000\070\004\uffb6\005\uffb6" +
    "\006\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6\024\uffb6\025" +
    "\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6" +
    "\036\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\052\uffb6\053" +
    "\uffb6\054\uffb6\056\uffb6\057\uffb6\060\uffb6\103\uffb6\001\002" +
    "\000\070\004\uffab\005\uffab\006\uffab\007\uffab\010\uffab\011" +
    "\uffab\012\uffab\024\uffab\025\uffab\026\uffab\027\uffab\030\uffab" +
    "\031\uffab\032\uffab\033\uffab\036\uffab\037\uffab\040\uffab\041" +
    "\uffab\042\uffab\052\uffab\053\uffab\054\uffab\056\uffab\057\uffab" +
    "\060\uffab\103\uffab\001\002\000\004\051\uffd0\001\002\000" +
    "\070\004\uffac\005\uffac\006\uffac\007\uffac\010\uffac\011\uffac" +
    "\012\uffac\024\uffac\025\uffac\026\uffac\027\uffac\030\uffac\031" +
    "\uffac\032\uffac\033\uffac\036\uffac\037\uffac\040\uffac\041\uffac" +
    "\042\uffac\052\uffac\053\uffac\054\uffac\056\uffac\057\uffac\060" +
    "\uffac\103\uffac\001\002\000\004\051\061\001\002\000\040" +
    "\004\050\005\053\034\036\051\037\052\062\077\041\100" +
    "\035\101\033\102\056\104\042\105\046\106\045\107\057" +
    "\110\055\111\044\001\002\000\070\004\uffd4\005\uffd4\006" +
    "\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4\024\uffd4\025\uffd4" +
    "\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\036" +
    "\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\052\uffd4\053\uffd4" +
    "\054\uffd4\056\uffd4\057\uffd4\060\uffd4\103\uffd4\001\002\000" +
    "\056\004\101\005\104\006\103\007\077\010\112\011\102" +
    "\012\066\024\113\025\072\026\110\027\106\030\070\031" +
    "\111\032\067\033\073\036\071\037\074\040\114\042\075" +
    "\052\uffcd\060\100\103\107\001\002\000\004\052\065\001" +
    "\002\000\070\004\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5" +
    "\011\uffd5\012\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030" +
    "\uffd5\031\uffd5\032\uffd5\033\uffd5\036\uffd5\037\uffd5\040\uffd5" +
    "\041\uffd5\042\uffd5\052\uffd5\053\uffd5\054\uffd5\056\uffd5\057" +
    "\uffd5\060\uffd5\103\uffd5\001\002\000\036\004\uffa5\005\uffa5" +
    "\034\uffa5\051\uffa5\077\uffa5\100\uffa5\101\uffa5\102\uffa5\104" +
    "\uffa5\105\uffa5\106\uffa5\107\uffa5\110\uffa5\111\uffa5\001\002" +
    "\000\036\004\uff9d\005\uff9d\034\uff9d\051\uff9d\077\uff9d\100" +
    "\uff9d\101\uff9d\102\uff9d\104\uff9d\105\uff9d\106\uff9d\107\uff9d" +
    "\110\uff9d\111\uff9d\001\002\000\036\004\uff9f\005\uff9f\034" +
    "\uff9f\051\uff9f\077\uff9f\100\uff9f\101\uff9f\102\uff9f\104\uff9f" +
    "\105\uff9f\106\uff9f\107\uff9f\110\uff9f\111\uff9f\001\002\000" +
    "\070\004\uff98\005\uff98\006\uff98\007\uff98\010\uff98\011\uff98" +
    "\012\uff98\024\uff98\025\uff98\026\uff98\027\uff98\030\uff98\031" +
    "\uff98\032\uff98\033\uff98\036\uff98\037\uff98\040\uff98\041\uff98" +
    "\042\uff98\052\uff98\053\uff98\054\uff98\056\uff98\057\uff98\060" +
    "\uff98\103\uff98\001\002\000\036\004\uffa2\005\uffa2\034\uffa2" +
    "\051\uffa2\077\uffa2\100\uffa2\101\uffa2\102\uffa2\104\uffa2\105" +
    "\uffa2\106\uffa2\107\uffa2\110\uffa2\111\uffa2\001\002\000\036" +
    "\004\uff9c\005\uff9c\034\uff9c\051\uff9c\077\uff9c\100\uff9c\101" +
    "\uff9c\102\uff9c\104\uff9c\105\uff9c\106\uff9c\107\uff9c\110\uff9c" +
    "\111\uff9c\001\002\000\036\004\uffa4\005\uffa4\034\uffa4\051" +
    "\uffa4\077\uffa4\100\uffa4\101\uffa4\102\uffa4\104\uffa4\105\uffa4" +
    "\106\uffa4\107\uffa4\110\uffa4\111\uffa4\001\002\000\004\104" +
    "\125\001\002\000\070\004\uffb2\005\uffb2\006\uffb2\007\uffb2" +
    "\010\uffb2\011\uffb2\012\uffb2\024\uffb2\025\uffb2\026\uffb2\027" +
    "\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2\036\uffb2\037\uffb2" +
    "\040\uffb2\041\uffb2\042\uffb2\052\uffb2\053\uffb2\054\uffb2\056" +
    "\uffb2\057\uffb2\060\uffb2\103\uffb2\001\002\000\036\004\uffa8" +
    "\005\uffa8\034\uffa8\051\uffa8\077\uffa8\100\uffa8\101\uffa8\102" +
    "\uffa8\104\uffa8\105\uffa8\106\uffa8\107\uffa8\110\uffa8\111\uffa8" +
    "\001\002\000\036\004\050\005\053\034\036\051\037\077" +
    "\041\100\035\101\033\102\056\104\042\105\046\106\045" +
    "\107\057\110\055\111\044\001\002\000\070\004\uff97\005" +
    "\uff97\006\uff97\007\uff97\010\uff97\011\uff97\012\uff97\024\uff97" +
    "\025\uff97\026\uff97\027\uff97\030\uff97\031\uff97\032\uff97\033" +
    "\uff97\036\uff97\037\uff97\040\uff97\041\uff97\042\uff97\052\uff97" +
    "\053\uff97\054\uff97\056\uff97\057\uff97\060\uff97\103\uff97\001" +
    "\002\000\036\004\uffa6\005\uffa6\034\uffa6\051\uffa6\077\uffa6" +
    "\100\uffa6\101\uffa6\102\uffa6\104\uffa6\105\uffa6\106\uffa6\107" +
    "\uffa6\110\uffa6\111\uffa6\001\002\000\036\004\uffa9\005\uffa9" +
    "\034\uffa9\051\uffa9\077\uffa9\100\uffa9\101\uffa9\102\uffa9\104" +
    "\uffa9\105\uffa9\106\uffa9\107\uffa9\110\uffa9\111\uffa9\001\002" +
    "\000\070\004\uff96\005\uff96\006\uff96\007\uff96\010\uff96\011" +
    "\uff96\012\uff96\024\uff96\025\uff96\026\uff96\027\uff96\030\uff96" +
    "\031\uff96\032\uff96\033\uff96\036\uff96\037\uff96\040\uff96\041" +
    "\uff96\042\uff96\052\uff96\053\uff96\054\uff96\056\uff96\057\uff96" +
    "\060\uff96\103\uff96\001\002\000\036\004\050\005\053\034" +
    "\036\051\037\077\041\100\035\101\033\102\056\104\042" +
    "\105\046\106\045\107\057\110\055\111\044\001\002\000" +
    "\036\004\uffa0\005\uffa0\034\uffa0\051\uffa0\077\uffa0\100\uffa0" +
    "\101\uffa0\102\uffa0\104\uffa0\105\uffa0\106\uffa0\107\uffa0\110" +
    "\uffa0\111\uffa0\001\002\000\004\055\120\001\002\000\036" +
    "\004\uffa1\005\uffa1\034\uffa1\051\uffa1\077\uffa1\100\uffa1\101" +
    "\uffa1\102\uffa1\104\uffa1\105\uffa1\106\uffa1\107\uffa1\110\uffa1" +
    "\111\uffa1\001\002\000\036\004\uff9e\005\uff9e\034\uff9e\051" +
    "\uff9e\077\uff9e\100\uff9e\101\uff9e\102\uff9e\104\uff9e\105\uff9e" +
    "\106\uff9e\107\uff9e\110\uff9e\111\uff9e\001\002\000\036\004" +
    "\uffa7\005\uffa7\034\uffa7\051\uffa7\077\uffa7\100\uffa7\101\uffa7" +
    "\102\uffa7\104\uffa7\105\uffa7\106\uffa7\107\uffa7\110\uffa7\111" +
    "\uffa7\001\002\000\036\004\uffa3\005\uffa3\034\uffa3\051\uffa3" +
    "\077\uffa3\100\uffa3\101\uffa3\102\uffa3\104\uffa3\105\uffa3\106" +
    "\uffa3\107\uffa3\110\uffa3\111\uffa3\001\002\000\036\004\050" +
    "\005\053\034\036\051\037\077\041\100\035\101\033\102" +
    "\056\104\042\105\046\106\045\107\057\110\055\111\044" +
    "\001\002\000\054\004\101\005\104\006\103\007\077\010" +
    "\112\011\102\012\066\024\113\025\072\026\110\027\106" +
    "\030\070\031\111\032\067\033\073\036\071\037\074\040" +
    "\114\041\116\042\075\103\107\001\002\000\036\004\050" +
    "\005\053\034\036\051\037\077\041\100\035\101\033\102" +
    "\056\104\042\105\046\106\045\107\057\110\055\111\044" +
    "\001\002\000\070\004\101\005\104\006\103\007\077\010" +
    "\112\011\102\012\066\024\113\025\072\026\110\027\106" +
    "\030\070\031\111\032\067\033\073\036\071\037\074\040" +
    "\114\041\uffb0\042\075\052\uffb0\053\uffb0\054\uffb0\056\uffb0" +
    "\057\uffb0\060\uffb0\103\107\001\002\000\036\004\050\005" +
    "\053\034\036\051\037\077\041\100\035\101\033\102\056" +
    "\104\042\105\046\106\045\107\057\110\055\111\044\001" +
    "\002\000\054\004\101\005\104\006\103\007\077\010\112" +
    "\011\102\012\066\024\113\025\072\026\110\027\106\030" +
    "\070\031\111\032\067\033\073\036\071\037\074\040\114" +
    "\042\075\056\122\103\107\001\002\000\070\004\uffb5\005" +
    "\uffb5\006\uffb5\007\uffb5\010\uffb5\011\uffb5\012\uffb5\024\uffb5" +
    "\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033" +
    "\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\052\uffb5" +
    "\053\uffb5\054\uffb5\056\uffb5\057\uffb5\060\uffb5\103\uffb5\001" +
    "\002\000\070\004\101\005\104\006\103\007\077\010\112" +
    "\011\102\012\066\024\113\025\072\026\110\027\106\030" +
    "\070\031\111\032\067\033\073\036\071\037\074\040\114" +
    "\041\uffb1\042\075\052\uffb1\053\uffb1\054\uffb1\056\uffb1\057" +
    "\uffb1\060\uffb1\103\107\001\002\000\004\052\uffce\001\002" +
    "\000\070\004\uffb4\005\uffb4\006\uffb4\007\uffb4\010\uffb4\011" +
    "\uffb4\012\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4" +
    "\031\uffb4\032\uffb4\033\uffb4\036\uffb4\037\uffb4\040\uffb4\041" +
    "\uffb4\042\uffb4\052\uffb4\053\uffb4\054\uffb4\056\uffb4\057\uffb4" +
    "\060\uffb4\103\uffb4\001\002\000\070\004\101\005\104\006" +
    "\103\007\077\010\112\011\102\012\066\024\113\025\072" +
    "\026\110\027\106\030\070\031\111\032\067\033\073\036" +
    "\071\037\074\040\114\041\uffb3\042\075\052\uffb3\053\uffb3" +
    "\054\uffb3\056\uffb3\057\uffb3\060\uffb3\103\107\001\002\000" +
    "\054\004\101\005\104\006\103\007\077\010\112\011\102" +
    "\012\066\024\113\025\072\026\110\027\106\030\070\031" +
    "\111\032\067\033\073\036\071\037\074\040\114\042\075" +
    "\052\130\103\107\001\002\000\070\004\uffb9\005\uffb9\006" +
    "\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9\024\uffb9\025\uffb9" +
    "\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9\036" +
    "\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\052\uffb9\053\uffb9" +
    "\054\uffb9\056\uffb9\057\uffb9\060\uffb9\103\uffb9\001\002\000" +
    "\006\055\133\104\ufff1\001\002\000\004\104\ufff0\001\002" +
    "\000\036\004\050\005\053\034\036\051\037\077\041\100" +
    "\035\101\033\102\056\104\042\105\046\106\045\107\057" +
    "\110\055\111\044\001\002\000\054\004\101\005\104\006" +
    "\103\007\077\010\112\011\102\012\066\024\113\025\072" +
    "\026\110\027\106\030\070\031\111\032\067\033\073\036" +
    "\071\037\074\040\114\042\075\056\135\103\107\001\002" +
    "\000\006\055\133\104\uffe3\001\002\000\004\104\uffe4\001" +
    "\002\000\004\057\140\001\002\000\060\002\uffe5\043\uffe5" +
    "\044\uffe5\045\uffe5\046\uffe5\047\uffe5\053\uffe5\054\uffe5\057" +
    "\uffe5\063\uffe5\064\uffe5\065\uffe5\066\uffe5\071\uffe5\072\uffe5" +
    "\073\uffe5\074\uffe5\075\uffe5\077\uffe5\100\uffe5\101\uffe5\102" +
    "\uffe5\104\uffe5\001\002\000\004\002\001\001\002\000\010" +
    "\053\143\055\133\104\ufff1\001\002\000\022\043\012\044" +
    "\017\045\021\046\005\047\014\054\ufff8\064\022\065\020" +
    "\001\002\000\004\054\147\001\002\000\022\043\012\044" +
    "\017\045\021\046\005\047\014\054\ufff8\064\022\065\020" +
    "\001\002\000\004\054\ufff9\001\002\000\004\057\150\001" +
    "\002\000\024\002\ufffc\043\ufffc\044\ufffc\045\ufffc\046\ufffc" +
    "\047\ufffc\063\ufffc\064\ufffc\065\ufffc\001\002\000\004\104" +
    "\ufff2\001\002\000\024\002\ufff6\043\ufff6\044\ufff6\045\ufff6" +
    "\046\ufff6\047\ufff6\063\ufff6\064\ufff6\065\ufff6\001\002\000" +
    "\020\043\012\044\017\045\021\046\005\047\014\050\155" +
    "\064\022\001\002\000\004\104\157\001\002\000\004\104" +
    "\ufffa\001\002\000\004\104\ufffb\001\002\000\004\051\160" +
    "\001\002\000\020\043\012\044\017\045\021\046\005\047" +
    "\014\052\uffe9\064\022\001\002\000\004\052\uffea\001\002" +
    "\000\004\052\167\001\002\000\004\104\164\001\002\000" +
    "\006\052\uffe7\060\165\001\002\000\016\043\012\044\017" +
    "\045\021\046\005\047\014\064\022\001\002\000\004\052" +
    "\uffe8\001\002\000\004\053\170\001\002\000\046\043\012" +
    "\044\017\045\021\046\005\047\014\054\ufff4\064\022\065" +
    "\020\066\172\071\171\072\174\073\206\074\205\077\041" +
    "\100\035\101\033\102\056\104\203\001\002\000\054\004" +
    "\050\005\053\034\036\043\012\044\017\045\021\046\005" +
    "\047\014\051\037\064\022\065\020\077\041\100\035\101" +
    "\033\102\056\104\042\105\046\106\045\107\057\110\055" +
    "\111\044\001\002\000\036\004\050\005\053\034\036\051" +
    "\037\077\041\100\035\101\033\102\056\104\042\105\046" +
    "\106\045\107\057\110\055\111\044\001\002\000\052\043" +
    "\uffdd\044\uffdd\045\uffdd\046\uffdd\047\uffdd\053\uffdd\054\uffdd" +
    "\064\uffdd\065\uffdd\066\uffdd\071\uffdd\072\uffdd\073\uffdd\074" +
    "\uffdd\075\uffdd\077\uffdd\100\uffdd\101\uffdd\102\uffdd\104\uffdd" +
    "\001\002\000\004\053\271\001\002\000\052\043\uffd7\044" +
    "\uffd7\045\uffd7\046\uffd7\047\uffd7\053\uffd7\054\uffd7\064\uffd7" +
    "\065\uffd7\066\uffd7\071\uffd7\072\uffd7\073\uffd7\074\uffd7\075" +
    "\uffd7\077\uffd7\100\uffd7\101\uffd7\102\uffd7\104\uffd7\001\002" +
    "\000\052\043\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9\053" +
    "\uffd9\054\uffd9\064\uffd9\065\uffd9\066\uffd9\071\uffd9\072\uffd9" +
    "\073\uffd9\074\uffd9\075\uffd9\077\uffd9\100\uffd9\101\uffd9\102" +
    "\uffd9\104\uffd9\001\002\000\052\043\uffdb\044\uffdb\045\uffdb" +
    "\046\uffdb\047\uffdb\053\uffdb\054\uffdb\064\uffdb\065\uffdb\066" +
    "\uffdb\071\uffdb\072\uffdb\073\uffdb\074\uffdb\075\uffdb\077\uffdb" +
    "\100\uffdb\101\uffdb\102\uffdb\104\uffdb\001\002\000\052\043" +
    "\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8\053\uffd8\054\uffd8" +
    "\064\uffd8\065\uffd8\066\uffd8\071\uffd8\072\uffd8\073\uffd8\074" +
    "\uffd8\075\uffd8\077\uffd8\100\uffd8\101\uffd8\102\uffd8\104\uffd8" +
    "\001\002\000\052\043\uffdc\044\uffdc\045\uffdc\046\uffdc\047" +
    "\uffdc\053\uffdc\054\uffdc\064\uffdc\065\uffdc\066\uffdc\071\uffdc" +
    "\072\uffdc\073\uffdc\074\uffdc\075\uffdc\077\uffdc\100\uffdc\101" +
    "\uffdc\102\uffdc\104\uffdc\001\002\000\004\057\270\001\002" +
    "\000\034\013\221\014\231\015\225\016\227\017\232\020" +
    "\230\021\220\022\217\023\224\035\265\042\223\051\uffd3" +
    "\103\222\001\002\000\052\043\uffde\044\uffde\045\uffde\046" +
    "\uffde\047\uffde\053\uffde\054\uffde\064\uffde\065\uffde\066\uffde" +
    "\071\uffde\072\uffde\073\uffde\074\uffde\075\uffde\077\uffde\100" +
    "\uffde\101\uffde\102\uffde\104\uffde\001\002\000\040\004\050" +
    "\005\053\034\036\051\037\057\263\077\041\100\035\101" +
    "\033\102\056\104\042\105\046\106\045\107\057\110\055" +
    "\111\044\001\002\000\036\004\050\005\053\034\036\051" +
    "\037\077\041\100\035\101\033\102\056\104\042\105\046" +
    "\106\045\107\057\110\055\111\044\001\002\000\004\054" +
    "\245\001\002\000\052\043\012\044\017\045\021\046\005" +
    "\047\014\053\ufff4\054\ufff4\064\022\065\020\066\172\071" +
    "\171\072\174\073\206\074\205\075\ufff4\077\041\100\035" +
    "\101\033\102\056\104\203\001\002\000\052\043\uffd6\044" +
    "\uffd6\045\uffd6\046\uffd6\047\uffd6\053\uffd6\054\uffd6\064\uffd6" +
    "\065\uffd6\066\uffd6\071\uffd6\072\uffd6\073\uffd6\074\uffd6\075" +
    "\uffd6\077\uffd6\100\uffd6\101\uffd6\102\uffd6\104\uffd6\001\002" +
    "\000\006\057\214\060\213\001\002\000\004\104\215\001" +
    "\002\000\054\043\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8" +
    "\053\uffc8\054\uffc8\057\uffc8\064\uffc8\065\uffc8\066\uffc8\071" +
    "\uffc8\072\uffc8\073\uffc8\074\uffc8\075\uffc8\077\uffc8\100\uffc8" +
    "\101\uffc8\102\uffc8\104\uffc8\001\002\000\030\013\221\014" +
    "\231\015\225\016\227\017\232\020\230\021\220\022\217" +
    "\023\224\042\223\103\222\001\002\000\054\043\uffc9\044" +
    "\uffc9\045\uffc9\046\uffc9\047\uffc9\053\uffc9\054\uffc9\057\uffc9" +
    "\064\uffc9\065\uffc9\066\uffc9\071\uffc9\072\uffc9\073\uffc9\074" +
    "\uffc9\075\uffc9\077\uffc9\100\uffc9\101\uffc9\102\uffc9\104\uffc9" +
    "\001\002\000\036\004\uffbd\005\uffbd\034\uffbd\051\uffbd\077" +
    "\uffbd\100\uffbd\101\uffbd\102\uffbd\104\uffbd\105\uffbd\106\uffbd" +
    "\107\uffbd\110\uffbd\111\uffbd\001\002\000\036\004\uffbe\005" +
    "\uffbe\034\uffbe\051\uffbe\077\uffbe\100\uffbe\101\uffbe\102\uffbe" +
    "\104\uffbe\105\uffbe\106\uffbe\107\uffbe\110\uffbe\111\uffbe\001" +
    "\002\000\036\004\uffc4\005\uffc4\034\uffc4\051\uffc4\077\uffc4" +
    "\100\uffc4\101\uffc4\102\uffc4\104\uffc4\105\uffc4\106\uffc4\107" +
    "\uffc4\110\uffc4\111\uffc4\001\002\000\004\055\237\001\002" +
    "\000\004\104\234\001\002\000\036\004\uffbc\005\uffbc\034" +
    "\uffbc\051\uffbc\077\uffbc\100\uffbc\101\uffbc\102\uffbc\104\uffbc" +
    "\105\uffbc\106\uffbc\107\uffbc\110\uffbc\111\uffbc\001\002\000" +
    "\036\004\uffc2\005\uffc2\034\uffc2\051\uffc2\077\uffc2\100\uffc2" +
    "\101\uffc2\102\uffc2\104\uffc2\105\uffc2\106\uffc2\107\uffc2\110" +
    "\uffc2\111\uffc2\001\002\000\036\004\050\005\053\034\036" +
    "\051\037\077\041\100\035\101\033\102\056\104\042\105" +
    "\046\106\045\107\057\110\055\111\044\001\002\000\036" +
    "\004\uffc1\005\uffc1\034\uffc1\051\uffc1\077\uffc1\100\uffc1\101" +
    "\uffc1\102\uffc1\104\uffc1\105\uffc1\106\uffc1\107\uffc1\110\uffc1" +
    "\111\uffc1\001\002\000\036\004\uffbf\005\uffbf\034\uffbf\051" +
    "\uffbf\077\uffbf\100\uffbf\101\uffbf\102\uffbf\104\uffbf\105\uffbf" +
    "\106\uffbf\107\uffbf\110\uffbf\111\uffbf\001\002\000\036\004" +
    "\uffc3\005\uffc3\034\uffc3\051\uffc3\077\uffc3\100\uffc3\101\uffc3" +
    "\102\uffc3\104\uffc3\105\uffc3\106\uffc3\107\uffc3\110\uffc3\111" +
    "\uffc3\001\002\000\036\004\uffc0\005\uffc0\034\uffc0\051\uffc0" +
    "\077\uffc0\100\uffc0\101\uffc0\102\uffc0\104\uffc0\105\uffc0\106" +
    "\uffc0\107\uffc0\110\uffc0\111\uffc0\001\002\000\056\004\101" +
    "\005\104\006\103\007\077\010\112\011\102\012\066\024" +
    "\113\025\072\026\110\027\106\030\070\031\111\032\067" +
    "\033\073\036\071\037\074\040\114\042\075\057\uffc7\060" +
    "\uffc7\103\107\001\002\000\024\013\221\014\231\015\225" +
    "\016\227\017\232\020\230\021\220\022\217\023\224\001" +
    "\002\000\036\004\050\005\053\034\036\051\037\077\041" +
    "\100\035\101\033\102\056\104\042\105\046\106\045\107" +
    "\057\110\055\111\044\001\002\000\056\004\101\005\104" +
    "\006\103\007\077\010\112\011\102\012\066\024\113\025" +
    "\072\026\110\027\106\030\070\031\111\032\067\033\073" +
    "\036\071\037\074\040\114\042\075\057\uffc5\060\uffc5\103" +
    "\107\001\002\000\036\004\050\005\053\034\036\051\037" +
    "\077\041\100\035\101\033\102\056\104\042\105\046\106" +
    "\045\107\057\110\055\111\044\001\002\000\054\004\101" +
    "\005\104\006\103\007\077\010\112\011\102\012\066\024" +
    "\113\025\072\026\110\027\106\030\070\031\111\032\067" +
    "\033\073\036\071\037\074\040\114\042\075\056\241\103" +
    "\107\001\002\000\024\013\221\014\231\015\225\016\227" +
    "\017\232\020\230\021\220\022\217\023\224\001\002\000" +
    "\036\004\050\005\053\034\036\051\037\077\041\100\035" +
    "\101\033\102\056\104\042\105\046\106\045\107\057\110" +
    "\055\111\044\001\002\000\056\004\101\005\104\006\103" +
    "\007\077\010\112\011\102\012\066\024\113\025\072\026" +
    "\110\027\106\030\070\031\111\032\067\033\073\036\071" +
    "\037\074\040\114\042\075\057\uffc6\060\uffc6\103\107\001" +
    "\002\000\010\053\ufff5\054\ufff5\075\ufff5\001\002\000\024" +
    "\002\ufffe\043\ufffe\044\ufffe\045\ufffe\046\ufffe\047\ufffe\063" +
    "\ufffe\064\ufffe\065\ufffe\001\002\000\054\004\101\005\104" +
    "\006\103\007\077\010\112\011\102\012\066\024\113\025" +
    "\072\026\110\027\106\030\070\031\111\032\067\033\073" +
    "\036\071\037\074\040\114\042\075\054\247\103\107\001" +
    "\002\000\004\075\uff89\001\002\000\004\075\251\001\002" +
    "\000\040\004\050\005\053\034\036\051\037\076\254\077" +
    "\041\100\035\101\033\102\056\104\042\105\046\106\045" +
    "\107\057\110\055\111\044\001\002\000\004\053\253\001" +
    "\002\000\052\043\uff8b\044\uff8b\045\uff8b\046\uff8b\047\uff8b" +
    "\053\uff8b\054\uff8b\064\uff8b\065\uff8b\066\uff8b\071\uff8b\072" +
    "\uff8b\073\uff8b\074\uff8b\075\uff8b\077\uff8b\100\uff8b\101\uff8b" +
    "\102\uff8b\104\uff8b\001\002\000\004\041\260\001\002\000" +
    "\054\004\101\005\104\006\103\007\077\010\112\011\102" +
    "\012\066\024\113\025\072\026\110\027\106\030\070\031" +
    "\111\032\067\033\073\036\071\037\074\040\114\041\256" +
    "\042\075\103\107\001\002\000\046\043\012\044\017\045" +
    "\021\046\005\047\014\064\022\065\020\066\172\071\171" +
    "\072\174\073\206\074\205\075\ufff4\077\041\100\035\101" +
    "\033\102\056\104\203\001\002\000\004\075\uff8a\001\002" +
    "\000\046\043\012\044\017\045\021\046\005\047\014\053" +
    "\ufff4\064\022\065\020\066\172\071\171\072\174\073\206" +
    "\074\205\077\041\100\035\101\033\102\056\104\203\001" +
    "\002\000\004\053\uff88\001\002\000\054\004\101\005\104" +
    "\006\103\007\077\010\112\011\102\012\066\024\113\025" +
    "\072\026\110\027\106\030\070\031\111\032\067\033\073" +
    "\036\071\037\074\040\114\042\075\057\264\103\107\001" +
    "\002\000\052\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc" +
    "\053\uffcc\054\uffcc\064\uffcc\065\uffcc\066\uffcc\071\uffcc\072" +
    "\uffcc\073\uffcc\074\uffcc\075\uffcc\077\uffcc\100\uffcc\101\uffcc" +
    "\102\uffcc\104\uffcc\001\002\000\052\043\uffcb\044\uffcb\045" +
    "\uffcb\046\uffcb\047\uffcb\053\uffcb\054\uffcb\064\uffcb\065\uffcb" +
    "\066\uffcb\071\uffcb\072\uffcb\073\uffcb\074\uffcb\075\uffcb\077" +
    "\uffcb\100\uffcb\101\uffcb\102\uffcb\104\uffcb\001\002\000\004" +
    "\104\266\001\002\000\004\057\267\001\002\000\052\043" +
    "\uffca\044\uffca\045\uffca\046\uffca\047\uffca\053\uffca\054\uffca" +
    "\064\uffca\065\uffca\066\uffca\071\uffca\072\uffca\073\uffca\074" +
    "\uffca\075\uffca\077\uffca\100\uffca\101\uffca\102\uffca\104\uffca" +
    "\001\002\000\052\043\uffda\044\uffda\045\uffda\046\uffda\047" +
    "\uffda\053\uffda\054\uffda\064\uffda\065\uffda\066\uffda\071\uffda" +
    "\072\uffda\073\uffda\074\uffda\075\uffda\077\uffda\100\uffda\101" +
    "\uffda\102\uffda\104\uffda\001\002\000\046\043\012\044\017" +
    "\045\021\046\005\047\014\054\ufff4\064\022\065\020\066" +
    "\172\071\171\072\174\073\206\074\205\077\041\100\035" +
    "\101\033\102\056\104\203\001\002\000\004\054\273\001" +
    "\002\000\054\004\050\005\053\034\036\043\012\044\017" +
    "\045\021\046\005\047\014\051\037\064\022\065\020\077" +
    "\041\100\035\101\033\102\056\104\042\105\046\106\045" +
    "\107\057\110\055\111\044\001\002\000\004\057\300\001" +
    "\002\000\056\004\101\005\104\006\103\007\077\010\112" +
    "\011\102\012\066\024\113\025\072\026\110\027\106\030" +
    "\070\031\111\032\067\033\073\036\071\037\074\040\114" +
    "\042\075\053\uff93\057\uff93\103\107\001\002\000\004\057" +
    "\277\001\002\000\052\043\uff94\044\uff94\045\uff94\046\uff94" +
    "\047\uff94\053\uff94\054\uff94\064\uff94\065\uff94\066\uff94\071" +
    "\uff94\072\uff94\073\uff94\074\uff94\075\uff94\077\uff94\100\uff94" +
    "\101\uff94\102\uff94\104\uff94\001\002\000\036\004\050\005" +
    "\053\034\036\051\037\077\041\100\035\101\033\102\056" +
    "\104\042\105\046\106\045\107\057\110\055\111\044\001" +
    "\002\000\054\004\101\005\104\006\103\007\077\010\112" +
    "\011\102\012\066\024\113\025\072\026\110\027\106\030" +
    "\070\031\111\032\067\033\073\036\071\037\074\040\114" +
    "\042\075\057\302\103\107\001\002\000\004\104\215\001" +
    "\002\000\006\053\uff92\057\uff92\001\002\000\054\004\101" +
    "\005\104\006\103\007\077\010\112\011\102\012\066\024" +
    "\113\025\072\026\110\027\106\030\070\031\111\032\067" +
    "\033\073\036\071\037\074\040\114\042\075\053\305\103" +
    "\107\001\002\000\046\043\012\044\017\045\021\046\005" +
    "\047\014\054\ufff4\064\022\065\020\066\172\071\171\072" +
    "\174\073\206\074\205\077\041\100\035\101\033\102\056" +
    "\104\203\001\002\000\004\054\307\001\002\000\056\043" +
    "\uff8f\044\uff8f\045\uff8f\046\uff8f\047\uff8f\053\uff8f\054\uff8f" +
    "\064\uff8f\065\uff8f\066\uff8f\067\312\070\uff8f\071\uff8f\072" +
    "\uff8f\073\uff8f\074\uff8f\075\uff8f\077\uff8f\100\uff8f\101\uff8f" +
    "\102\uff8f\104\uff8f\001\002\000\056\043\uff8f\044\uff8f\045" +
    "\uff8f\046\uff8f\047\uff8f\053\uff8f\054\uff8f\064\uff8f\065\uff8f" +
    "\066\uff8f\067\312\070\uff8f\071\uff8f\072\uff8f\073\uff8f\074" +
    "\uff8f\075\uff8f\077\uff8f\100\uff8f\101\uff8f\102\uff8f\104\uff8f" +
    "\001\002\000\054\043\uff8c\044\uff8c\045\uff8c\046\uff8c\047" +
    "\uff8c\053\uff8c\054\uff8c\064\uff8c\065\uff8c\066\uff8c\070\320" +
    "\071\uff8c\072\uff8c\073\uff8c\074\uff8c\075\uff8c\077\uff8c\100" +
    "\uff8c\101\uff8c\102\uff8c\104\uff8c\001\002\000\036\004\050" +
    "\005\053\034\036\051\037\077\041\100\035\101\033\102" +
    "\056\104\042\105\046\106\045\107\057\110\055\111\044" +
    "\001\002\000\054\004\101\005\104\006\103\007\077\010" +
    "\112\011\102\012\066\024\113\025\072\026\110\027\106" +
    "\030\070\031\111\032\067\033\073\036\071\037\074\040" +
    "\114\042\075\053\314\103\107\001\002\000\046\043\012" +
    "\044\017\045\021\046\005\047\014\054\ufff4\064\022\065" +
    "\020\066\172\071\171\072\174\073\206\074\205\077\041" +
    "\100\035\101\033\102\056\104\203\001\002\000\004\054" +
    "\316\001\002\000\056\043\uff8e\044\uff8e\045\uff8e\046\uff8e" +
    "\047\uff8e\053\uff8e\054\uff8e\064\uff8e\065\uff8e\066\uff8e\067" +
    "\uff8e\070\uff8e\071\uff8e\072\uff8e\073\uff8e\074\uff8e\075\uff8e" +
    "\077\uff8e\100\uff8e\101\uff8e\102\uff8e\104\uff8e\001\002\000" +
    "\052\043\uff91\044\uff91\045\uff91\046\uff91\047\uff91\053\uff91" +
    "\054\uff91\064\uff91\065\uff91\066\uff91\071\uff91\072\uff91\073" +
    "\uff91\074\uff91\075\uff91\077\uff91\100\uff91\101\uff91\102\uff91" +
    "\104\uff91\001\002\000\004\053\321\001\002\000\046\043" +
    "\012\044\017\045\021\046\005\047\014\054\ufff4\064\022" +
    "\065\020\066\172\071\171\072\174\073\206\074\205\077" +
    "\041\100\035\101\033\102\056\104\203\001\002\000\004" +
    "\054\323\001\002\000\052\043\uff8d\044\uff8d\045\uff8d\046" +
    "\uff8d\047\uff8d\053\uff8d\054\uff8d\064\uff8d\065\uff8d\066\uff8d" +
    "\071\uff8d\072\uff8d\073\uff8d\074\uff8d\075\uff8d\077\uff8d\100" +
    "\uff8d\101\uff8d\102\uff8d\104\uff8d\001\002\000\054\043\uff90" +
    "\044\uff90\045\uff90\046\uff90\047\uff90\053\uff90\054\uff90\064" +
    "\uff90\065\uff90\066\uff90\070\uff90\071\uff90\072\uff90\073\uff90" +
    "\074\uff90\075\uff90\077\uff90\100\uff90\101\uff90\102\uff90\104" +
    "\uff90\001\002\000\004\053\326\001\002\000\046\043\012" +
    "\044\017\045\021\046\005\047\014\054\ufff4\064\022\065" +
    "\020\066\172\071\171\072\174\073\206\074\205\077\041" +
    "\100\035\101\033\102\056\104\203\001\002\000\004\054" +
    "\330\001\002\000\052\043\uff95\044\uff95\045\uff95\046\uff95" +
    "\047\uff95\053\uff95\054\uff95\064\uff95\065\uff95\066\uff95\071" +
    "\uff95\072\uff95\073\uff95\074\uff95\075\uff95\077\uff95\100\uff95" +
    "\101\uff95\102\uff95\104\uff95\001\002\000\006\061\332\104" +
    "\ufffa\001\002\000\004\051\333\001\002\000\004\047\334" +
    "\001\002\000\004\055\335\001\002\000\004\056\336\001" +
    "\002\000\004\062\337\001\002\000\004\052\340\001\002" +
    "\000\004\053\341\001\002\000\046\043\012\044\017\045" +
    "\021\046\005\047\014\054\ufff4\064\022\065\020\066\172" +
    "\071\171\072\174\073\206\074\205\077\041\100\035\101" +
    "\033\102\056\104\203\001\002\000\004\054\343\001\002" +
    "\000\024\002\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7\047" +
    "\ufff7\063\ufff7\064\ufff7\065\ufff7\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\342\000\016\003\006\005\010\006\015\011\007\047" +
    "\014\050\003\001\001\000\016\003\006\005\010\006\015" +
    "\011\007\047\343\050\003\001\001\000\002\001\001\000" +
    "\010\004\153\005\010\006\155\001\001\000\012\005\010" +
    "\006\015\011\007\050\151\001\001\000\002\001\001\000" +
    "\004\051\150\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\136\001" +
    "\001\000\002\001\001\000\006\005\010\006\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\024\001" +
    "\001\000\004\013\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\017\037\020\057\026\042\027\046\030" +
    "\033\031\053\032\051\034\050\001\001\000\002\001\001" +
    "\000\004\012\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\017\037\020\057\026\126\027\046\030\033\031" +
    "\053\032\051\034\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\033\104\035\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\017\037\020" +
    "\057\026\125\027\046\030\033\031\053\032\051\034\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\017\037\020\057\021\063\026" +
    "\062\027\046\030\033\031\053\032\051\034\050\001\001" +
    "\000\002\001\001\000\006\033\104\035\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\017\037\020" +
    "\057\021\123\026\062\027\046\030\033\031\053\032\051" +
    "\034\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\017\037\020\057" +
    "\026\122\027\046\030\033\031\053\032\051\034\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\017\037\020\057\026\114\027\046\030\033\031\053" +
    "\032\051\034\050\001\001\000\006\033\104\035\075\001" +
    "\001\000\022\017\037\020\057\026\116\027\046\030\033" +
    "\031\053\032\051\034\050\001\001\000\006\033\104\035" +
    "\075\001\001\000\022\017\037\020\057\026\120\027\046" +
    "\030\033\031\053\032\051\034\050\001\001\000\006\033" +
    "\104\035\075\001\001\000\002\001\001\000\006\033\104" +
    "\035\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\033\104\035\075\001\001\000\006\033\104\035\075" +
    "\001\001\000\002\001\001\000\004\051\131\001\001\000" +
    "\002\001\001\000\022\017\037\020\057\026\133\027\046" +
    "\030\033\031\053\032\051\034\050\001\001\000\006\033" +
    "\104\035\075\001\001\000\004\051\135\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\051\131\001\001\000\012\005\010\006\015" +
    "\011\144\052\143\001\001\000\002\001\001\000\012\005" +
    "\010\006\015\011\144\052\145\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\153\005\010\006\155\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\010\006\162\007\161\010\160" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\010\006\162\010\165" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\002" +
    "\206\005\010\006\015\011\177\014\211\015\207\016\203" +
    "\017\201\020\057\022\175\023\210\024\174\036\172\040" +
    "\200\044\176\001\001\000\032\005\010\006\015\011\273" +
    "\017\037\020\057\026\274\027\046\030\033\031\053\032" +
    "\051\034\050\037\324\001\001\000\022\017\037\020\057" +
    "\026\303\027\046\030\033\031\053\032\051\034\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\225\001\001" +
    "\000\002\001\001\000\022\017\037\020\057\026\261\027" +
    "\046\030\033\031\053\032\051\034\050\001\001\000\022" +
    "\017\037\020\057\026\245\027\046\030\033\031\053\032" +
    "\051\034\050\001\001\000\002\001\001\000\040\002\243" +
    "\005\010\006\015\011\177\014\211\015\207\016\203\017" +
    "\201\020\057\022\175\023\210\024\174\036\172\040\200" +
    "\044\176\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\211\024\215\001\001\000\002\001\001\000\004" +
    "\025\225\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\017" +
    "\037\020\057\026\232\027\046\030\033\031\053\032\051" +
    "\034\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\033\104\035\075" +
    "\001\001\000\004\025\234\001\001\000\022\017\037\020" +
    "\057\026\235\027\046\030\033\031\053\032\051\034\050" +
    "\001\001\000\006\033\104\035\075\001\001\000\022\017" +
    "\037\020\057\026\237\027\046\030\033\031\053\032\051" +
    "\034\050\001\001\000\006\033\104\035\075\001\001\000" +
    "\004\025\241\001\001\000\022\017\037\020\057\026\242" +
    "\027\046\030\033\031\053\032\051\034\050\001\001\000" +
    "\006\033\104\035\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\033\104\035\075\001\001\000\004\045" +
    "\247\001\001\000\004\046\251\001\001\000\022\017\037" +
    "\020\057\026\254\027\046\030\033\031\053\032\051\034" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\033\104\035\075\001\001\000\040\002" +
    "\256\005\010\006\015\011\177\014\211\015\207\016\203" +
    "\017\201\020\057\022\175\023\210\024\174\036\172\040" +
    "\200\044\176\001\001\000\002\001\001\000\040\002\260" +
    "\005\010\006\015\011\177\014\211\015\207\016\203\017" +
    "\201\020\057\022\175\023\210\024\174\036\172\040\200" +
    "\044\176\001\001\000\002\001\001\000\006\033\104\035" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\002\271\005\010\006\015\011\177\014\211" +
    "\015\207\016\203\017\201\020\057\022\175\023\210\024" +
    "\174\036\172\040\200\044\176\001\001\000\002\001\001" +
    "\000\032\005\010\006\015\011\273\017\037\020\057\026" +
    "\274\027\046\030\033\031\053\032\051\034\050\037\275" +
    "\001\001\000\002\001\001\000\006\033\104\035\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\017\037" +
    "\020\057\026\300\027\046\030\033\031\053\032\051\034" +
    "\050\001\001\000\006\033\104\035\075\001\001\000\006" +
    "\014\211\024\302\001\001\000\002\001\001\000\006\033" +
    "\104\035\075\001\001\000\040\002\305\005\010\006\015" +
    "\011\177\014\211\015\207\016\203\017\201\020\057\022" +
    "\175\023\210\024\174\036\172\040\200\044\176\001\001" +
    "\000\002\001\001\000\006\041\310\042\307\001\001\000" +
    "\006\041\323\042\307\001\001\000\004\043\316\001\001" +
    "\000\022\017\037\020\057\026\312\027\046\030\033\031" +
    "\053\032\051\034\050\001\001\000\006\033\104\035\075" +
    "\001\001\000\040\002\314\005\010\006\015\011\177\014" +
    "\211\015\207\016\203\017\201\020\057\022\175\023\210" +
    "\024\174\036\172\040\200\044\176\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\002\321\005\010\006\015\011\177\014\211\015" +
    "\207\016\203\017\201\020\057\022\175\023\210\024\174" +
    "\036\172\040\200\044\176\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\002\326\005\010\006\015\011\177\014\211\015\207\016" +
    "\203\017\201\020\057\022\175\023\210\024\174\036\172" +
    "\040\200\044\176\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\002\341\005\010" +
    "\006\015\011\177\014\211\015\207\016\203\017\201\020" +
    "\057\022\175\023\210\024\174\036\172\040\200\044\176" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 
    ComplexSymbol s = (ComplexSymbol) getScanner().next_token();
    return s;

    }



    private HashMap<String, Double>tsymbols = new HashMap<>();

    public Double getSymbolValue(String id) {
         return tsymbols.get(id);
    }

    public void addSymbol(String id, Double value) {
        if (tsymbols.get(id) == null) {
            tsymbols.put(id, value);
        } else {
            tsymbols.replace(id, value);
        }
    }

    /**********************************************************************
     * sobrecàrrega de mètodes per gestionar els errors que es localitzin *
     **********************************************************************/

    /**
     * Metodo al que se llama automaticamente ante algun error sintactico 
     * en el que ya no es posible una recuperacion de errores.
    **/ 
    @Override
    public void unrecovered_syntax_error(Symbol cur_token) { 
        String causa = "" + cur_token.value;
        if (cur_token.sym == ParserSym.EOF) {
            causa = "No se ha encontrado metodo main. Sintaxis: \n"+
                "f void inicio(string[]argumentos){ # codigo # }\n";
        }
        System.err.println("No se ha podido recuperar del ultimo error. \nCausa: " + causa);
        done_parsing();
    }  

    /**
     * Metodo al que se llama automaticamente ante algun error sintactico.
    **/ 
    @Override
    public void syntax_error(Symbol cur_token){ 
        
        report_error("Error sintactico: ", cur_token);
    } 

    @Override
    public void report_error(String message, Object info) {
        if (cur_token.sym == ParserSym.EOF) {
            return;
        }
        if (info instanceof ComplexSymbol token) {
            List expected = expected_token_ids();
            String tokens = "";
            for (Object t : expected){
                tokens += ParserSym.terminalNames[(int)t] + ", ";
            }
            if (!tokens.isEmpty()) {
                tokens = "Se esperaba algun lexema de los siguientes tipos: " + tokens.substring(0, tokens.length() - 2) + ".\n";
            }
            System.err.println(message + "Desde la linea " + token.xleft.getLine() + " y columna " + token.xleft.getColumn() + " hasta la linea " + token.xright.getLine() + " y columna " + token.xright.getColumn() + ". \n"
                    + tokens + "Se ha encontrado '" + token.value + "' de tipo " + ParserSym.terminalNames[token.sym] + ".\n");  
        } else {
            System.err.println(message + "No se esperaba este componente\n: " +cur_token.value+".");  
        }
    }

    @Override
    public void report_fatal_error(String message, Object info) throws Exception {
        report_error("Error fatal: " + message, info);
        done_parsing();
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= SCRIPT EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolScript start_val = (SymbolScript)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // SCRIPT ::= SCRIPT_ELEMENTO SCRIPT 
            {
              SymbolScript RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolScriptElemento et1 = (SymbolScriptElemento)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolScript et2 = (SymbolScript)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolScript(et1, et2, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SCRIPT",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SCRIPT ::= MAIN 
            {
              SymbolScript RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolMain et = (SymbolMain)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolScript(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SCRIPT",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SCRIPT_ELEMENTO ::= KW_METHOD TIPO_RETORNO ID LPAREN PARAMS RPAREN LKEY BODY RKEY 
            {
              SymbolScriptElemento RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).xright;
		Object et1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xright;
		SymbolTipoRetorno et2 = (SymbolTipoRetorno)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		Location et3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location et3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		String et3 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location et4xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location et4xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		SymbolParams et4 = (SymbolParams)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location et5xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et5xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolBody et5 = (SymbolBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolScriptElemento(et2, et3, et4, et5, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SCRIPT_ELEMENTO",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SCRIPT_ELEMENTO ::= DECS 
            {
              SymbolScriptElemento RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolDecs et = (SymbolDecs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolScriptElemento(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SCRIPT_ELEMENTO",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SCRIPT_ELEMENTO ::= KW_TUPLE ID LKEY MIEMBROS_TUPLA RKEY ENDINSTR 
            {
              SymbolScriptElemento RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Object et1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String et2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location et3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location et3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolMiembrosTupla et3 = (SymbolMiembrosTupla)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new SymbolScriptElemento(et2, et3, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SCRIPT_ELEMENTO",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // TIPO_RETORNO ::= TIPO 
            {
              SymbolTipoRetorno RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolTipo et = (SymbolTipo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolTipoRetorno(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_RETORNO",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TIPO_RETORNO ::= KW_VOID 
            {
              SymbolTipoRetorno RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolTipoRetorno(etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_RETORNO",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MIEMBROS_TUPLA ::= DECS MIEMBROS_TUPLA 
            {
              SymbolMiembrosTupla RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolDecs et1 = (SymbolDecs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolMiembrosTupla et2 = (SymbolMiembrosTupla)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new SymbolMiembrosTupla(et1,et2, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MIEMBROS_TUPLA",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MIEMBROS_TUPLA ::= 
            {
              SymbolMiembrosTupla RESULT =null;
		  RESULT = new SymbolMiembrosTupla(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MIEMBROS_TUPLA",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MAIN ::= KW_METHOD KW_VOID KW_MAIN LPAREN KW_STRING LBRACKET RBRACKET KW_ARGS RPAREN LKEY BODY RKEY 
            {
              SymbolMain RESULT =null;
		Location posxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).xleft;
		Location posxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).xright;
		Object pos = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		Location nombrexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).xleft;
		Location nombrexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).xright;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location argsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location argsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object args = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolBody et = (SymbolBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolMain(nombre, args, l, r, et, posxleft, posxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MAIN ::= MAIN SCRIPT_ELEMENTO 
            {
              SymbolMain RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolMain et1 = (SymbolMain)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolScriptElemento et2 = (SymbolScriptElemento)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolMain(et1,et2, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BODY ::= METODO_ELEMENTO BODY 
            {
              SymbolBody RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolMetodoElemento et1 = (SymbolMetodoElemento)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolBody et2 = (SymbolBody)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBody(et1, et2, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BODY",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BODY ::= 
            {
              SymbolBody RESULT =null;
		 RESULT = new SymbolBody(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BODY",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TIPO ::= TIPO_PRIMITIVO 
            {
              SymbolTipo RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolTipoPrimitivo t = (SymbolTipoPrimitivo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolTipo(t, txleft, txright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TIPO ::= TIPO_PRIMITIVO DIMENSIONES 
            {
              SymbolTipo RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolTipoPrimitivo t = (SymbolTipoPrimitivo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolDimensiones d = (SymbolDimensiones)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolTipo(t, d, txleft, txright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TIPO ::= KW_TUPLE ID 
            {
              SymbolTipo RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolTipo(i, txleft, txright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TIPO ::= KW_TUPLE ID DIMENSIONES 
            {
              SymbolTipo RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolDimensiones d = (SymbolDimensiones)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolTipo(i, d, txleft, txright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TIPO_PRIMITIVO ::= KW_BOOL 
            {
              SymbolTipoPrimitivo RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolTipoPrimitivo(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_PRIMITIVO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TIPO_PRIMITIVO ::= KW_INT 
            {
              SymbolTipoPrimitivo RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolTipoPrimitivo(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_PRIMITIVO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TIPO_PRIMITIVO ::= KW_DOUBLE 
            {
              SymbolTipoPrimitivo RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolTipoPrimitivo(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_PRIMITIVO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TIPO_PRIMITIVO ::= KW_CHAR 
            {
              SymbolTipoPrimitivo RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolTipoPrimitivo(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_PRIMITIVO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TIPO_PRIMITIVO ::= KW_STRING 
            {
              SymbolTipoPrimitivo RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolTipoPrimitivo(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_PRIMITIVO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PARAMS ::= PARAMSLISTA 
            {
              SymbolParams RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolParamsLista et = (SymbolParamsLista)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolParams(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PARAMS ::= 
            {
              SymbolParams RESULT =null;
		 RESULT = new SymbolParams(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PARAMSLISTA ::= TIPO ID COMMA PARAMSLISTA 
            {
              SymbolParamsLista RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		SymbolTipo et1 = (SymbolTipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location sigxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sigxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolParamsLista sig = (SymbolParamsLista)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolParamsLista(et1, id, sig, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMSLISTA",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PARAMSLISTA ::= TIPO ID 
            {
              SymbolParamsLista RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolTipo et = (SymbolTipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolParamsLista(et, id, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMSLISTA",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECS ::= KW_CONST TIPO DEC_ASIG_LISTA ENDINSTR 
            {
              SymbolDecs RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object et1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolTipo et2 = (SymbolTipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location et3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolDecAsigLista et3 = (SymbolDecAsigLista)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolDecs(true,et2,et3, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECS ::= TIPO DEC_ASIG_LISTA ENDINSTR 
            {
              SymbolDecs RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolTipo et1 = (SymbolTipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolDecAsigLista et2 = (SymbolDecAsigLista)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolDecs(false, et1,et2, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DIMENSIONES ::= LBRACKET OPERAND RBRACKET DIMENSIONES 
            {
              SymbolDimensiones RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolOperand et1 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolDimensiones et2 = (SymbolDimensiones)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolDimensiones(et1, et2, l, r, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DIMENSIONES",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DIMENSIONES ::= LBRACKET OPERAND RBRACKET 
            {
              SymbolDimensiones RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolOperand et1 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolDimensiones(et1, l, r, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DIMENSIONES",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DEC_ASIG_LISTA ::= ID ASIG_BASICO COMMA DEC_ASIG_LISTA 
            {
              SymbolDecAsigLista RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String et1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolAsigBasico et2 = (SymbolAsigBasico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location et3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location et3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolDecAsigLista et3 = (SymbolDecAsigLista)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolDecAsigLista(et1,et2,et3, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEC_ASIG_LISTA",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DEC_ASIG_LISTA ::= ID ASIG_BASICO 
            {
              SymbolDecAsigLista RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String et1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolAsigBasico et2 = (SymbolAsigBasico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolDecAsigLista(et1,et2, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEC_ASIG_LISTA",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ASIG_BASICO ::= AS_ASSIGN OPERAND 
            {
              SymbolAsigBasico RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolOperand et = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsigBasico(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG_BASICO",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ASIG_BASICO ::= 
            {
              SymbolAsigBasico RESULT =null;
		 RESULT = new SymbolAsigBasico(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG_BASICO",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // METODO_ELEMENTO ::= INSTR 
            {
              SymbolMetodoElemento RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolInstr et = (SymbolInstr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolMetodoElemento(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METODO_ELEMENTO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // METODO_ELEMENTO ::= LOOP 
            {
              SymbolMetodoElemento RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolLoop et = (SymbolLoop)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolMetodoElemento(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METODO_ELEMENTO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // METODO_ELEMENTO ::= IF 
            {
              SymbolMetodoElemento RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolIf et = (SymbolIf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolMetodoElemento(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METODO_ELEMENTO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // METODO_ELEMENTO ::= SWITCH 
            {
              SymbolMetodoElemento RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolSwitch et = (SymbolSwitch)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolMetodoElemento(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METODO_ELEMENTO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INSTR ::= FCALL ENDINSTR 
            {
              SymbolInstr RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolFCall et = (SymbolFCall)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolInstr(et,etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTR",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INSTR ::= RETURN 
            {
              SymbolInstr RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolReturn et = (SymbolReturn)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolInstr(et,etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTR",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INSTR ::= DECS 
            {
              SymbolInstr RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolDecs et = (SymbolDecs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolInstr(et,etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTR",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INSTR ::= ASIGS 
            {
              SymbolInstr RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolAsigs et = (SymbolAsigs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolInstr(et,etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTR",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // INSTR ::= SWAP 
            {
              SymbolInstr RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolSwap et = (SymbolSwap)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolInstr(et,etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTR",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FCALL ::= METODO_NOMBRE LPAREN OPERANDS_LISTA RPAREN 
            {
              SymbolFCall RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		SymbolMetodoNombre et1 = (SymbolMetodoNombre)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolOperandsLista et2 = (SymbolOperandsLista)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolFCall(et1, et2, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FCALL",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FCALL ::= METODO_NOMBRE LPAREN RPAREN 
            {
              SymbolFCall RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolMetodoNombre et1 = (SymbolMetodoNombre)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new SymbolFCall(et1, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FCALL",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // METODO_NOMBRE ::= ID 
            {
              SymbolMetodoNombre RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String et = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolMetodoNombre(null, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METODO_NOMBRE",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // METODO_NOMBRE ::= ENTER 
            {
              SymbolMetodoNombre RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolMetodoNombre(ParserSym.ENTER, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METODO_NOMBRE",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // METODO_NOMBRE ::= SHOW 
            {
              SymbolMetodoNombre RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolMetodoNombre(ParserSym.SHOW, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METODO_NOMBRE",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // METODO_NOMBRE ::= INTO 
            {
              SymbolMetodoNombre RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolMetodoNombre(ParserSym.INTO, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METODO_NOMBRE",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // METODO_NOMBRE ::= FROM 
            {
              SymbolMetodoNombre RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolMetodoNombre(ParserSym.FROM, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METODO_NOMBRE",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPERANDS_LISTA ::= OPERAND COMMA OPERANDS_LISTA 
            {
              SymbolOperandsLista RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolOperand et = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location olxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location olxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolOperandsLista ol = (SymbolOperandsLista)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOperandsLista(et, ol, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERANDS_LISTA",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPERANDS_LISTA ::= OPERAND 
            {
              SymbolOperandsLista RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolOperand et = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOperandsLista(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERANDS_LISTA",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // RETURN ::= KW_RETURN ENDINSTR 
            {
              SymbolReturn RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // RETURN ::= KW_RETURN OPERAND ENDINSTR 
            {
              SymbolReturn RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolOperand et = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolReturn(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SWAP ::= ID OP_SWAP ID ENDINSTR 
            {
              SymbolSwap RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String et1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String et2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolSwap(et1, et2, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWAP",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ASIGS ::= ASIG COMMA ASIGS 
            {
              SymbolAsigs RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolAsig et1 = (SymbolAsig)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolAsigs et2 = (SymbolAsigs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsigs(et1, et2, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGS",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ASIGS ::= ASIG ENDINSTR 
            {
              SymbolAsigs RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolAsig et = (SymbolAsig)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolAsigs(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGS",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ASIG ::= ID ASIG_OP OPERAND 
            {
              SymbolAsig RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String et = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location aopxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location aopxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolAsigOp aop = (SymbolAsigOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolOperand val = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsig(et, aop, val, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ASIG ::= ID AUX_MEMBER LBRACKET OPERAND RBRACKET ASIG_OP OPERAND 
            {
              SymbolAsig RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		String et1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		SymbolOperand et2 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location aopxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location aopxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolAsigOp aop = (SymbolAsigOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolOperand val = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsig(et1, et2, aop, val, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ASIG ::= ID OP_MEMBER ID ASIG_OP OPERAND 
            {
              SymbolAsig RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String et1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String et2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location aopxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location aopxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolAsigOp aop = (SymbolAsigOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolOperand val = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsig(et1, et2, aop, val, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ASIG_OP ::= AS_ASSIGN 
            {
              SymbolAsigOp RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsigOp(ParserSym.AS_ASSIGN, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG_OP",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ASIG_OP ::= AS_ADDA 
            {
              SymbolAsigOp RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsigOp(ParserSym.AS_ADDA, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG_OP",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ASIG_OP ::= AS_SUBA 
            {
              SymbolAsigOp RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsigOp(ParserSym.AS_SUBA, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG_OP",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ASIG_OP ::= AS_MULA 
            {
              SymbolAsigOp RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsigOp(ParserSym.AS_MULA, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG_OP",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ASIG_OP ::= AS_DIVA 
            {
              SymbolAsigOp RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsigOp(ParserSym.AS_DIVA, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG_OP",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ASIG_OP ::= AS_POTA 
            {
              SymbolAsigOp RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsigOp(ParserSym.AS_POTA, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG_OP",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ASIG_OP ::= AS_MODA 
            {
              SymbolAsigOp RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsigOp(ParserSym.AS_MODA, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG_OP",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ASIG_OP ::= AS_ANDA 
            {
              SymbolAsigOp RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsigOp(ParserSym.AS_ANDA, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG_OP",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ASIG_OP ::= AS_ORA 
            {
              SymbolAsigOp RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsigOp(ParserSym.AS_ORA, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG_OP",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPERAND ::= ATOMIC_EXPRESSION 
            {
              SymbolOperand RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolAtomicExpression et = (SymbolAtomicExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOperand(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPERAND ::= FCALL 
            {
              SymbolOperand RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolFCall et = (SymbolFCall)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOperand(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OPERAND ::= LPAREN OPERAND RPAREN 
            {
              SymbolOperand RESULT =null;
		Location posxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location posxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object pos = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolOperand et = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolOperand(et, posxleft, posxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OPERAND ::= UNARY_EXPRESSION 
            {
              SymbolOperand RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolUnaryExpression et = (SymbolUnaryExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOperand(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OPERAND ::= BINARY_EXPRESSION 
            {
              SymbolOperand RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolBinaryExpression et = (SymbolBinaryExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOperand(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OPERAND ::= CONDITIONAL_EXPRESSION 
            {
              SymbolOperand RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolConditionalExpression et = (SymbolConditionalExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOperand(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OPERAND ::= OPERAND AUX_MEMBER LBRACKET OPERAND RBRACKET 
            {
              SymbolOperand RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		SymbolOperand et1 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolOperand et2 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOperand(et1, l, et2, r, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPERAND ::= OPERAND OP_MEMBER ID 
            {
              SymbolOperand RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolOperand et1 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String et2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOperand(et1, et2, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // UNARY_EXPRESSION ::= L_UNARY_OPERATOR OPERAND 
            {
              SymbolUnaryExpression RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolLUnaryOperator et1 = (SymbolLUnaryOperator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolOperand et2 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolUnaryExpression(et1, et2, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNARY_EXPRESSION",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // UNARY_EXPRESSION ::= OPERAND R_UNARY_OPERATOR 
            {
              SymbolUnaryExpression RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolOperand et1 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolRUnaryOperator et2 = (SymbolRUnaryOperator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolUnaryExpression(et1, et2, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNARY_EXPRESSION",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // BINARY_EXPRESSION ::= OPERAND BINARY_OPERATOR OPERAND 
            {
              SymbolBinaryExpression RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolOperand et1 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolBinaryOperator et2 = (SymbolBinaryOperator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location et3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location et3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolOperand et3 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryExpression(et1, et2, et3, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_EXPRESSION",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CONDITIONAL_EXPRESSION ::= OPERAND OP_COND OPERAND ARROW OPERAND 
            {
              SymbolConditionalExpression RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		SymbolOperand et1 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolOperand et2 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location et3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location et3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolOperand et3 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolConditionalExpression(et1, et2, et3, et1xleft, et1xright);; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDITIONAL_EXPRESSION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ATOMIC_EXPRESSION ::= ID 
            {
              SymbolAtomicExpression RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String et = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAtomicExpression(true, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATOMIC_EXPRESSION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ATOMIC_EXPRESSION ::= STRING 
            {
              SymbolAtomicExpression RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String et = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAtomicExpression(false, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATOMIC_EXPRESSION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ATOMIC_EXPRESSION ::= PROP 
            {
              SymbolAtomicExpression RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Boolean et = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAtomicExpression(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATOMIC_EXPRESSION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ATOMIC_EXPRESSION ::= ENT 
            {
              SymbolAtomicExpression RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer et = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAtomicExpression(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATOMIC_EXPRESSION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ATOMIC_EXPRESSION ::= REAL 
            {
              SymbolAtomicExpression RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Double et = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAtomicExpression(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATOMIC_EXPRESSION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ATOMIC_EXPRESSION ::= CAR 
            {
              SymbolAtomicExpression RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Character et = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAtomicExpression(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATOMIC_EXPRESSION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // BINARY_OPERATOR ::= OP_ADD 
            {
              SymbolBinaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_ADD, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // BINARY_OPERATOR ::= OP_SUB 
            {
              SymbolBinaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_SUB, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // BINARY_OPERATOR ::= OP_MUL 
            {
              SymbolBinaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_MUL, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // BINARY_OPERATOR ::= OP_DIV 
            {
              SymbolBinaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_DIV, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // BINARY_OPERATOR ::= OP_MOD 
            {
              SymbolBinaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_MOD, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // BINARY_OPERATOR ::= OP_POT 
            {
              SymbolBinaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_POT, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // BINARY_OPERATOR ::= OP_EQ 
            {
              SymbolBinaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_EQ, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // BINARY_OPERATOR ::= OP_BEQ 
            {
              SymbolBinaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_BEQ, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // BINARY_OPERATOR ::= OP_BT 
            {
              SymbolBinaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_BT, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // BINARY_OPERATOR ::= OP_LEQ 
            {
              SymbolBinaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_LEQ, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // BINARY_OPERATOR ::= OP_LT 
            {
              SymbolBinaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_LT, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // BINARY_OPERATOR ::= OP_NEQ 
            {
              SymbolBinaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_NEQ, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // BINARY_OPERATOR ::= OP_AND 
            {
              SymbolBinaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_AND, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // BINARY_OPERATOR ::= OP_OR 
            {
              SymbolBinaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_OR, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // L_UNARY_OPERATOR ::= OP_NOT 
            {
              SymbolLUnaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolLUnaryOperator(ParserSym.OP_NOT, et , etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("L_UNARY_OPERATOR",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // L_UNARY_OPERATOR ::= OP_INC 
            {
              SymbolLUnaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolLUnaryOperator(ParserSym.OP_INC, et , etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("L_UNARY_OPERATOR",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // L_UNARY_OPERATOR ::= OP_DEC 
            {
              SymbolLUnaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolLUnaryOperator(ParserSym.OP_DEC, et , etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("L_UNARY_OPERATOR",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // R_UNARY_OPERATOR ::= OP_PCT 
            {
              SymbolRUnaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolRUnaryOperator(ParserSym.OP_PCT, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R_UNARY_OPERATOR",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // R_UNARY_OPERATOR ::= OP_INC 
            {
              SymbolRUnaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolRUnaryOperator(ParserSym.OP_INC, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R_UNARY_OPERATOR",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // R_UNARY_OPERATOR ::= OP_DEC 
            {
              SymbolRUnaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolRUnaryOperator(ParserSym.OP_DEC, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R_UNARY_OPERATOR",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // LOOP ::= KW_LOOP LOOP_COND LKEY BODY RKEY 
            {
              SymbolLoop RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object et1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		SymbolLoopCond et2 = (SymbolLoopCond)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location et3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolBody et3 = (SymbolBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolLoop(et2, et3, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOP",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // LOOP ::= KW_DO LKEY BODY RKEY LOOP_COND ENDINSTR 
            {
              SymbolLoop RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Object et1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		SymbolBody et2 = (SymbolBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location et3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolLoopCond et3 = (SymbolLoopCond)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolLoop(et2, et3, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOP",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // LOOP_COND ::= OPERAND 
            {
              SymbolLoopCond RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolOperand et = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolLoopCond(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOP_COND",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // LOOP_COND ::= DECS ENDINSTR OPERAND ENDINSTR ASIGS 
            {
              SymbolLoopCond RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		SymbolDecs et1 = (SymbolDecs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolOperand et2 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location et3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location et3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolAsigs et3 = (SymbolAsigs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolLoopCond(et1, et2, et3, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOP_COND",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // IF ::= KW_IF OPERAND LKEY BODY RKEY ELIFS ELSE 
            {
              SymbolIf RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		SymbolOperand et1 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		SymbolBody et2 = (SymbolBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location et3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolElifs et3 = (SymbolElifs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location et4xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location et4xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolElse et4 = (SymbolElse)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolIf(et1, et2, et3, et4, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ELIFS ::= ELIF ELIFS 
            {
              SymbolElifs RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolElif et1 = (SymbolElif)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolElifs et2 = (SymbolElifs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolElifs(et1, et2, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELIFS",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ELIFS ::= 
            {
              SymbolElifs RESULT =null;
		 RESULT = new SymbolElifs(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELIFS",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ELIF ::= KW_ELIF OPERAND LKEY BODY RKEY 
            {
              SymbolElif RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		SymbolOperand et1 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolBody et2 = (SymbolBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolElif(et1, et2, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELIF",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ELSE ::= KW_ELSE LKEY BODY RKEY 
            {
              SymbolElse RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolBody et = (SymbolBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolElse(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ELSE ::= 
            {
              SymbolElse RESULT =null;
		 RESULT = new SymbolElse(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // SWITCH ::= KW_SWITCH OPERAND RKEY CASO PRED LKEY 
            {
              SymbolSwitch RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		SymbolOperand et1 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolCaso et2 = (SymbolCaso)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location et3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolPred et3 = (SymbolPred)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolSwitch(et1, et2, et3, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCH",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CASO ::= CASO KW_CASE OPERAND ARROW BODY 
            {
              SymbolCaso RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		SymbolCaso et1 = (SymbolCaso)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolOperand et2 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location et3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location et3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolBody et3 = (SymbolBody)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolCaso(et1, et2, et3, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASO",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CASO ::= 
            {
              SymbolCaso RESULT =null;
		 RESULT = new SymbolCaso(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASO",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // PRED ::= KW_CASE KW_DEFAULT ARROW BODY 
            {
              SymbolPred RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolBody et = (SymbolBody)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolPred(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRED",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
