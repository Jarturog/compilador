
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadorSintactico;

import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.*;
import analizadorSintactico.Symbols.*;
import java.io.PrintStream;
import java.util.HashMap;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\031\000\002\002\004\000\002\002\004\000\002\003" +
    "\005\000\002\003\002\000\002\005\004\000\002\005\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\006\004\000\002\007\005\000\002" +
    "\007\005\000\002\007\002\000\002\010\004\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\002" +
    "\000\002\012\005\000\002\012\005\000\002\012\003\000" +
    "\002\012\004\000\002\012\003\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\054\000\022\004\014\005\007\013\020\015\017\021" +
    "\012\022\013\023\004\024\011\001\002\000\010\002\ufff8" +
    "\017\ufff8\020\ufff8\001\002\000\010\002\ufffe\017\052\020" +
    "\051\001\002\000\004\002\047\001\002\000\024\002\uffec" +
    "\006\uffec\007\uffec\010\uffec\011\uffec\012\uffec\014\uffec\017" +
    "\uffec\020\uffec\001\002\000\024\002\ufff4\006\042\007\040" +
    "\010\ufff4\011\ufff4\012\ufff4\014\ufff4\017\ufff4\020\ufff4\001" +
    "\002\000\024\002\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9" +
    "\012\uffe9\014\uffe9\017\uffe9\020\uffe9\001\002\000\010\002" +
    "\ufffa\017\ufffa\020\ufffa\001\002\000\010\002\ufff9\017\ufff9" +
    "\020\ufff9\001\002\000\026\002\uffea\006\uffea\007\uffea\010" +
    "\uffea\011\uffea\012\uffea\014\uffea\016\036\017\uffea\020\uffea" +
    "\001\002\000\024\002\uffef\006\uffef\007\uffef\010\026\011" +
    "\027\012\025\014\uffef\017\uffef\020\uffef\001\002\000\010" +
    "\002\ufffb\017\ufffb\020\ufffb\001\002\000\014\004\014\005" +
    "\007\013\020\015\017\024\011\001\002\000\014\004\014" +
    "\005\007\013\020\015\017\024\011\001\002\000\004\014" +
    "\022\001\002\000\024\002\uffee\006\uffee\007\uffee\010\uffee" +
    "\011\uffee\012\uffee\014\uffee\017\uffee\020\uffee\001\002\000" +
    "\024\002\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb" +
    "\014\uffeb\017\uffeb\020\uffeb\001\002\000\024\002\ufff3\006" +
    "\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\014\ufff3\017\ufff3" +
    "\020\ufff3\001\002\000\014\004\014\005\007\013\020\015" +
    "\017\024\011\001\002\000\014\004\014\005\007\013\020" +
    "\015\017\024\011\001\002\000\014\004\014\005\007\013" +
    "\020\015\017\024\011\001\002\000\024\002\uffef\006\uffef" +
    "\007\uffef\010\026\011\027\012\025\014\uffef\017\uffef\020" +
    "\uffef\001\002\000\024\002\ufff1\006\ufff1\007\ufff1\010\ufff1" +
    "\011\ufff1\012\ufff1\014\ufff1\017\ufff1\020\ufff1\001\002\000" +
    "\024\002\uffef\006\uffef\007\uffef\010\026\011\027\012\025" +
    "\014\uffef\017\uffef\020\uffef\001\002\000\024\002\ufff2\006" +
    "\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\014\ufff2\017\ufff2" +
    "\020\ufff2\001\002\000\024\002\uffef\006\uffef\007\uffef\010" +
    "\026\011\027\012\025\014\uffef\017\uffef\020\uffef\001\002" +
    "\000\024\002\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012" +
    "\ufff0\014\ufff0\017\ufff0\020\ufff0\001\002\000\014\004\014" +
    "\005\007\013\020\015\017\024\011\001\002\000\024\002" +
    "\uffed\006\uffed\007\uffed\010\uffed\011\uffed\012\uffed\014\uffed" +
    "\017\uffed\020\uffed\001\002\000\014\004\014\005\007\013" +
    "\020\015\017\024\011\001\002\000\024\002\ufff7\006\ufff7" +
    "\007\ufff7\010\ufff7\011\ufff7\012\ufff7\014\ufff7\017\ufff7\020" +
    "\ufff7\001\002\000\014\004\014\005\007\013\020\015\017" +
    "\024\011\001\002\000\024\002\ufff4\006\042\007\040\010" +
    "\ufff4\011\ufff4\012\ufff4\014\ufff4\017\ufff4\020\ufff4\001\002" +
    "\000\024\002\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012" +
    "\ufff6\014\ufff6\017\ufff6\020\ufff6\001\002\000\024\002\ufff4" +
    "\006\042\007\040\010\ufff4\011\ufff4\012\ufff4\014\ufff4\017" +
    "\ufff4\020\ufff4\001\002\000\024\002\ufff5\006\ufff5\007\ufff5" +
    "\010\ufff5\011\ufff5\012\ufff5\014\ufff5\017\ufff5\020\ufff5\001" +
    "\002\000\004\002\001\001\002\000\022\004\014\005\007" +
    "\013\020\015\017\021\012\022\013\023\004\024\011\001" +
    "\002\000\004\017\054\001\002\000\022\004\ufffc\005\ufffc" +
    "\013\ufffc\015\ufffc\021\ufffc\022\ufffc\023\ufffc\024\ufffc\001" +
    "\002\000\004\002\000\001\002\000\022\004\ufffd\005\ufffd" +
    "\013\ufffd\015\ufffd\021\ufffd\022\ufffd\023\ufffd\024\ufffd\001" +
    "\002\000\010\002\ufffe\017\052\020\051\001\002\000\004" +
    "\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\054\000\014\002\005\004\004\006\015\010\007\012" +
    "\014\001\001\000\002\001\001\000\006\003\052\005\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\023\001\001\000" +
    "\002\001\001\000\010\006\022\010\007\012\014\001\001" +
    "\000\010\006\020\010\007\012\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\033\001\001\000\004\012\031\001\001\000" +
    "\004\012\027\001\001\000\004\011\030\001\001\000\002" +
    "\001\001\000\004\011\032\001\001\000\002\001\001\000" +
    "\004\011\034\001\001\000\002\001\001\000\010\006\036" +
    "\010\007\012\014\001\001\000\002\001\001\000\006\010" +
    "\044\012\014\001\001\000\002\001\001\000\006\010\042" +
    "\012\014\001\001\000\004\007\043\001\001\000\002\001" +
    "\001\000\004\007\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\004\054\006\015\010\007\012\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\055\005\047\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



/***
    private Scanner scanner;
    public Parser(Scanner scanner) { 
        this.scanner = scanner;
    }
***/
    private HashMap<String, Double>tsymbols = new HashMap<>();

    public Double getSymbolValue(String id) {
         return tsymbols.get(id);
    }

    public void addSymbol(String id, Double value) {
        if (tsymbols.get(id) == null) {
            tsymbols.put(id, value);
        } else {
            tsymbols.replace(id, value);
        }
    }

    public void printVars(PrintStream out) {
        if (tsymbols.size() == 0) {
            out.println("No hi ha variables declarades");
        } else {
            String fmt = "%-8s: %f";
            tsymbols.forEach((k,v) -> out.println(String.format(fmt,k,v)));
        }
    }


    public void printUsage(PrintStream out) {
        out.println("Calculadora 21780");
        out.println("=================\n");
        out.println("Utilització:\n------------");
        out.println("\tEn mode interactiu, les instruccions han d'acabar en \";\"");
        out.println("\tEn mode fitxer, el \";\" és opcional\n");

        out.println("Comandes:\n---------");
        out.println("\texit: acaba el programa");
        out.println("\tvars: mostra valor de totes les variables utilitzades");
        out.println("\thelp: mostra aquesta ajuda");
        out.println("\nOperacions aritmètiques:\n------------------------");
        
        out.println("\tEs poden fer sumes, restes, productes, divisions, mòduls i inverses");
        out.println("\t\t+ - * \\ % inv");
        out.println("\tEs poden fer assignacions a variables (es declaren automàticament)");
        out.println("\t\tvariable = valor");
        out.println("\tEl format dels nombres pot ser: real o enter.");
        out.println("\tEls enters es poden introduir en format decimal, binari, octal o hexadecimal");
        out.println("\t\tLes següents expressions representen el mateix valor");
        out.println("\t\t\t     binari: 0b1101");
        out.println("\t\t\t      octal: 0o15");
        out.println("\t\t\thexadecimal: 0xD");
        out.println("\t\t\t    decimal: 13");
        out.println("\t\t\t       real: 13.0");
        out.println("\t\t\t       real: .130E2");

        out.println();
        out.println("\tans: recupera el darrer valor calculat\n");
    }

    /**
     * Variable utilitzada per emmagatzemar el darrer valor calculat. 
     * Val 0 inicialment
     **/
    private double ans = 0;



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Line EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Line ::= Cmd Linep 
            {
              Object RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Line",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Linep ::= EndLine Cmd Linep 
            {
              Object RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Linep",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Linep ::= 
            {
              Object RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Linep",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // EndLine ::= EndCmdInteractive EndCmd 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EndLine",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // EndLine ::= EndCmd 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EndLine",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Cmd ::= E 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolE v = (SymbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                            System.out.print("Resultat: " + v.value+"\n>>> ");
                            ans = (Double)v.value; // Recordar el valor
                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Cmd",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Cmd ::= HELPCMD 
            {
              Object RESULT =null;
		 printUsage(System.out); System.out.print("\n>>> "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Cmd",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Cmd ::= QUITCMD 
            {
              Object RESULT =null;
		 done_parsing();                                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Cmd",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Cmd ::= DUMPVARS 
            {
              Object RESULT =null;
		 printVars(System.out); System.out.print("\n>>> ");  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Cmd",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // E ::= T Ep 
            {
              SymbolE RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolT v1 = (SymbolT)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolEp v2 = (SymbolEp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                            RESULT = new SymbolE((Double)v1.value, v2);
                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Ep ::= ADD T Ep 
            {
              SymbolEp RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolT v1 = (SymbolT)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolEp v2 = (SymbolEp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            RESULT = new SymbolEp(ParserSym.ADD, (Double)v1.value, v2);
                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Ep",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Ep ::= SUB T Ep 
            {
              SymbolEp RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolT v1 = (SymbolT)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolEp v2 = (SymbolEp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                            RESULT = new SymbolEp(ParserSym.SUB, (Double)v1.value, v2);
                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Ep",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Ep ::= 
            {
              SymbolEp RESULT =null;
		 RESULT = new SymbolEp();                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Ep",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // T ::= F Tp 
            {
              SymbolT RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolF v1 = (SymbolF)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolTp v2 = (SymbolTp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                            RESULT = new SymbolT((Double)v1.value, v2); 
                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Tp ::= MUL F Tp 
            {
              SymbolTp RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolF v1 = (SymbolF)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolTp v2 = (SymbolTp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                            RESULT = new SymbolTp(ParserSym.MUL, (Double)v1.value, v2); 
                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tp",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Tp ::= DIV F Tp 
            {
              SymbolTp RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolF v1 = (SymbolF)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolTp v2 = (SymbolTp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                            RESULT = new SymbolTp(ParserSym.DIV, (Double)v1.value, v2);   
                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tp",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Tp ::= MOD F Tp 
            {
              SymbolTp RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolF v1 = (SymbolF)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolTp v2 = (SymbolTp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                            RESULT = new SymbolTp(ParserSym.MOD, (Double)v1.value, v2);  
                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tp",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Tp ::= 
            {
              SymbolTp RESULT =null;
		  RESULT = new SymbolTp();                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tp",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // F ::= LParen E RParen 
            {
              SymbolF RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolE v = (SymbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolF((Double)v.value);              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // F ::= ID ASSIGN E 
            {
              SymbolF RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolE v2 = (SymbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                            addSymbol(v1, (Double)v2.value); 
                            RESULT =  new SymbolF((Double)v2.value);            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // F ::= valor 
            {
              SymbolF RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		double v = (double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolF(v);                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // F ::= INV E 
            {
              SymbolF RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolE v = (SymbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolF(1.0 / (Double)v.value);        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // F ::= ID 
            {
              SymbolF RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Double value = getSymbolValue(v);
                            RESULT = new SymbolF(value);
                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // F ::= ANS 
            {
              SymbolF RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolF(ans);                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
