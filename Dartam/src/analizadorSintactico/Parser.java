
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadorSintactico;

import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.*;
import analizadorSintactico.symbols.*;
import java.io.PrintStream;
import java.util.HashMap;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\155\000\002\050\004\000\002\002\004\000\002\050" +
    "\003\000\002\051\003\000\002\051\004\000\002\052\003" +
    "\000\002\052\004\000\002\003\016\000\002\004\013\000" +
    "\002\002\004\000\002\002\002\000\002\005\003\000\002" +
    "\005\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\007\005" +
    "\000\002\007\003\000\002\007\002\000\002\010\004\000" +
    "\002\011\005\000\002\011\004\000\002\012\006\000\002" +
    "\012\004\000\002\013\004\000\002\013\002\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\015\004\000\002\015\004\000\002\016\006\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\020\003\000\002\020" +
    "\002\000\002\021\005\000\002\021\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\023\003\000\002\023\004\000\002\024\005\000\002" +
    "\025\003\000\002\026\007\000\002\026\005\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\005\000\002\031\004\000\002\032\005\000\002\033\007" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\037\007\000\002\037\010" +
    "\000\002\040\003\000\002\040\007\000\002\041\011\000" +
    "\002\042\004\000\002\042\002\000\002\043\007\000\002" +
    "\044\006\000\002\044\002\000\002\045\010\000\002\046" +
    "\006\000\002\046\002\000\002\047\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\274\000\022\041\010\042\014\043\022\044\005\045" +
    "\013\057\012\061\004\062\017\001\002\000\016\041\010" +
    "\042\014\043\022\044\005\045\013\046\260\001\002\000" +
    "\004\100\ufff1\001\002\000\022\002\ufffc\041\ufffc\042\ufffc" +
    "\043\ufffc\044\ufffc\045\ufffc\061\ufffc\062\ufffc\001\002\000" +
    "\004\055\257\001\002\000\004\100\ufff4\001\002\000\004" +
    "\002\256\001\002\000\004\047\122\001\002\000\004\100" +
    "\ufff0\001\002\000\004\100\ufff3\001\002\000\004\100\026" +
    "\001\002\000\022\002\uffff\041\010\042\014\043\022\044" +
    "\005\045\013\061\004\062\017\001\002\000\014\041\010" +
    "\042\014\043\022\044\005\045\013\001\002\000\022\041" +
    "\010\042\014\043\022\044\005\045\013\057\012\061\004" +
    "\062\017\001\002\000\024\002\ufffe\041\ufffe\042\ufffe\043" +
    "\ufffe\044\ufffe\045\ufffe\057\ufffe\061\ufffe\062\ufffe\001\002" +
    "\000\004\100\ufff2\001\002\000\004\002\001\001\002\000" +
    "\004\100\026\001\002\000\004\055\uffeb\001\002\000\010" +
    "\013\027\055\uffe6\056\uffe6\001\002\000\040\004\050\005" +
    "\053\033\036\035\037\047\040\072\060\073\051\074\057" +
    "\075\054\100\042\101\046\102\055\103\033\104\061\105" +
    "\035\001\002\000\006\055\uffe8\056\031\001\002\000\004" +
    "\100\026\001\002\000\004\055\uffe9\001\002\000\056\006" +
    "\uffb7\007\uffb7\010\uffb7\011\uffb7\012\uffb7\023\uffb7\024\uffb7" +
    "\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\034" +
    "\uffb7\036\uffb7\037\uffb7\040\uffb7\050\uffb7\051\uffb7\052\uffb7" +
    "\055\uffb7\056\uffb7\001\002\000\056\006\uffc1\007\uffc1\010" +
    "\uffc1\011\uffc1\012\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1" +
    "\027\uffc1\030\uffc1\031\uffc1\032\uffc1\034\uffc1\036\uffc1\037" +
    "\uffc1\040\uffc1\050\uffc1\051\uffc1\052\uffc1\055\uffc1\056\uffc1" +
    "\001\002\000\056\006\uffb5\007\uffb5\010\uffb5\011\uffb5\012" +
    "\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5" +
    "\031\uffb5\032\uffb5\034\uffb5\036\uffb5\037\uffb5\040\uffb5\050" +
    "\uffb5\051\uffb5\052\uffb5\055\uffb5\056\uffb5\001\002\000\040" +
    "\004\uffa6\005\uffa6\033\uffa6\035\uffa6\047\uffa6\072\uffa6\073" +
    "\uffa6\074\uffa6\075\uffa6\100\uffa6\101\uffa6\102\uffa6\103\uffa6" +
    "\104\uffa6\105\uffa6\001\002\000\040\004\uffa3\005\uffa3\033" +
    "\uffa3\035\uffa3\047\uffa3\072\uffa3\073\uffa3\074\uffa3\075\uffa3" +
    "\100\uffa3\101\uffa3\102\uffa3\103\uffa3\104\uffa3\105\uffa3\001" +
    "\002\000\040\004\050\005\053\033\036\035\037\047\040" +
    "\072\060\073\051\074\057\075\054\100\042\101\046\102" +
    "\055\103\033\104\061\105\035\001\002\000\056\006\uffc3" +
    "\007\uffc3\010\uffc3\011\uffc3\012\uffc3\023\uffc3\024\uffc3\025" +
    "\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\034\uffc3" +
    "\036\uffc3\037\uffc3\040\uffc3\050\uffc3\051\uffc3\052\uffc3\055" +
    "\uffc3\056\uffc3\001\002\000\060\006\uffba\007\uffba\010\uffba" +
    "\011\uffba\012\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027" +
    "\uffba\030\uffba\031\uffba\032\uffba\034\uffba\036\uffba\037\uffba" +
    "\040\uffba\047\uffde\050\uffba\051\uffba\052\uffba\055\uffba\056" +
    "\uffba\001\002\000\040\004\050\005\053\033\036\035\037" +
    "\047\040\072\060\073\051\074\057\075\054\100\042\101" +
    "\046\102\055\103\033\104\061\105\035\001\002\000\044" +
    "\006\066\007\067\010\074\011\070\012\104\023\073\024" +
    "\072\025\071\026\075\027\101\030\106\031\076\032\105" +
    "\036\102\037\077\055\uffe7\056\uffe7\001\002\000\004\047" +
    "\062\001\002\000\056\006\uffb9\007\uffb9\010\uffb9\011\uffb9" +
    "\012\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030" +
    "\uffb9\031\uffb9\032\uffb9\034\uffb9\036\uffb9\037\uffb9\040\uffb9" +
    "\050\uffb9\051\uffb9\052\uffb9\055\uffb9\056\uffb9\001\002\000" +
    "\056\006\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2\023\uffc2" +
    "\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032" +
    "\uffc2\034\uffc2\036\uffc2\037\uffc2\040\uffc2\050\uffc2\051\uffc2" +
    "\052\uffc2\055\uffc2\056\uffc2\001\002\000\040\004\uffa5\005" +
    "\uffa5\033\uffa5\035\uffa5\047\uffa5\072\uffa5\073\uffa5\074\uffa5" +
    "\075\uffa5\100\uffa5\101\uffa5\102\uffa5\103\uffa5\104\uffa5\105" +
    "\uffa5\001\002\000\004\047\uffdc\001\002\000\056\006\uffbf" +
    "\007\uffbf\010\uffbf\011\uffbf\012\uffbf\023\uffbf\024\uffbf\025" +
    "\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\034\uffbf" +
    "\036\uffbf\037\uffbf\040\uffbf\050\uffbf\051\uffbf\052\uffbf\055" +
    "\uffbf\056\uffbf\001\002\000\040\004\uffa4\005\uffa4\033\uffa4" +
    "\035\uffa4\047\uffa4\072\uffa4\073\uffa4\074\uffa4\075\uffa4\100" +
    "\uffa4\101\uffa4\102\uffa4\103\uffa4\104\uffa4\105\uffa4\001\002" +
    "\000\004\047\uffdb\001\002\000\056\006\uffb8\007\uffb8\010" +
    "\uffb8\011\uffb8\012\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8" +
    "\027\uffb8\030\uffb8\031\uffb8\032\uffb8\034\uffb8\036\uffb8\037" +
    "\uffb8\040\uffb8\050\uffb8\051\uffb8\052\uffb8\055\uffb8\056\uffb8" +
    "\001\002\000\056\006\uffc0\007\uffc0\010\uffc0\011\uffc0\012" +
    "\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0" +
    "\031\uffc0\032\uffc0\034\uffc0\036\uffc0\037\uffc0\040\uffc0\050" +
    "\uffc0\051\uffc0\052\uffc0\055\uffc0\056\uffc0\001\002\000\004" +
    "\047\uffda\001\002\000\004\047\uffdd\001\002\000\056\006" +
    "\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6\023\uffb6\024\uffb6" +
    "\025\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\034" +
    "\uffb6\036\uffb6\037\uffb6\040\uffb6\050\uffb6\051\uffb6\052\uffb6" +
    "\055\uffb6\056\uffb6\001\002\000\042\004\050\005\053\033" +
    "\036\035\037\047\040\050\uffd8\072\060\073\051\074\057" +
    "\075\054\100\042\101\046\102\055\103\033\104\061\105" +
    "\035\001\002\000\004\050\114\001\002\000\044\006\066" +
    "\007\067\010\074\011\070\012\104\023\073\024\072\025" +
    "\071\026\075\027\101\030\106\031\076\032\105\036\102" +
    "\037\077\050\uffd6\056\100\001\002\000\004\050\uffd9\001" +
    "\002\000\040\004\uffb4\005\uffb4\033\uffb4\035\uffb4\047\uffb4" +
    "\072\uffb4\073\uffb4\074\uffb4\075\uffb4\100\uffb4\101\uffb4\102" +
    "\uffb4\103\uffb4\104\uffb4\105\uffb4\001\002\000\040\004\uffb3" +
    "\005\uffb3\033\uffb3\035\uffb3\047\uffb3\072\uffb3\073\uffb3\074" +
    "\uffb3\075\uffb3\100\uffb3\101\uffb3\102\uffb3\103\uffb3\104\uffb3" +
    "\105\uffb3\001\002\000\040\004\uffb1\005\uffb1\033\uffb1\035" +
    "\uffb1\047\uffb1\072\uffb1\073\uffb1\074\uffb1\075\uffb1\100\uffb1" +
    "\101\uffb1\102\uffb1\103\uffb1\104\uffb1\105\uffb1\001\002\000" +
    "\040\004\uffac\005\uffac\033\uffac\035\uffac\047\uffac\072\uffac" +
    "\073\uffac\074\uffac\075\uffac\100\uffac\101\uffac\102\uffac\103" +
    "\uffac\104\uffac\105\uffac\001\002\000\040\004\uffad\005\uffad" +
    "\033\uffad\035\uffad\047\uffad\072\uffad\073\uffad\074\uffad\075" +
    "\uffad\100\uffad\101\uffad\102\uffad\103\uffad\104\uffad\105\uffad" +
    "\001\002\000\040\004\uffae\005\uffae\033\uffae\035\uffae\047" +
    "\uffae\072\uffae\073\uffae\074\uffae\075\uffae\100\uffae\101\uffae" +
    "\102\uffae\103\uffae\104\uffae\105\uffae\001\002\000\040\004" +
    "\uffb2\005\uffb2\033\uffb2\035\uffb2\047\uffb2\072\uffb2\073\uffb2" +
    "\074\uffb2\075\uffb2\100\uffb2\101\uffb2\102\uffb2\103\uffb2\104" +
    "\uffb2\105\uffb2\001\002\000\040\004\uffab\005\uffab\033\uffab" +
    "\035\uffab\047\uffab\072\uffab\073\uffab\074\uffab\075\uffab\100" +
    "\uffab\101\uffab\102\uffab\103\uffab\104\uffab\105\uffab\001\002" +
    "\000\040\004\uffa8\005\uffa8\033\uffa8\035\uffa8\047\uffa8\072" +
    "\uffa8\073\uffa8\074\uffa8\075\uffa8\100\uffa8\101\uffa8\102\uffa8" +
    "\103\uffa8\104\uffa8\105\uffa8\001\002\000\040\004\050\005" +
    "\053\033\036\035\037\047\040\072\060\073\051\074\057" +
    "\075\054\100\042\101\046\102\055\103\033\104\061\105" +
    "\035\001\002\000\040\004\050\005\053\033\036\035\037" +
    "\047\040\072\060\073\051\074\057\075\054\100\042\101" +
    "\046\102\055\103\033\104\061\105\035\001\002\000\040" +
    "\004\uffaa\005\uffaa\033\uffaa\035\uffaa\047\uffaa\072\uffaa\073" +
    "\uffaa\074\uffaa\075\uffaa\100\uffaa\101\uffaa\102\uffaa\103\uffaa" +
    "\104\uffaa\105\uffaa\001\002\000\040\004\uffaf\005\uffaf\033" +
    "\uffaf\035\uffaf\047\uffaf\072\uffaf\073\uffaf\074\uffaf\075\uffaf" +
    "\100\uffaf\101\uffaf\102\uffaf\103\uffaf\104\uffaf\105\uffaf\001" +
    "\002\000\040\004\050\005\053\033\036\035\037\047\040" +
    "\072\060\073\051\074\057\075\054\100\042\101\046\102" +
    "\055\103\033\104\061\105\035\001\002\000\040\004\uffb0" +
    "\005\uffb0\033\uffb0\035\uffb0\047\uffb0\072\uffb0\073\uffb0\074" +
    "\uffb0\075\uffb0\100\uffb0\101\uffb0\102\uffb0\103\uffb0\104\uffb0" +
    "\105\uffb0\001\002\000\040\004\uffa7\005\uffa7\033\uffa7\035" +
    "\uffa7\047\uffa7\072\uffa7\073\uffa7\074\uffa7\075\uffa7\100\uffa7" +
    "\101\uffa7\102\uffa7\103\uffa7\104\uffa7\105\uffa7\001\002\000" +
    "\040\004\uffa9\005\uffa9\033\uffa9\035\uffa9\047\uffa9\072\uffa9" +
    "\073\uffa9\074\uffa9\075\uffa9\100\uffa9\101\uffa9\102\uffa9\103" +
    "\uffa9\104\uffa9\105\uffa9\001\002\000\056\006\066\007\067" +
    "\010\074\011\070\012\104\023\073\024\072\025\071\026" +
    "\075\027\101\030\106\031\076\032\105\034\uffbc\036\102" +
    "\037\077\040\uffbc\050\uffbc\051\uffbc\052\uffbc\055\uffbc\056" +
    "\uffbc\001\002\000\004\050\uffd7\001\002\000\042\006\066" +
    "\007\067\010\074\011\070\012\104\023\073\024\072\025" +
    "\071\026\075\027\101\030\106\031\076\032\105\036\102" +
    "\037\077\040\112\001\002\000\040\004\050\005\053\033" +
    "\036\035\037\047\040\072\060\073\051\074\057\075\054" +
    "\100\042\101\046\102\055\103\033\104\061\105\035\001" +
    "\002\000\056\006\066\007\067\010\074\011\070\012\104" +
    "\023\073\024\072\025\071\026\075\027\101\030\106\031" +
    "\076\032\105\034\uffbb\036\102\037\077\040\uffbb\050\uffbb" +
    "\051\uffbb\052\uffbb\055\uffbb\056\uffbb\001\002\000\056\006" +
    "\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf\023\uffdf\024\uffdf" +
    "\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\034" +
    "\uffdf\036\uffdf\037\uffdf\040\uffdf\050\uffdf\051\uffdf\052\uffdf" +
    "\055\uffdf\056\uffdf\001\002\000\056\006\066\007\067\010" +
    "\074\011\070\012\104\023\073\024\072\025\071\026\075" +
    "\027\101\030\106\031\076\032\105\034\uffbd\036\102\037" +
    "\077\040\uffbd\050\uffbd\051\uffbd\052\uffbd\055\uffbd\056\uffbd" +
    "\001\002\000\042\006\066\007\067\010\074\011\070\012" +
    "\104\023\073\024\072\025\071\026\075\027\101\030\106" +
    "\031\076\032\105\036\102\037\077\050\117\001\002\000" +
    "\056\006\uffbe\007\uffbe\010\uffbe\011\uffbe\012\uffbe\023\uffbe" +
    "\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032" +
    "\uffbe\034\uffbe\036\uffbe\037\uffbe\040\uffbe\050\uffbe\051\uffbe" +
    "\052\uffbe\055\uffbe\056\uffbe\001\002\000\022\002\ufffb\041" +
    "\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb\061\ufffb\062\ufffb" +
    "\001\002\000\004\055\uffea\001\002\000\004\044\123\001" +
    "\002\000\004\053\124\001\002\000\004\054\125\001\002" +
    "\000\004\053\126\001\002\000\004\054\127\001\002\000" +
    "\004\060\130\001\002\000\004\050\131\001\002\000\004" +
    "\051\132\001\002\000\070\004\050\005\053\033\036\035" +
    "\037\041\010\042\014\043\022\044\005\045\013\047\040" +
    "\052\ufff7\062\017\063\151\066\147\067\134\070\152\071" +
    "\145\072\060\073\051\074\057\075\054\100\143\101\046" +
    "\102\055\103\033\104\061\105\035\001\002\000\074\004" +
    "\uffe5\005\uffe5\033\uffe5\035\uffe5\041\uffe5\042\uffe5\043\uffe5" +
    "\044\uffe5\045\uffe5\047\uffe5\051\uffe5\052\uffe5\062\uffe5\063" +
    "\uffe5\066\uffe5\067\uffe5\070\uffe5\071\uffe5\072\uffe5\073\uffe5" +
    "\074\uffe5\075\uffe5\076\uffe5\100\uffe5\101\uffe5\102\uffe5\103" +
    "\uffe5\104\uffe5\105\uffe5\001\002\000\004\051\251\001\002" +
    "\000\074\004\050\005\053\033\036\035\037\041\010\042" +
    "\014\043\022\044\005\045\013\047\040\051\ufff7\052\ufff7" +
    "\062\017\063\151\066\147\067\134\070\152\071\145\072" +
    "\060\073\051\074\057\075\054\076\ufff7\100\143\101\046" +
    "\102\055\103\033\104\061\105\035\001\002\000\004\055" +
    "\uffd4\001\002\000\044\006\uffc3\007\uffc3\010\uffc3\011\uffc3" +
    "\012\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030" +
    "\uffc3\031\uffc3\032\uffc3\034\uffc3\036\uffc3\037\uffc3\055\247" +
    "\001\002\000\004\055\246\001\002\000\074\004\uffe4\005" +
    "\uffe4\033\uffe4\035\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4" +
    "\045\uffe4\047\uffe4\051\uffe4\052\uffe4\062\uffe4\063\uffe4\066" +
    "\uffe4\067\uffe4\070\uffe4\071\uffe4\072\uffe4\073\uffe4\074\uffe4" +
    "\075\uffe4\076\uffe4\100\uffe4\101\uffe4\102\uffe4\103\uffe4\104" +
    "\uffe4\105\uffe4\001\002\000\074\004\uffe3\005\uffe3\033\uffe3" +
    "\035\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3\045\uffe3\047" +
    "\uffe3\051\uffe3\052\uffe3\062\uffe3\063\uffe3\066\uffe3\067\uffe3" +
    "\070\uffe3\071\uffe3\072\uffe3\073\uffe3\074\uffe3\075\uffe3\076" +
    "\uffe3\100\uffe3\101\uffe3\102\uffe3\103\uffe3\104\uffe3\105\uffe3" +
    "\001\002\000\064\006\uffba\007\uffba\010\uffba\011\uffba\012" +
    "\uffba\013\233\014\240\015\234\016\236\017\241\020\237" +
    "\021\231\022\235\023\uffba\024\uffba\025\uffba\026\uffba\027" +
    "\uffba\030\uffba\031\uffba\032\uffba\034\uffba\036\uffba\037\uffba" +
    "\047\uffde\001\002\000\004\055\uffce\001\002\000\042\004" +
    "\050\005\053\033\036\035\037\047\040\055\uffd1\072\060" +
    "\073\051\074\057\075\054\100\042\101\046\102\055\103" +
    "\033\104\061\105\035\001\002\000\004\055\uffd5\001\002" +
    "\000\054\004\050\005\053\033\036\035\037\041\010\042" +
    "\014\043\022\044\005\045\013\047\040\062\017\072\060" +
    "\073\051\074\057\075\054\100\042\101\046\102\055\103" +
    "\033\104\061\105\035\001\002\000\042\006\066\007\067" +
    "\010\074\011\070\012\104\023\073\024\072\025\071\026" +
    "\075\027\101\030\106\031\076\032\105\034\214\036\102" +
    "\037\077\001\002\000\040\004\050\005\053\033\036\035" +
    "\037\047\040\072\060\073\051\074\057\075\054\100\042" +
    "\101\046\102\055\103\033\104\061\105\035\001\002\000" +
    "\040\004\050\005\053\033\036\035\037\047\040\072\060" +
    "\073\051\074\057\075\054\100\042\101\046\102\055\103" +
    "\033\104\061\105\035\001\002\000\074\004\uffe2\005\uffe2" +
    "\033\uffe2\035\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2\045" +
    "\uffe2\047\uffe2\051\uffe2\052\uffe2\062\uffe2\063\uffe2\066\uffe2" +
    "\067\uffe2\070\uffe2\071\uffe2\072\uffe2\073\uffe2\074\uffe2\075" +
    "\uffe2\076\uffe2\100\uffe2\101\uffe2\102\uffe2\103\uffe2\104\uffe2" +
    "\105\uffe2\001\002\000\004\055\uffd3\001\002\000\004\052" +
    "\157\001\002\000\004\055\uffd2\001\002\000\022\002\ufffa" +
    "\041\ufffa\042\ufffa\043\ufffa\044\ufffa\045\ufffa\061\ufffa\062" +
    "\ufffa\001\002\000\042\006\066\007\067\010\074\011\070" +
    "\012\104\023\073\024\072\025\071\026\075\027\101\030" +
    "\106\031\076\032\105\036\102\037\077\052\161\001\002" +
    "\000\004\076\uff96\001\002\000\004\076\163\001\002\000" +
    "\006\040\166\077\167\001\002\000\004\051\165\001\002" +
    "\000\074\004\uff98\005\uff98\033\uff98\035\uff98\041\uff98\042" +
    "\uff98\043\uff98\044\uff98\045\uff98\047\uff98\051\uff98\052\uff98" +
    "\062\uff98\063\uff98\066\uff98\067\uff98\070\uff98\071\uff98\072" +
    "\uff98\073\uff98\074\uff98\075\uff98\076\uff98\100\uff98\101\uff98" +
    "\102\uff98\103\uff98\104\uff98\105\uff98\001\002\000\070\004" +
    "\050\005\053\033\036\035\037\041\010\042\014\043\022" +
    "\044\005\045\013\047\040\062\017\063\151\066\147\067" +
    "\134\070\152\071\145\072\060\073\051\074\057\075\054" +
    "\076\ufff7\100\143\101\046\102\055\103\033\104\061\105" +
    "\035\001\002\000\004\040\170\001\002\000\070\004\050" +
    "\005\053\033\036\035\037\041\010\042\014\043\022\044" +
    "\005\045\013\047\040\051\ufff7\062\017\063\151\066\147" +
    "\067\134\070\152\071\145\072\060\073\051\074\057\075" +
    "\054\100\143\101\046\102\055\103\033\104\061\105\035" +
    "\001\002\000\004\051\uff95\001\002\000\004\076\uff97\001" +
    "\002\000\042\006\066\007\067\010\074\011\070\012\104" +
    "\023\073\024\072\025\071\026\075\027\101\030\106\031" +
    "\076\032\105\036\102\037\077\051\174\001\002\000\070" +
    "\004\050\005\053\033\036\035\037\041\010\042\014\043" +
    "\022\044\005\045\013\047\040\052\ufff7\062\017\063\151" +
    "\066\147\067\134\070\152\071\145\072\060\073\051\074" +
    "\057\075\054\100\143\101\046\102\055\103\033\104\061" +
    "\105\035\001\002\000\004\052\176\001\002\000\100\004" +
    "\uff9c\005\uff9c\033\uff9c\035\uff9c\041\uff9c\042\uff9c\043\uff9c" +
    "\044\uff9c\045\uff9c\047\uff9c\051\uff9c\052\uff9c\062\uff9c\063" +
    "\uff9c\064\201\065\uff9c\066\uff9c\067\uff9c\070\uff9c\071\uff9c" +
    "\072\uff9c\073\uff9c\074\uff9c\075\uff9c\076\uff9c\100\uff9c\101" +
    "\uff9c\102\uff9c\103\uff9c\104\uff9c\105\uff9c\001\002\000\100" +
    "\004\uff9c\005\uff9c\033\uff9c\035\uff9c\041\uff9c\042\uff9c\043" +
    "\uff9c\044\uff9c\045\uff9c\047\uff9c\051\uff9c\052\uff9c\062\uff9c" +
    "\063\uff9c\064\201\065\uff9c\066\uff9c\067\uff9c\070\uff9c\071" +
    "\uff9c\072\uff9c\073\uff9c\074\uff9c\075\uff9c\076\uff9c\100\uff9c" +
    "\101\uff9c\102\uff9c\103\uff9c\104\uff9c\105\uff9c\001\002\000" +
    "\076\004\uff99\005\uff99\033\uff99\035\uff99\041\uff99\042\uff99" +
    "\043\uff99\044\uff99\045\uff99\047\uff99\051\uff99\052\uff99\062" +
    "\uff99\063\uff99\065\207\066\uff99\067\uff99\070\uff99\071\uff99" +
    "\072\uff99\073\uff99\074\uff99\075\uff99\076\uff99\100\uff99\101" +
    "\uff99\102\uff99\103\uff99\104\uff99\105\uff99\001\002\000\040" +
    "\004\050\005\053\033\036\035\037\047\040\072\060\073" +
    "\051\074\057\075\054\100\042\101\046\102\055\103\033" +
    "\104\061\105\035\001\002\000\042\006\066\007\067\010" +
    "\074\011\070\012\104\023\073\024\072\025\071\026\075" +
    "\027\101\030\106\031\076\032\105\036\102\037\077\051" +
    "\203\001\002\000\070\004\050\005\053\033\036\035\037" +
    "\041\010\042\014\043\022\044\005\045\013\047\040\052" +
    "\ufff7\062\017\063\151\066\147\067\134\070\152\071\145" +
    "\072\060\073\051\074\057\075\054\100\143\101\046\102" +
    "\055\103\033\104\061\105\035\001\002\000\004\052\205" +
    "\001\002\000\100\004\uff9b\005\uff9b\033\uff9b\035\uff9b\041" +
    "\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b\047\uff9b\051\uff9b" +
    "\052\uff9b\062\uff9b\063\uff9b\064\uff9b\065\uff9b\066\uff9b\067" +
    "\uff9b\070\uff9b\071\uff9b\072\uff9b\073\uff9b\074\uff9b\075\uff9b" +
    "\076\uff9b\100\uff9b\101\uff9b\102\uff9b\103\uff9b\104\uff9b\105" +
    "\uff9b\001\002\000\074\004\uff9e\005\uff9e\033\uff9e\035\uff9e" +
    "\041\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e\047\uff9e\051" +
    "\uff9e\052\uff9e\062\uff9e\063\uff9e\066\uff9e\067\uff9e\070\uff9e" +
    "\071\uff9e\072\uff9e\073\uff9e\074\uff9e\075\uff9e\076\uff9e\100" +
    "\uff9e\101\uff9e\102\uff9e\103\uff9e\104\uff9e\105\uff9e\001\002" +
    "\000\004\051\210\001\002\000\070\004\050\005\053\033" +
    "\036\035\037\041\010\042\014\043\022\044\005\045\013" +
    "\047\040\052\ufff7\062\017\063\151\066\147\067\134\070" +
    "\152\071\145\072\060\073\051\074\057\075\054\100\143" +
    "\101\046\102\055\103\033\104\061\105\035\001\002\000" +
    "\004\052\212\001\002\000\074\004\uff9a\005\uff9a\033\uff9a" +
    "\035\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a\045\uff9a\047" +
    "\uff9a\051\uff9a\052\uff9a\062\uff9a\063\uff9a\066\uff9a\067\uff9a" +
    "\070\uff9a\071\uff9a\072\uff9a\073\uff9a\074\uff9a\075\uff9a\076" +
    "\uff9a\100\uff9a\101\uff9a\102\uff9a\103\uff9a\104\uff9a\105\uff9a" +
    "\001\002\000\076\004\uff9d\005\uff9d\033\uff9d\035\uff9d\041" +
    "\uff9d\042\uff9d\043\uff9d\044\uff9d\045\uff9d\047\uff9d\051\uff9d" +
    "\052\uff9d\062\uff9d\063\uff9d\065\uff9d\066\uff9d\067\uff9d\070" +
    "\uff9d\071\uff9d\072\uff9d\073\uff9d\074\uff9d\075\uff9d\076\uff9d" +
    "\100\uff9d\101\uff9d\102\uff9d\103\uff9d\104\uff9d\105\uff9d\001" +
    "\002\000\040\004\050\005\053\033\036\035\037\047\040" +
    "\072\060\073\051\074\057\075\054\100\042\101\046\102" +
    "\055\103\033\104\061\105\035\001\002\000\042\006\066" +
    "\007\067\010\074\011\070\012\104\023\073\024\072\025" +
    "\071\026\075\027\101\030\106\031\076\032\105\036\102" +
    "\037\077\055\uffcf\001\002\000\004\055\224\001\002\000" +
    "\044\006\066\007\067\010\074\011\070\012\104\023\073" +
    "\024\072\025\071\026\075\027\101\030\106\031\076\032" +
    "\105\036\102\037\077\051\uffa0\055\uffa0\001\002\000\004" +
    "\051\221\001\002\000\070\004\050\005\053\033\036\035" +
    "\037\041\010\042\014\043\022\044\005\045\013\047\040" +
    "\052\ufff7\062\017\063\151\066\147\067\134\070\152\071" +
    "\145\072\060\073\051\074\057\075\054\100\143\101\046" +
    "\102\055\103\033\104\061\105\035\001\002\000\004\052" +
    "\223\001\002\000\074\004\uffa2\005\uffa2\033\uffa2\035\uffa2" +
    "\041\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2\047\uffa2\051" +
    "\uffa2\052\uffa2\062\uffa2\063\uffa2\066\uffa2\067\uffa2\070\uffa2" +
    "\071\uffa2\072\uffa2\073\uffa2\074\uffa2\075\uffa2\076\uffa2\100" +
    "\uffa2\101\uffa2\102\uffa2\103\uffa2\104\uffa2\105\uffa2\001\002" +
    "\000\040\004\050\005\053\033\036\035\037\047\040\072" +
    "\060\073\051\074\057\075\054\100\042\101\046\102\055" +
    "\103\033\104\061\105\035\001\002\000\042\006\066\007" +
    "\067\010\074\011\070\012\104\023\073\024\072\025\071" +
    "\026\075\027\101\030\106\031\076\032\105\036\102\037" +
    "\077\055\226\001\002\000\040\004\050\005\053\033\036" +
    "\035\037\047\040\072\060\073\051\074\057\075\054\100" +
    "\042\101\046\102\055\103\033\104\061\105\035\001\002" +
    "\000\044\006\066\007\067\010\074\011\070\012\104\023" +
    "\073\024\072\025\071\026\075\027\101\030\106\031\076" +
    "\032\105\036\102\037\077\051\uff9f\055\uff9f\001\002\000" +
    "\042\006\066\007\067\010\074\011\070\012\104\023\073" +
    "\024\072\025\071\026\075\027\101\030\106\031\076\032" +
    "\105\036\102\037\077\055\uffd0\001\002\000\040\004\uffc5" +
    "\005\uffc5\033\uffc5\035\uffc5\047\uffc5\072\uffc5\073\uffc5\074" +
    "\uffc5\075\uffc5\100\uffc5\101\uffc5\102\uffc5\103\uffc5\104\uffc5" +
    "\105\uffc5\001\002\000\040\004\050\005\053\033\036\035" +
    "\037\047\040\072\060\073\051\074\057\075\054\100\042" +
    "\101\046\102\055\103\033\104\061\105\035\001\002\000" +
    "\040\004\uffcb\005\uffcb\033\uffcb\035\uffcb\047\uffcb\072\uffcb" +
    "\073\uffcb\074\uffcb\075\uffcb\100\uffcb\101\uffcb\102\uffcb\103" +
    "\uffcb\104\uffcb\105\uffcb\001\002\000\040\004\uffc9\005\uffc9" +
    "\033\uffc9\035\uffc9\047\uffc9\072\uffc9\073\uffc9\074\uffc9\075" +
    "\uffc9\100\uffc9\101\uffc9\102\uffc9\103\uffc9\104\uffc9\105\uffc9" +
    "\001\002\000\040\004\uffc4\005\uffc4\033\uffc4\035\uffc4\047" +
    "\uffc4\072\uffc4\073\uffc4\074\uffc4\075\uffc4\100\uffc4\101\uffc4" +
    "\102\uffc4\103\uffc4\104\uffc4\105\uffc4\001\002\000\040\004" +
    "\uffc8\005\uffc8\033\uffc8\035\uffc8\047\uffc8\072\uffc8\073\uffc8" +
    "\074\uffc8\075\uffc8\100\uffc8\101\uffc8\102\uffc8\103\uffc8\104" +
    "\uffc8\105\uffc8\001\002\000\040\004\uffc6\005\uffc6\033\uffc6" +
    "\035\uffc6\047\uffc6\072\uffc6\073\uffc6\074\uffc6\075\uffc6\100" +
    "\uffc6\101\uffc6\102\uffc6\103\uffc6\104\uffc6\105\uffc6\001\002" +
    "\000\040\004\uffca\005\uffca\033\uffca\035\uffca\047\uffca\072" +
    "\uffca\073\uffca\074\uffca\075\uffca\100\uffca\101\uffca\102\uffca" +
    "\103\uffca\104\uffca\105\uffca\001\002\000\040\004\uffc7\005" +
    "\uffc7\033\uffc7\035\uffc7\047\uffc7\072\uffc7\073\uffc7\074\uffc7" +
    "\075\uffc7\100\uffc7\101\uffc7\102\uffc7\103\uffc7\104\uffc7\105" +
    "\uffc7\001\002\000\044\006\066\007\067\010\074\011\070" +
    "\012\104\023\073\024\072\025\071\026\075\027\101\030" +
    "\106\031\076\032\105\036\102\037\077\055\uffcc\056\243" +
    "\001\002\000\004\100\244\001\002\000\022\013\233\014" +
    "\240\015\234\016\236\017\241\020\237\021\231\022\235" +
    "\001\002\000\004\055\uffcd\001\002\000\074\004\uffe0\005" +
    "\uffe0\033\uffe0\035\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0" +
    "\045\uffe0\047\uffe0\051\uffe0\052\uffe0\062\uffe0\063\uffe0\066" +
    "\uffe0\067\uffe0\070\uffe0\071\uffe0\072\uffe0\073\uffe0\074\uffe0" +
    "\075\uffe0\076\uffe0\100\uffe0\101\uffe0\102\uffe0\103\uffe0\104" +
    "\uffe0\105\uffe0\001\002\000\074\004\uffe1\005\uffe1\033\uffe1" +
    "\035\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1\047" +
    "\uffe1\051\uffe1\052\uffe1\062\uffe1\063\uffe1\066\uffe1\067\uffe1" +
    "\070\uffe1\071\uffe1\072\uffe1\073\uffe1\074\uffe1\075\uffe1\076" +
    "\uffe1\100\uffe1\101\uffe1\102\uffe1\103\uffe1\104\uffe1\105\uffe1" +
    "\001\002\000\010\051\ufff8\052\ufff8\076\ufff8\001\002\000" +
    "\070\004\050\005\053\033\036\035\037\041\010\042\014" +
    "\043\022\044\005\045\013\047\040\052\ufff7\062\017\063" +
    "\151\066\147\067\134\070\152\071\145\072\060\073\051" +
    "\074\057\075\054\100\143\101\046\102\055\103\033\104" +
    "\061\105\035\001\002\000\004\052\253\001\002\000\054" +
    "\004\050\005\053\033\036\035\037\041\010\042\014\043" +
    "\022\044\005\045\013\047\040\062\017\072\060\073\051" +
    "\074\057\075\054\100\042\101\046\102\055\103\033\104" +
    "\061\105\035\001\002\000\004\055\255\001\002\000\074" +
    "\004\uffa1\005\uffa1\033\uffa1\035\uffa1\041\uffa1\042\uffa1\043" +
    "\uffa1\044\uffa1\045\uffa1\047\uffa1\051\uffa1\052\uffa1\062\uffa1" +
    "\063\uffa1\066\uffa1\067\uffa1\070\uffa1\071\uffa1\072\uffa1\073" +
    "\uffa1\074\uffa1\075\uffa1\076\uffa1\100\uffa1\101\uffa1\102\uffa1" +
    "\103\uffa1\104\uffa1\105\uffa1\001\002\000\004\002\000\001" +
    "\002\000\024\002\ufffd\041\ufffd\042\ufffd\043\ufffd\044\ufffd" +
    "\045\ufffd\057\ufffd\061\ufffd\062\ufffd\001\002\000\004\100" +
    "\ufff5\001\002\000\004\100\263\001\002\000\004\100\ufff6" +
    "\001\002\000\004\047\264\001\002\000\016\041\010\042" +
    "\014\043\022\044\005\045\013\050\uffed\001\002\000\004" +
    "\050\273\001\002\000\006\050\uffee\056\271\001\002\000" +
    "\004\100\270\001\002\000\006\050\uffec\056\uffec\001\002" +
    "\000\016\041\010\042\014\043\022\044\005\045\013\050" +
    "\uffed\001\002\000\004\050\uffef\001\002\000\004\051\274" +
    "\001\002\000\070\004\050\005\053\033\036\035\037\041" +
    "\010\042\014\043\022\044\005\045\013\047\040\052\ufff7" +
    "\062\017\063\151\066\147\067\134\070\152\071\145\072" +
    "\060\073\051\074\057\075\054\100\143\101\046\102\055" +
    "\103\033\104\061\105\035\001\002\000\004\052\276\001" +
    "\002\000\024\002\ufff9\041\ufff9\042\ufff9\043\ufff9\044\ufff9" +
    "\045\ufff9\057\ufff9\061\ufff9\062\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\274\000\020\003\005\004\020\006\014\011\006\050" +
    "\010\051\017\052\015\001\001\000\006\005\260\006\261" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\120\001" +
    "\001\000\012\004\020\006\014\011\006\051\117\001\001" +
    "\000\004\006\023\001\001\000\020\003\005\004\020\006" +
    "\014\011\006\050\022\051\017\052\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\024\001\001\000\002\001\001\000\004\013\027\001\001" +
    "\000\022\016\040\017\044\030\043\031\046\032\033\033" +
    "\055\034\051\036\042\001\001\000\002\001\001\000\004" +
    "\012\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\016\040\017\044\030\115\031\046\032" +
    "\033\033\055\034\051\036\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\016\040\017\044\030\114\031" +
    "\046\032\033\033\055\034\051\036\042\001\001\000\004" +
    "\035\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\016\040\017\044\020\062\021" +
    "\064\030\063\031\046\032\033\033\055\034\051\036\042" +
    "\001\001\000\002\001\001\000\004\035\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\016\040\017\044\030\110\031\046\032\033\033" +
    "\055\034\051\036\042\001\001\000\024\016\040\017\044" +
    "\021\107\030\063\031\046\032\033\033\055\034\051\036" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\016\040\017\044\030\106\031\046\032\033\033\055\034" +
    "\051\036\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\102\001\001\000\002\001" +
    "\001\000\004\035\102\001\001\000\022\016\040\017\044" +
    "\030\112\031\046\032\033\033\055\034\051\036\042\001" +
    "\001\000\004\035\102\001\001\000\002\001\001\000\004" +
    "\035\102\001\001\000\004\035\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\054\002\154\006\014\011\135\014\134\015" +
    "\132\016\136\017\044\022\137\023\145\024\155\025\153" +
    "\026\143\030\147\031\046\032\033\033\055\034\051\036" +
    "\042\037\140\041\141\045\152\001\001\000\002\001\001" +
    "\000\002\001\001\000\054\002\247\006\014\011\135\014" +
    "\134\015\132\016\136\017\044\022\137\023\145\024\155" +
    "\025\153\026\143\030\147\031\046\032\033\033\055\034" +
    "\051\036\042\037\140\041\141\045\152\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\231\001\001\000\002" +
    "\001\001\000\022\016\040\017\044\030\227\031\046\032" +
    "\033\033\055\034\051\036\042\001\001\000\002\001\001" +
    "\000\030\006\014\011\215\016\040\017\044\030\216\031" +
    "\046\032\033\033\055\034\051\036\042\040\217\001\001" +
    "\000\004\035\102\001\001\000\022\016\040\017\044\030" +
    "\172\031\046\032\033\033\055\034\051\036\042\001\001" +
    "\000\022\016\040\017\044\030\157\031\046\032\033\033" +
    "\055\034\051\036\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\035\102\001\001\000\004\046\161\001\001" +
    "\000\004\047\163\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\054\002\171\006\014\011\135" +
    "\014\134\015\132\016\136\017\044\022\137\023\145\024" +
    "\155\025\153\026\143\030\147\031\046\032\033\033\055" +
    "\034\051\036\042\037\140\041\141\045\152\001\001\000" +
    "\002\001\001\000\054\002\170\006\014\011\135\014\134" +
    "\015\132\016\136\017\044\022\137\023\145\024\155\025" +
    "\153\026\143\030\147\031\046\032\033\033\055\034\051" +
    "\036\042\037\140\041\141\045\152\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\102\001\001\000\054" +
    "\002\174\006\014\011\135\014\134\015\132\016\136\017" +
    "\044\022\137\023\145\024\155\025\153\026\143\030\147" +
    "\031\046\032\033\033\055\034\051\036\042\037\140\041" +
    "\141\045\152\001\001\000\002\001\001\000\006\042\177" +
    "\043\176\001\001\000\006\042\212\043\176\001\001\000" +
    "\004\044\205\001\001\000\022\016\040\017\044\030\201" +
    "\031\046\032\033\033\055\034\051\036\042\001\001\000" +
    "\004\035\102\001\001\000\054\002\203\006\014\011\135" +
    "\014\134\015\132\016\136\017\044\022\137\023\145\024" +
    "\155\025\153\026\143\030\147\031\046\032\033\033\055" +
    "\034\051\036\042\037\140\041\141\045\152\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\054\002\210\006\014\011\135\014\134\015" +
    "\132\016\136\017\044\022\137\023\145\024\155\025\153" +
    "\026\143\030\147\031\046\032\033\033\055\034\051\036" +
    "\042\037\140\041\141\045\152\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\016\040\017" +
    "\044\030\214\031\046\032\033\033\055\034\051\036\042" +
    "\001\001\000\004\035\102\001\001\000\002\001\001\000" +
    "\004\035\102\001\001\000\002\001\001\000\054\002\221" +
    "\006\014\011\135\014\134\015\132\016\136\017\044\022" +
    "\137\023\145\024\155\025\153\026\143\030\147\031\046" +
    "\032\033\033\055\034\051\036\042\037\140\041\141\045" +
    "\152\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\016\040\017\044\030\224\031\046\032\033\033\055\034" +
    "\051\036\042\001\001\000\004\035\102\001\001\000\022" +
    "\016\040\017\044\030\226\031\046\032\033\033\055\034" +
    "\051\036\042\001\001\000\004\035\102\001\001\000\004" +
    "\035\102\001\001\000\002\001\001\000\022\016\040\017" +
    "\044\030\241\031\046\032\033\033\055\034\051\036\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\102\001\001\000\004\026" +
    "\244\001\001\000\004\027\231\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\002\251\006\014\011\135\014\134\015\132\016\136" +
    "\017\044\022\137\023\145\024\155\025\153\026\143\030" +
    "\147\031\046\032\033\033\055\034\051\036\042\037\140" +
    "\041\141\045\152\001\001\000\002\001\001\000\030\006" +
    "\014\011\215\016\040\017\044\030\216\031\046\032\033" +
    "\033\055\034\051\036\042\040\253\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\006\266\007\264\010\265\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\006\266\007\271\010\265\001\001" +
    "\000\002\001\001\000\002\001\001\000\054\002\274\006" +
    "\014\011\135\014\134\015\132\016\136\017\044\022\137" +
    "\023\145\024\155\025\153\026\143\030\147\031\046\032" +
    "\033\033\055\034\051\036\042\037\140\041\141\045\152" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



/***
    private Scanner scanner;
    public Parser(Scanner scanner) { 
        this.scanner = scanner;
    }
***/
    private HashMap<String, Double>tsymbols = new HashMap<>();

    public Double getSymbolValue(String id) {
         return tsymbols.get(id);
    }

    public void addSymbol(String id, Double value) {
        if (tsymbols.get(id) == null) {
            tsymbols.put(id, value);
        } else {
            tsymbols.replace(id, value);
        }
    }

    /**********************************************************************
     * sobrecàrrega de mètodes per gestionar els errors que es localitzin *
     **********************************************************************/

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
    **/ 
    @Override
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception{ 
        report_error("Error síntactico irrecuperable en la Línea " + 
        (cur_token.left)+ " Columna "+cur_token.right+". Componente " + cur_token.value + 
        " no reconocido.", cur_token); 
        done_parsing();
    }  

    /**
     * Método al que se llama automáticamente ante algún error sintactico.
    **/ 
    @Override
    public void syntax_error(Symbol cur_token){ 
        report_error("Error Sintáctico en la Línea " + (cur_token.left) +
        " Columna "+cur_token.right+ ". No se esperaba este componente: " +cur_token.value+".", cur_token); 
    } 

    @Override
    public void report_error(String message, Object info) {
        StringBuilder msg = new StringBuilder("ERROR");
        if (info instanceof Symbol) {
            ComplexSymbol token = (ComplexSymbol)info;
            Location l = token.getLeft();
            
            if (l != null) {
                msg.append(" (fila: ")
                   .append(l.getLine())
                   .append(", columna: ")
                   .append(l.getColumn())
                   .append(")");
            }
        }
        msg.append(": ").append(message);
        
        System.err.println(msg);
    }

    @Override
    public void report_fatal_error(String message, Object info) throws Exception {
        report_error("Error catastròfic ("+message+")", info);
        done_parsing();
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= S1 S 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= S2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S1 ::= METHOD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S1",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S1 ::= DECS ENDINSTR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S1",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // S2 ::= MAIN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S2",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // S2 ::= S2 S1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S2",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MAIN ::= KW_MAIN LPAREN KW_CHAR LBRACKET RBRACKET LBRACKET RBRACKET KW_ARGS RPAREN LKEY BODY RKEY 
            {
              SymbolMain RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // METHOD ::= KW_METHOD TIPO_RETORNO ID LPAREN GETPARAMS RPAREN LKEY BODY RKEY 
            {
              SymbolMethod RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METHOD",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BODY ::= ELEMENTO_METODO BODY 
            {
              SymbolBody RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BODY",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BODY ::= 
            {
              SymbolBody RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BODY",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TIPO_RETORNO ::= TIPO_VAR 
            {
              SymbolTypeRetorno RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_RETORNO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TIPO_RETORNO ::= KW_VOID 
            {
              SymbolTypeRetorno RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_RETORNO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TIPO_VAR ::= KW_BOOL 
            {
              SymbolTypeVar RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_VAR",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TIPO_VAR ::= KW_INT 
            {
              SymbolTypeVar RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_VAR",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TIPO_VAR ::= KW_DOUBLE 
            {
              SymbolTypeVar RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_VAR",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TIPO_VAR ::= KW_CHAR 
            {
              SymbolTypeVar RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_VAR",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TIPO_VAR ::= KW_STRING 
            {
              SymbolTypeVar RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_VAR",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // GETPARAMS ::= PARAM COMMA GETPARAMS 
            {
              SymbolGetParams RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GETPARAMS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // GETPARAMS ::= PARAM 
            {
              SymbolGetParams RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GETPARAMS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // GETPARAMS ::= 
            {
              SymbolGetParams RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GETPARAMS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PARAM ::= TIPO_VAR ID 
            {
              SymbolParam RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECS ::= KW_CONST TIPO_VAR IDDECSLISTA 
            {
              SymbolDecs RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECS ::= TIPO_VAR IDDECSLISTA 
            {
              SymbolDecs RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // IDDECSLISTA ::= ID ASIG COMMA IDDECSLISTA 
            {
              SymbolIDDecsLista RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDDECSLISTA",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // IDDECSLISTA ::= ID ASIG 
            {
              SymbolIDDecsLista RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDDECSLISTA",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ASIG ::= AS_ASSIGN OPERAND 
            {
              SymbolAsig RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ASIG ::= 
            {
              SymbolAsig RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ELEMENTO_METODO ::= INSTR 
            {
              SymbolElementoMetodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_METODO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ELEMENTO_METODO ::= LOOP 
            {
              SymbolElementoMetodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_METODO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ELEMENTO_METODO ::= IF 
            {
              SymbolElementoMetodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_METODO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ELEMENTO_METODO ::= SWITCH 
            {
              SymbolElementoMetodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_METODO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // INSTR ::= FCALL ENDINSTR 
            {
              SymbolInstr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTR",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // INSTR ::= STANDALONE_OP ENDINSTR 
            {
              SymbolInstr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTR",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FCALL ::= FNAME LPAREN SETPARAMS RPAREN 
            {
              SymbolFCall RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FCALL",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FNAME ::= ID 
            {
              SymbolFName RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FNAME",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FNAME ::= KW_IN 
            {
              SymbolFName RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FNAME",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FNAME ::= KW_OUT 
            {
              SymbolFName RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FNAME",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FNAME ::= KW_WRITE 
            {
              SymbolFName RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FNAME",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FNAME ::= KW_READ 
            {
              SymbolFName RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FNAME",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SETPARAMS ::= OPERANDSLISTA 
            {
              SymbolSetParams RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SETPARAMS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SETPARAMS ::= 
            {
              SymbolSetParams RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SETPARAMS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPERANDSLISTA ::= OPERAND COMMA OPERANDSLISTA 
            {
              SymbolOperandsLista RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERANDSLISTA",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPERANDSLISTA ::= OPERAND 
            {
              SymbolOperandsLista RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERANDSLISTA",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // STANDALONE_OP ::= RETURN 
            {
              SymbolStandaloneOp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STANDALONE_OP",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // STANDALONE_OP ::= DECS 
            {
              SymbolStandaloneOp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STANDALONE_OP",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // STANDALONE_OP ::= ASIGS 
            {
              SymbolStandaloneOp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STANDALONE_OP",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // STANDALONE_OP ::= SWAP 
            {
              SymbolStandaloneOp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STANDALONE_OP",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // RETURN ::= KW_RETURN 
            {
              SymbolReturn RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // RETURN ::= KW_RETURN OPERAND 
            {
              SymbolReturn RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SWAP ::= OPERAND OP_SWAP OPERAND 
            {
              SymbolSwap RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWAP",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ASIGS ::= IDASIGLISTA 
            {
              SymbolAsigs RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // IDASIGLISTA ::= ID AS_OP OPERAND COMMA IDASIGLISTA 
            {
              SymbolIDAsigLista RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDASIGLISTA",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // IDASIGLISTA ::= ID AS_OP OPERAND 
            {
              SymbolIDAsigLista RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDASIGLISTA",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // AS_OP ::= AS_ASSIGN 
            {
              SymbolAsOp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AS_OP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // AS_OP ::= AS_ADDA 
            {
              SymbolAsOp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AS_OP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // AS_OP ::= AS_SUBA 
            {
              SymbolAsOp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AS_OP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // AS_OP ::= AS_MULA 
            {
              SymbolAsOp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AS_OP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // AS_OP ::= AS_DIVA 
            {
              SymbolAsOp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AS_OP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // AS_OP ::= AS_POTA 
            {
              SymbolAsOp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AS_OP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // AS_OP ::= AS_ANDA 
            {
              SymbolAsOp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AS_OP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // AS_OP ::= AS_ORA 
            {
              SymbolAsOp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AS_OP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPERAND ::= FCALL 
            {
              SymbolOperand RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPERAND ::= UNARY_EXPRESSION 
            {
              SymbolOperand RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPERAND ::= BINARY_EXPRESSION 
            {
              SymbolOperand RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPERAND ::= CONDITIONAL_EXPRESSION 
            {
              SymbolOperand RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPERAND ::= ATOMIC_EXPRESSION 
            {
              SymbolOperand RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPERAND ::= LPAREN OPERAND RPAREN 
            {
              SymbolOperand RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // UNARY_EXPRESSION ::= UNARY_OPERATOR OPERAND 
            {
              SymbolUnaryExpression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNARY_EXPRESSION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // BINARY_EXPRESSION ::= OPERAND BINARY_OPERATOR OPERAND 
            {
              SymbolBinaryExpression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_EXPRESSION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CONDITIONAL_EXPRESSION ::= OPERAND OP_COND OPERAND ARROW OPERAND 
            {
              SymbolConditionalExpression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDITIONAL_EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ATOMIC_EXPRESSION ::= ID 
            {
              SymbolAtomicExpression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATOMIC_EXPRESSION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ATOMIC_EXPRESSION ::= STRING 
            {
              SymbolAtomicExpression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATOMIC_EXPRESSION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ATOMIC_EXPRESSION ::= BOOL 
            {
              SymbolAtomicExpression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATOMIC_EXPRESSION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ATOMIC_EXPRESSION ::= INT 
            {
              SymbolAtomicExpression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATOMIC_EXPRESSION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ATOMIC_EXPRESSION ::= DOUBLE 
            {
              SymbolAtomicExpression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATOMIC_EXPRESSION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ATOMIC_EXPRESSION ::= CHAR 
            {
              SymbolAtomicExpression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATOMIC_EXPRESSION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // BINARY_OPERATOR ::= OP_ADD 
            {
              SymbolBinaryOperator RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // BINARY_OPERATOR ::= OP_SUB 
            {
              SymbolBinaryOperator RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // BINARY_OPERATOR ::= OP_MUL 
            {
              SymbolBinaryOperator RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // BINARY_OPERATOR ::= OP_DIV 
            {
              SymbolBinaryOperator RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // BINARY_OPERATOR ::= OP_MOD 
            {
              SymbolBinaryOperator RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // BINARY_OPERATOR ::= OP_POT 
            {
              SymbolBinaryOperator RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // BINARY_OPERATOR ::= OP_EQ 
            {
              SymbolBinaryOperator RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // BINARY_OPERATOR ::= OP_BEQ 
            {
              SymbolBinaryOperator RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // BINARY_OPERATOR ::= OP_BT 
            {
              SymbolBinaryOperator RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // BINARY_OPERATOR ::= OP_LEQ 
            {
              SymbolBinaryOperator RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // BINARY_OPERATOR ::= OP_LT 
            {
              SymbolBinaryOperator RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // BINARY_OPERATOR ::= OP_NEQ 
            {
              SymbolBinaryOperator RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // BINARY_OPERATOR ::= OP_AND 
            {
              SymbolBinaryOperator RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // BINARY_OPERATOR ::= OP_OR 
            {
              SymbolBinaryOperator RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // UNARY_OPERATOR ::= OP_NOT 
            {
              SymbolUnaryOperator RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNARY_OPERATOR",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // UNARY_OPERATOR ::= OP_INC 
            {
              SymbolUnaryOperator RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNARY_OPERATOR",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // UNARY_OPERATOR ::= OP_DEC 
            {
              SymbolUnaryOperator RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNARY_OPERATOR",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // UNARY_OPERATOR ::= OP_PCT 
            {
              SymbolUnaryOperator RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNARY_OPERATOR",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // LOOP ::= KW_LOOP LOOP_COND LKEY BODY RKEY 
            {
              SymbolLoop RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOP",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // LOOP ::= KW_DO LKEY BODY RKEY LOOP_COND ENDINSTR 
            {
              SymbolLoop RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOP",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // LOOP_COND ::= OPERAND 
            {
              SymbolLoopCond RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOP_COND",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // LOOP_COND ::= DECS ENDINSTR OPERAND ENDINSTR OPERAND 
            {
              SymbolLoopCond RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOP_COND",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // IF ::= KW_IF OPERAND LKEY BODY RKEY ELIFS ELSE 
            {
              SymbolIf RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ELIFS ::= ELIF ELIFS 
            {
              SymbolElifs RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELIFS",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ELIFS ::= 
            {
              SymbolElifs RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELIFS",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ELIF ::= KW_ELIF OPERAND LKEY BODY RKEY 
            {
              SymbolElif RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELIF",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ELSE ::= KW_ELSE LKEY BODY RKEY 
            {
              SymbolElse RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ELSE ::= 
            {
              SymbolElse RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // SWITCH ::= KW_SWITCH OPERAND RKEY CASO PRED LKEY 
            {
              SymbolSwitch RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCH",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CASO ::= CASO KW_CASE ARROW BODY 
            {
              SymbolCaso RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASO",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CASO ::= 
            {
              SymbolCaso RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASO",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // PRED ::= KW_CASE KW_DEFAULT ARROW BODY 
            {
              SymbolPred RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRED",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
