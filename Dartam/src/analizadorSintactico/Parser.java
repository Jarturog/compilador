
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadorSintactico;

import java_cup.runtime.*;
import analizadorSintactico.symbols.*;
import java.io.PrintStream;
import java.util.HashMap;
import java.util.List;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\171\000\002\002\004\000\002\047\004\000\002\047" +
    "\003\000\002\050\013\000\002\050\003\000\002\050\010" +
    "\000\002\004\003\000\002\004\003\000\002\052\004\000" +
    "\002\052\002\000\002\003\016\000\002\003\004\000\002" +
    "\002\004\000\002\002\002\000\002\006\003\000\002\006" +
    "\004\000\002\006\004\000\002\006\005\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\007\003\000\002\007\002\000\002" +
    "\010\006\000\002\010\004\000\002\011\006\000\002\011" +
    "\005\000\002\051\006\000\002\051\005\000\002\012\006" +
    "\000\002\012\004\000\002\013\004\000\002\013\002\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\016\004\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\017\006" +
    "\000\002\017\005\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\021\005\000\002\021\003\000\002\022\004\000\002\022" +
    "\005\000\002\023\006\000\002\024\005\000\002\024\004" +
    "\000\002\014\005\000\002\014\011\000\002\014\007\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\005\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\007\000\002\026\005\000\002" +
    "\027\004\000\002\027\004\000\002\030\005\000\002\031" +
    "\007\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\036\007\000\002\036\010\000\002\037\003" +
    "\000\002\037\007\000\002\040\011\000\002\041\004\000" +
    "\002\041\002\000\002\042\007\000\002\043\006\000\002" +
    "\043\002\000\002\044\010\000\002\045\007\000\002\045" +
    "\002\000\002\046\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\341\000\022\042\012\043\017\044\021\045\005\046" +
    "\014\062\006\063\013\064\020\001\002\000\022\042\012" +
    "\043\017\044\021\045\005\046\014\062\006\063\013\064" +
    "\020\001\002\000\006\054\uffec\103\uffec\001\002\000\020" +
    "\042\012\043\017\044\021\045\005\046\014\047\330\063" +
    "\022\001\002\000\024\002\uffff\042\012\043\017\044\021" +
    "\045\005\046\014\062\153\063\013\064\020\001\002\000" +
    "\024\002\ufffd\042\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd" +
    "\062\ufffd\063\ufffd\064\ufffd\001\002\000\006\054\133\103" +
    "\ufff3\001\002\000\006\054\uffef\103\uffef\001\002\000\004" +
    "\103\142\001\002\000\006\054\uffeb\103\uffeb\001\002\000" +
    "\004\002\141\001\002\000\004\103\024\001\002\000\006" +
    "\054\uffee\103\uffee\001\002\000\016\042\012\043\017\044" +
    "\021\045\005\046\014\063\022\001\002\000\006\054\uffed" +
    "\103\uffed\001\002\000\004\103\131\001\002\000\004\103" +
    "\024\001\002\000\010\013\027\056\uffdf\057\uffdf\001\002" +
    "\000\004\056\026\001\002\000\060\002\uffe6\042\uffe6\043" +
    "\uffe6\044\uffe6\045\uffe6\046\uffe6\052\uffe6\053\uffe6\056\uffe6" +
    "\062\uffe6\063\uffe6\064\uffe6\065\uffe6\070\uffe6\071\uffe6\072" +
    "\uffe6\073\uffe6\074\uffe6\075\uffe6\076\uffe6\077\uffe6\100\uffe6" +
    "\103\uffe6\001\002\000\036\004\045\005\051\033\036\050" +
    "\037\074\056\075\047\076\055\077\052\103\041\104\043" +
    "\105\053\106\033\107\060\110\035\001\002\000\006\056" +
    "\uffe1\057\031\001\002\000\004\103\024\001\002\000\004" +
    "\056\uffe2\001\002\000\070\004\uffad\005\uffad\006\uffad\007" +
    "\uffad\010\uffad\011\uffad\012\uffad\023\uffad\024\uffad\025\uffad" +
    "\026\uffad\027\uffad\030\uffad\031\uffad\032\uffad\035\uffad\036" +
    "\uffad\037\uffad\040\uffad\041\uffad\051\uffad\052\uffad\053\uffad" +
    "\055\uffad\056\uffad\057\uffad\102\uffad\001\002\000\070\004" +
    "\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8\012\uffb8" +
    "\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031" +
    "\uffb8\032\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8" +
    "\051\uffb8\052\uffb8\053\uffb8\055\uffb8\056\uffb8\057\uffb8\102" +
    "\uffb8\001\002\000\070\004\uffab\005\uffab\006\uffab\007\uffab" +
    "\010\uffab\011\uffab\012\uffab\023\uffab\024\uffab\025\uffab\026" +
    "\uffab\027\uffab\030\uffab\031\uffab\032\uffab\035\uffab\036\uffab" +
    "\037\uffab\040\uffab\041\uffab\051\uffab\052\uffab\053\uffab\055" +
    "\uffab\056\uffab\057\uffab\102\uffab\001\002\000\036\004\uff9c" +
    "\005\uff9c\033\uff9c\050\uff9c\074\uff9c\075\uff9c\076\uff9c\077" +
    "\uff9c\103\uff9c\104\uff9c\105\uff9c\106\uff9c\107\uff9c\110\uff9c" +
    "\001\002\000\036\004\045\005\051\033\036\050\037\074" +
    "\056\075\047\076\055\077\052\103\041\104\043\105\053" +
    "\106\033\107\060\110\035\001\002\000\070\004\uffbb\005" +
    "\uffbb\006\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb\023\uffbb" +
    "\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032" +
    "\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\051\uffbb" +
    "\052\uffbb\053\uffbb\055\uffbb\056\uffbb\057\uffbb\102\uffbb\001" +
    "\002\000\072\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0" +
    "\011\uffb0\012\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027" +
    "\uffb0\030\uffb0\031\uffb0\032\uffb0\035\uffb0\036\uffb0\037\uffb0" +
    "\040\uffb0\041\uffb0\050\uffd3\051\uffb0\052\uffb0\053\uffb0\055" +
    "\uffb0\056\uffb0\057\uffb0\102\uffb0\001\002\000\056\004\101" +
    "\005\104\006\103\007\077\010\111\011\102\012\066\023" +
    "\113\024\071\025\110\026\106\027\070\030\112\031\067" +
    "\032\073\035\072\036\074\037\114\041\075\056\uffe0\057" +
    "\uffe0\102\107\001\002\000\070\004\uffaf\005\uffaf\006\uffaf" +
    "\007\uffaf\010\uffaf\011\uffaf\012\uffaf\023\uffaf\024\uffaf\025" +
    "\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\035\uffaf" +
    "\036\uffaf\037\uffaf\040\uffaf\041\uffaf\051\uffaf\052\uffaf\053" +
    "\uffaf\055\uffaf\056\uffaf\057\uffaf\102\uffaf\001\002\000\070" +
    "\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9\012" +
    "\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9" +
    "\031\uffb9\032\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041" +
    "\uffb9\051\uffb9\052\uffb9\053\uffb9\055\uffb9\056\uffb9\057\uffb9" +
    "\102\uffb9\001\002\000\036\004\uff9b\005\uff9b\033\uff9b\050" +
    "\uff9b\074\uff9b\075\uff9b\076\uff9b\077\uff9b\103\uff9b\104\uff9b" +
    "\105\uff9b\106\uff9b\107\uff9b\110\uff9b\001\002\000\036\004" +
    "\045\005\051\033\036\050\037\074\056\075\047\076\055" +
    "\077\052\103\041\104\043\105\053\106\033\107\060\110" +
    "\035\001\002\000\004\050\uffd1\001\002\000\070\004\uffbc" +
    "\005\uffbc\006\uffbc\007\uffbc\010\uffbc\011\uffbc\012\uffbc\023" +
    "\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc" +
    "\032\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\051" +
    "\uffbc\052\uffbc\053\uffbc\055\uffbc\056\uffbc\057\uffbc\102\uffbc" +
    "\001\002\000\036\004\uff9a\005\uff9a\033\uff9a\050\uff9a\074" +
    "\uff9a\075\uff9a\076\uff9a\077\uff9a\103\uff9a\104\uff9a\105\uff9a" +
    "\106\uff9a\107\uff9a\110\uff9a\001\002\000\004\050\uffd0\001" +
    "\002\000\070\004\uffae\005\uffae\006\uffae\007\uffae\010\uffae" +
    "\011\uffae\012\uffae\023\uffae\024\uffae\025\uffae\026\uffae\027" +
    "\uffae\030\uffae\031\uffae\032\uffae\035\uffae\036\uffae\037\uffae" +
    "\040\uffae\041\uffae\051\uffae\052\uffae\053\uffae\055\uffae\056" +
    "\uffae\057\uffae\102\uffae\001\002\000\070\004\uffb7\005\uffb7" +
    "\006\uffb7\007\uffb7\010\uffb7\011\uffb7\012\uffb7\023\uffb7\024" +
    "\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7" +
    "\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\051\uffb7\052" +
    "\uffb7\053\uffb7\055\uffb7\056\uffb7\057\uffb7\102\uffb7\001\002" +
    "\000\004\050\uffcf\001\002\000\004\050\uffd2\001\002\000" +
    "\004\050\061\001\002\000\070\004\uffac\005\uffac\006\uffac" +
    "\007\uffac\010\uffac\011\uffac\012\uffac\023\uffac\024\uffac\025" +
    "\uffac\026\uffac\027\uffac\030\uffac\031\uffac\032\uffac\035\uffac" +
    "\036\uffac\037\uffac\040\uffac\041\uffac\051\uffac\052\uffac\053" +
    "\uffac\055\uffac\056\uffac\057\uffac\102\uffac\001\002\000\040" +
    "\004\045\005\051\033\036\050\037\051\062\074\056\075" +
    "\047\076\055\077\052\103\041\104\043\105\053\106\033" +
    "\107\060\110\035\001\002\000\070\004\uffd4\005\uffd4\006" +
    "\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4\023\uffd4\024\uffd4" +
    "\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\035" +
    "\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\051\uffd4\052\uffd4" +
    "\053\uffd4\055\uffd4\056\uffd4\057\uffd4\102\uffd4\001\002\000" +
    "\056\004\101\005\104\006\103\007\077\010\111\011\102" +
    "\012\066\023\113\024\071\025\110\026\106\027\070\030" +
    "\112\031\067\032\073\035\072\036\074\037\114\041\075" +
    "\051\uffcd\057\100\102\107\001\002\000\004\051\065\001" +
    "\002\000\070\004\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5" +
    "\011\uffd5\012\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027" +
    "\uffd5\030\uffd5\031\uffd5\032\uffd5\035\uffd5\036\uffd5\037\uffd5" +
    "\040\uffd5\041\uffd5\051\uffd5\052\uffd5\053\uffd5\055\uffd5\056" +
    "\uffd5\057\uffd5\102\uffd5\001\002\000\036\004\uffa6\005\uffa6" +
    "\033\uffa6\050\uffa6\074\uffa6\075\uffa6\076\uffa6\077\uffa6\103" +
    "\uffa6\104\uffa6\105\uffa6\106\uffa6\107\uffa6\110\uffa6\001\002" +
    "\000\036\004\uff9e\005\uff9e\033\uff9e\050\uff9e\074\uff9e\075" +
    "\uff9e\076\uff9e\077\uff9e\103\uff9e\104\uff9e\105\uff9e\106\uff9e" +
    "\107\uff9e\110\uff9e\001\002\000\036\004\uffa0\005\uffa0\033" +
    "\uffa0\050\uffa0\074\uffa0\075\uffa0\076\uffa0\077\uffa0\103\uffa0" +
    "\104\uffa0\105\uffa0\106\uffa0\107\uffa0\110\uffa0\001\002\000" +
    "\036\004\uffa3\005\uffa3\033\uffa3\050\uffa3\074\uffa3\075\uffa3" +
    "\076\uffa3\077\uffa3\103\uffa3\104\uffa3\105\uffa3\106\uffa3\107" +
    "\uffa3\110\uffa3\001\002\000\070\004\uff99\005\uff99\006\uff99" +
    "\007\uff99\010\uff99\011\uff99\012\uff99\023\uff99\024\uff99\025" +
    "\uff99\026\uff99\027\uff99\030\uff99\031\uff99\032\uff99\035\uff99" +
    "\036\uff99\037\uff99\040\uff99\041\uff99\051\uff99\052\uff99\053" +
    "\uff99\055\uff99\056\uff99\057\uff99\102\uff99\001\002\000\036" +
    "\004\uff9d\005\uff9d\033\uff9d\050\uff9d\074\uff9d\075\uff9d\076" +
    "\uff9d\077\uff9d\103\uff9d\104\uff9d\105\uff9d\106\uff9d\107\uff9d" +
    "\110\uff9d\001\002\000\036\004\uffa5\005\uffa5\033\uffa5\050" +
    "\uffa5\074\uffa5\075\uffa5\076\uffa5\077\uffa5\103\uffa5\104\uffa5" +
    "\105\uffa5\106\uffa5\107\uffa5\110\uffa5\001\002\000\004\103" +
    "\125\001\002\000\070\004\uffb3\005\uffb3\006\uffb3\007\uffb3" +
    "\010\uffb3\011\uffb3\012\uffb3\023\uffb3\024\uffb3\025\uffb3\026" +
    "\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\035\uffb3\036\uffb3" +
    "\037\uffb3\040\uffb3\041\uffb3\051\uffb3\052\uffb3\053\uffb3\055" +
    "\uffb3\056\uffb3\057\uffb3\102\uffb3\001\002\000\036\004\uffa9" +
    "\005\uffa9\033\uffa9\050\uffa9\074\uffa9\075\uffa9\076\uffa9\077" +
    "\uffa9\103\uffa9\104\uffa9\105\uffa9\106\uffa9\107\uffa9\110\uffa9" +
    "\001\002\000\036\004\045\005\051\033\036\050\037\074" +
    "\056\075\047\076\055\077\052\103\041\104\043\105\053" +
    "\106\033\107\060\110\035\001\002\000\070\004\uff98\005" +
    "\uff98\006\uff98\007\uff98\010\uff98\011\uff98\012\uff98\023\uff98" +
    "\024\uff98\025\uff98\026\uff98\027\uff98\030\uff98\031\uff98\032" +
    "\uff98\035\uff98\036\uff98\037\uff98\040\uff98\041\uff98\051\uff98" +
    "\052\uff98\053\uff98\055\uff98\056\uff98\057\uff98\102\uff98\001" +
    "\002\000\036\004\uffa7\005\uffa7\033\uffa7\050\uffa7\074\uffa7" +
    "\075\uffa7\076\uffa7\077\uffa7\103\uffa7\104\uffa7\105\uffa7\106" +
    "\uffa7\107\uffa7\110\uffa7\001\002\000\036\004\uffaa\005\uffaa" +
    "\033\uffaa\050\uffaa\074\uffaa\075\uffaa\076\uffaa\077\uffaa\103" +
    "\uffaa\104\uffaa\105\uffaa\106\uffaa\107\uffaa\110\uffaa\001\002" +
    "\000\070\004\uff97\005\uff97\006\uff97\007\uff97\010\uff97\011" +
    "\uff97\012\uff97\023\uff97\024\uff97\025\uff97\026\uff97\027\uff97" +
    "\030\uff97\031\uff97\032\uff97\035\uff97\036\uff97\037\uff97\040" +
    "\uff97\041\uff97\051\uff97\052\uff97\053\uff97\055\uff97\056\uff97" +
    "\057\uff97\102\uff97\001\002\000\036\004\045\005\051\033" +
    "\036\050\037\074\056\075\047\076\055\077\052\103\041" +
    "\104\043\105\053\106\033\107\060\110\035\001\002\000" +
    "\036\004\uffa1\005\uffa1\033\uffa1\050\uffa1\074\uffa1\075\uffa1" +
    "\076\uffa1\077\uffa1\103\uffa1\104\uffa1\105\uffa1\106\uffa1\107" +
    "\uffa1\110\uffa1\001\002\000\004\054\120\001\002\000\036" +
    "\004\uffa2\005\uffa2\033\uffa2\050\uffa2\074\uffa2\075\uffa2\076" +
    "\uffa2\077\uffa2\103\uffa2\104\uffa2\105\uffa2\106\uffa2\107\uffa2" +
    "\110\uffa2\001\002\000\036\004\uffa8\005\uffa8\033\uffa8\050" +
    "\uffa8\074\uffa8\075\uffa8\076\uffa8\077\uffa8\103\uffa8\104\uffa8" +
    "\105\uffa8\106\uffa8\107\uffa8\110\uffa8\001\002\000\036\004" +
    "\uff9f\005\uff9f\033\uff9f\050\uff9f\074\uff9f\075\uff9f\076\uff9f" +
    "\077\uff9f\103\uff9f\104\uff9f\105\uff9f\106\uff9f\107\uff9f\110" +
    "\uff9f\001\002\000\036\004\uffa4\005\uffa4\033\uffa4\050\uffa4" +
    "\074\uffa4\075\uffa4\076\uffa4\077\uffa4\103\uffa4\104\uffa4\105" +
    "\uffa4\106\uffa4\107\uffa4\110\uffa4\001\002\000\036\004\045" +
    "\005\051\033\036\050\037\074\056\075\047\076\055\077" +
    "\052\103\041\104\043\105\053\106\033\107\060\110\035" +
    "\001\002\000\054\004\101\005\104\006\103\007\077\010" +
    "\111\011\102\012\066\023\113\024\071\025\110\026\106" +
    "\027\070\030\112\031\067\032\073\035\072\036\074\037" +
    "\114\040\116\041\075\102\107\001\002\000\036\004\045" +
    "\005\051\033\036\050\037\074\056\075\047\076\055\077" +
    "\052\103\041\104\043\105\053\106\033\107\060\110\035" +
    "\001\002\000\070\004\101\005\104\006\103\007\077\010" +
    "\111\011\102\012\066\023\113\024\071\025\110\026\106" +
    "\027\070\030\112\031\067\032\073\035\072\036\074\037" +
    "\114\040\uffb1\041\075\051\uffb1\052\uffb1\053\uffb1\055\uffb1" +
    "\056\uffb1\057\uffb1\102\107\001\002\000\036\004\045\005" +
    "\051\033\036\050\037\074\056\075\047\076\055\077\052" +
    "\103\041\104\043\105\053\106\033\107\060\110\035\001" +
    "\002\000\054\004\101\005\104\006\103\007\077\010\111" +
    "\011\102\012\066\023\113\024\071\025\110\026\106\027" +
    "\070\030\112\031\067\032\073\035\072\036\074\037\114" +
    "\041\075\055\122\102\107\001\002\000\070\004\uffb6\005" +
    "\uffb6\006\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6\023\uffb6" +
    "\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032" +
    "\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6\051\uffb6" +
    "\052\uffb6\053\uffb6\055\uffb6\056\uffb6\057\uffb6\102\uffb6\001" +
    "\002\000\070\004\101\005\104\006\103\007\077\010\111" +
    "\011\102\012\066\023\113\024\071\025\110\026\106\027" +
    "\070\030\112\031\067\032\073\035\072\036\074\037\114" +
    "\040\uffb2\041\075\051\uffb2\052\uffb2\053\uffb2\055\uffb2\056" +
    "\uffb2\057\uffb2\102\107\001\002\000\004\051\uffce\001\002" +
    "\000\070\004\uffb5\005\uffb5\006\uffb5\007\uffb5\010\uffb5\011" +
    "\uffb5\012\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5" +
    "\030\uffb5\031\uffb5\032\uffb5\035\uffb5\036\uffb5\037\uffb5\040" +
    "\uffb5\041\uffb5\051\uffb5\052\uffb5\053\uffb5\055\uffb5\056\uffb5" +
    "\057\uffb5\102\uffb5\001\002\000\070\004\101\005\104\006" +
    "\103\007\077\010\111\011\102\012\066\023\113\024\071" +
    "\025\110\026\106\027\070\030\112\031\067\032\073\035" +
    "\072\036\074\037\114\040\uffb4\041\075\051\uffb4\052\uffb4" +
    "\053\uffb4\055\uffb4\056\uffb4\057\uffb4\102\107\001\002\000" +
    "\054\004\101\005\104\006\103\007\077\010\111\011\102" +
    "\012\066\023\113\024\071\025\110\026\106\027\070\030" +
    "\112\031\067\032\073\035\072\036\074\037\114\041\075" +
    "\051\130\102\107\001\002\000\070\004\uffba\005\uffba\006" +
    "\uffba\007\uffba\010\uffba\011\uffba\012\uffba\023\uffba\024\uffba" +
    "\025\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba\035" +
    "\uffba\036\uffba\037\uffba\040\uffba\041\uffba\051\uffba\052\uffba" +
    "\053\uffba\055\uffba\056\uffba\057\uffba\102\uffba\001\002\000" +
    "\006\054\133\103\ufff1\001\002\000\004\103\ufff0\001\002" +
    "\000\036\004\045\005\051\033\036\050\037\074\056\075" +
    "\047\076\055\077\052\103\041\104\043\105\053\106\033" +
    "\107\060\110\035\001\002\000\054\004\101\005\104\006" +
    "\103\007\077\010\111\011\102\012\066\023\113\024\071" +
    "\025\110\026\106\027\070\030\112\031\067\032\073\035" +
    "\072\036\074\037\114\041\075\055\135\102\107\001\002" +
    "\000\006\054\133\103\uffe3\001\002\000\004\103\uffe4\001" +
    "\002\000\004\056\140\001\002\000\060\002\uffe5\042\uffe5" +
    "\043\uffe5\044\uffe5\045\uffe5\046\uffe5\052\uffe5\053\uffe5\056" +
    "\uffe5\062\uffe5\063\uffe5\064\uffe5\065\uffe5\070\uffe5\071\uffe5" +
    "\072\uffe5\073\uffe5\074\uffe5\075\uffe5\076\uffe5\077\uffe5\100" +
    "\uffe5\103\uffe5\001\002\000\004\002\001\001\002\000\010" +
    "\052\143\054\133\103\ufff1\001\002\000\022\042\012\043" +
    "\017\044\021\045\005\046\014\053\ufff8\063\022\064\020" +
    "\001\002\000\004\053\147\001\002\000\022\042\012\043" +
    "\017\044\021\045\005\046\014\053\ufff8\063\022\064\020" +
    "\001\002\000\004\053\ufff9\001\002\000\004\056\150\001" +
    "\002\000\024\002\ufffc\042\ufffc\043\ufffc\044\ufffc\045\ufffc" +
    "\046\ufffc\062\ufffc\063\ufffc\064\ufffc\001\002\000\004\103" +
    "\ufff2\001\002\000\024\002\ufff6\042\ufff6\043\ufff6\044\ufff6" +
    "\045\ufff6\046\ufff6\062\ufff6\063\ufff6\064\ufff6\001\002\000" +
    "\020\042\012\043\017\044\021\045\005\046\014\047\155" +
    "\063\022\001\002\000\004\103\157\001\002\000\004\103" +
    "\ufffa\001\002\000\004\103\ufffb\001\002\000\004\050\160" +
    "\001\002\000\020\042\012\043\017\044\021\045\005\046" +
    "\014\051\uffe9\063\022\001\002\000\004\051\uffea\001\002" +
    "\000\004\051\167\001\002\000\004\103\164\001\002\000" +
    "\006\051\uffe7\057\165\001\002\000\016\042\012\043\017" +
    "\044\021\045\005\046\014\063\022\001\002\000\004\051" +
    "\uffe8\001\002\000\004\052\170\001\002\000\046\042\012" +
    "\043\017\044\021\045\005\046\014\053\ufff4\063\022\064" +
    "\020\065\172\070\171\071\174\072\206\073\205\074\056" +
    "\075\047\076\055\077\052\103\203\001\002\000\054\004" +
    "\045\005\051\033\036\042\012\043\017\044\021\045\005" +
    "\046\014\050\037\063\022\064\020\074\056\075\047\076" +
    "\055\077\052\103\041\104\043\105\053\106\033\107\060" +
    "\110\035\001\002\000\036\004\045\005\051\033\036\050" +
    "\037\074\056\075\047\076\055\077\052\103\041\104\043" +
    "\105\053\106\033\107\060\110\035\001\002\000\052\042" +
    "\uffdd\043\uffdd\044\uffdd\045\uffdd\046\uffdd\052\uffdd\053\uffdd" +
    "\063\uffdd\064\uffdd\065\uffdd\070\uffdd\071\uffdd\072\uffdd\073" +
    "\uffdd\074\uffdd\075\uffdd\076\uffdd\077\uffdd\100\uffdd\103\uffdd" +
    "\001\002\000\004\052\270\001\002\000\052\042\uffd7\043" +
    "\uffd7\044\uffd7\045\uffd7\046\uffd7\052\uffd7\053\uffd7\063\uffd7" +
    "\064\uffd7\065\uffd7\070\uffd7\071\uffd7\072\uffd7\073\uffd7\074" +
    "\uffd7\075\uffd7\076\uffd7\077\uffd7\100\uffd7\103\uffd7\001\002" +
    "\000\052\042\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\052" +
    "\uffd9\053\uffd9\063\uffd9\064\uffd9\065\uffd9\070\uffd9\071\uffd9" +
    "\072\uffd9\073\uffd9\074\uffd9\075\uffd9\076\uffd9\077\uffd9\100" +
    "\uffd9\103\uffd9\001\002\000\052\042\uffdb\043\uffdb\044\uffdb" +
    "\045\uffdb\046\uffdb\052\uffdb\053\uffdb\063\uffdb\064\uffdb\065" +
    "\uffdb\070\uffdb\071\uffdb\072\uffdb\073\uffdb\074\uffdb\075\uffdb" +
    "\076\uffdb\077\uffdb\100\uffdb\103\uffdb\001\002\000\052\042" +
    "\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8\052\uffd8\053\uffd8" +
    "\063\uffd8\064\uffd8\065\uffd8\070\uffd8\071\uffd8\072\uffd8\073" +
    "\uffd8\074\uffd8\075\uffd8\076\uffd8\077\uffd8\100\uffd8\103\uffd8" +
    "\001\002\000\052\042\uffdc\043\uffdc\044\uffdc\045\uffdc\046" +
    "\uffdc\052\uffdc\053\uffdc\063\uffdc\064\uffdc\065\uffdc\070\uffdc" +
    "\071\uffdc\072\uffdc\073\uffdc\074\uffdc\075\uffdc\076\uffdc\077" +
    "\uffdc\100\uffdc\103\uffdc\001\002\000\004\056\267\001\002" +
    "\000\032\013\220\014\230\015\223\016\226\017\231\020" +
    "\227\021\217\022\224\034\264\041\222\050\uffd3\102\221" +
    "\001\002\000\052\042\uffde\043\uffde\044\uffde\045\uffde\046" +
    "\uffde\052\uffde\053\uffde\063\uffde\064\uffde\065\uffde\070\uffde" +
    "\071\uffde\072\uffde\073\uffde\074\uffde\075\uffde\076\uffde\077" +
    "\uffde\100\uffde\103\uffde\001\002\000\040\004\045\005\051" +
    "\033\036\050\037\056\262\074\056\075\047\076\055\077" +
    "\052\103\041\104\043\105\053\106\033\107\060\110\035" +
    "\001\002\000\036\004\045\005\051\033\036\050\037\074" +
    "\056\075\047\076\055\077\052\103\041\104\043\105\053" +
    "\106\033\107\060\110\035\001\002\000\004\053\244\001" +
    "\002\000\052\042\012\043\017\044\021\045\005\046\014" +
    "\052\ufff4\053\ufff4\063\022\064\020\065\172\070\171\071" +
    "\174\072\206\073\205\074\056\075\047\076\055\077\052" +
    "\100\ufff4\103\203\001\002\000\052\042\uffd6\043\uffd6\044" +
    "\uffd6\045\uffd6\046\uffd6\052\uffd6\053\uffd6\063\uffd6\064\uffd6" +
    "\065\uffd6\070\uffd6\071\uffd6\072\uffd6\073\uffd6\074\uffd6\075" +
    "\uffd6\076\uffd6\077\uffd6\100\uffd6\103\uffd6\001\002\000\006" +
    "\056\214\057\213\001\002\000\004\103\215\001\002\000" +
    "\052\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8\052\uffc8" +
    "\053\uffc8\063\uffc8\064\uffc8\065\uffc8\070\uffc8\071\uffc8\072" +
    "\uffc8\073\uffc8\074\uffc8\075\uffc8\076\uffc8\077\uffc8\100\uffc8" +
    "\103\uffc8\001\002\000\026\013\220\014\230\015\223\016" +
    "\226\017\231\020\227\021\217\022\224\041\222\102\221" +
    "\001\002\000\052\042\uffc9\043\uffc9\044\uffc9\045\uffc9\046" +
    "\uffc9\052\uffc9\053\uffc9\063\uffc9\064\uffc9\065\uffc9\070\uffc9" +
    "\071\uffc9\072\uffc9\073\uffc9\074\uffc9\075\uffc9\076\uffc9\077" +
    "\uffc9\100\uffc9\103\uffc9\001\002\000\036\004\uffbe\005\uffbe" +
    "\033\uffbe\050\uffbe\074\uffbe\075\uffbe\076\uffbe\077\uffbe\103" +
    "\uffbe\104\uffbe\105\uffbe\106\uffbe\107\uffbe\110\uffbe\001\002" +
    "\000\036\004\uffc4\005\uffc4\033\uffc4\050\uffc4\074\uffc4\075" +
    "\uffc4\076\uffc4\077\uffc4\103\uffc4\104\uffc4\105\uffc4\106\uffc4" +
    "\107\uffc4\110\uffc4\001\002\000\004\054\236\001\002\000" +
    "\004\103\233\001\002\000\036\004\uffc2\005\uffc2\033\uffc2" +
    "\050\uffc2\074\uffc2\075\uffc2\076\uffc2\077\uffc2\103\uffc2\104" +
    "\uffc2\105\uffc2\106\uffc2\107\uffc2\110\uffc2\001\002\000\036" +
    "\004\uffbd\005\uffbd\033\uffbd\050\uffbd\074\uffbd\075\uffbd\076" +
    "\uffbd\077\uffbd\103\uffbd\104\uffbd\105\uffbd\106\uffbd\107\uffbd" +
    "\110\uffbd\001\002\000\036\004\045\005\051\033\036\050" +
    "\037\074\056\075\047\076\055\077\052\103\041\104\043" +
    "\105\053\106\033\107\060\110\035\001\002\000\036\004" +
    "\uffc1\005\uffc1\033\uffc1\050\uffc1\074\uffc1\075\uffc1\076\uffc1" +
    "\077\uffc1\103\uffc1\104\uffc1\105\uffc1\106\uffc1\107\uffc1\110" +
    "\uffc1\001\002\000\036\004\uffbf\005\uffbf\033\uffbf\050\uffbf" +
    "\074\uffbf\075\uffbf\076\uffbf\077\uffbf\103\uffbf\104\uffbf\105" +
    "\uffbf\106\uffbf\107\uffbf\110\uffbf\001\002\000\036\004\uffc3" +
    "\005\uffc3\033\uffc3\050\uffc3\074\uffc3\075\uffc3\076\uffc3\077" +
    "\uffc3\103\uffc3\104\uffc3\105\uffc3\106\uffc3\107\uffc3\110\uffc3" +
    "\001\002\000\036\004\uffc0\005\uffc0\033\uffc0\050\uffc0\074" +
    "\uffc0\075\uffc0\076\uffc0\077\uffc0\103\uffc0\104\uffc0\105\uffc0" +
    "\106\uffc0\107\uffc0\110\uffc0\001\002\000\056\004\101\005" +
    "\104\006\103\007\077\010\111\011\102\012\066\023\113" +
    "\024\071\025\110\026\106\027\070\030\112\031\067\032" +
    "\073\035\072\036\074\037\114\041\075\056\uffc7\057\uffc7" +
    "\102\107\001\002\000\022\013\220\014\230\015\223\016" +
    "\226\017\231\020\227\021\217\022\224\001\002\000\036" +
    "\004\045\005\051\033\036\050\037\074\056\075\047\076" +
    "\055\077\052\103\041\104\043\105\053\106\033\107\060" +
    "\110\035\001\002\000\056\004\101\005\104\006\103\007" +
    "\077\010\111\011\102\012\066\023\113\024\071\025\110" +
    "\026\106\027\070\030\112\031\067\032\073\035\072\036" +
    "\074\037\114\041\075\056\uffc5\057\uffc5\102\107\001\002" +
    "\000\036\004\045\005\051\033\036\050\037\074\056\075" +
    "\047\076\055\077\052\103\041\104\043\105\053\106\033" +
    "\107\060\110\035\001\002\000\054\004\101\005\104\006" +
    "\103\007\077\010\111\011\102\012\066\023\113\024\071" +
    "\025\110\026\106\027\070\030\112\031\067\032\073\035" +
    "\072\036\074\037\114\041\075\055\240\102\107\001\002" +
    "\000\022\013\220\014\230\015\223\016\226\017\231\020" +
    "\227\021\217\022\224\001\002\000\036\004\045\005\051" +
    "\033\036\050\037\074\056\075\047\076\055\077\052\103" +
    "\041\104\043\105\053\106\033\107\060\110\035\001\002" +
    "\000\056\004\101\005\104\006\103\007\077\010\111\011" +
    "\102\012\066\023\113\024\071\025\110\026\106\027\070" +
    "\030\112\031\067\032\073\035\072\036\074\037\114\041" +
    "\075\056\uffc6\057\uffc6\102\107\001\002\000\010\052\ufff5" +
    "\053\ufff5\100\ufff5\001\002\000\024\002\ufffe\042\ufffe\043" +
    "\ufffe\044\ufffe\045\ufffe\046\ufffe\062\ufffe\063\ufffe\064\ufffe" +
    "\001\002\000\054\004\101\005\104\006\103\007\077\010" +
    "\111\011\102\012\066\023\113\024\071\025\110\026\106" +
    "\027\070\030\112\031\067\032\073\035\072\036\074\037" +
    "\114\041\075\053\246\102\107\001\002\000\004\100\uff8a" +
    "\001\002\000\004\100\250\001\002\000\040\004\045\005" +
    "\051\033\036\050\037\074\056\075\047\076\055\077\052" +
    "\101\253\103\041\104\043\105\053\106\033\107\060\110" +
    "\035\001\002\000\004\052\252\001\002\000\052\042\uff8c" +
    "\043\uff8c\044\uff8c\045\uff8c\046\uff8c\052\uff8c\053\uff8c\063" +
    "\uff8c\064\uff8c\065\uff8c\070\uff8c\071\uff8c\072\uff8c\073\uff8c" +
    "\074\uff8c\075\uff8c\076\uff8c\077\uff8c\100\uff8c\103\uff8c\001" +
    "\002\000\004\040\257\001\002\000\054\004\101\005\104" +
    "\006\103\007\077\010\111\011\102\012\066\023\113\024" +
    "\071\025\110\026\106\027\070\030\112\031\067\032\073" +
    "\035\072\036\074\037\114\040\255\041\075\102\107\001" +
    "\002\000\046\042\012\043\017\044\021\045\005\046\014" +
    "\063\022\064\020\065\172\070\171\071\174\072\206\073" +
    "\205\074\056\075\047\076\055\077\052\100\ufff4\103\203" +
    "\001\002\000\004\100\uff8b\001\002\000\046\042\012\043" +
    "\017\044\021\045\005\046\014\052\ufff4\063\022\064\020" +
    "\065\172\070\171\071\174\072\206\073\205\074\056\075" +
    "\047\076\055\077\052\103\203\001\002\000\004\052\uff89" +
    "\001\002\000\054\004\101\005\104\006\103\007\077\010" +
    "\111\011\102\012\066\023\113\024\071\025\110\026\106" +
    "\027\070\030\112\031\067\032\073\035\072\036\074\037" +
    "\114\041\075\056\263\102\107\001\002\000\052\042\uffcc" +
    "\043\uffcc\044\uffcc\045\uffcc\046\uffcc\052\uffcc\053\uffcc\063" +
    "\uffcc\064\uffcc\065\uffcc\070\uffcc\071\uffcc\072\uffcc\073\uffcc" +
    "\074\uffcc\075\uffcc\076\uffcc\077\uffcc\100\uffcc\103\uffcc\001" +
    "\002\000\052\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb" +
    "\052\uffcb\053\uffcb\063\uffcb\064\uffcb\065\uffcb\070\uffcb\071" +
    "\uffcb\072\uffcb\073\uffcb\074\uffcb\075\uffcb\076\uffcb\077\uffcb" +
    "\100\uffcb\103\uffcb\001\002\000\004\103\265\001\002\000" +
    "\004\056\266\001\002\000\052\042\uffca\043\uffca\044\uffca" +
    "\045\uffca\046\uffca\052\uffca\053\uffca\063\uffca\064\uffca\065" +
    "\uffca\070\uffca\071\uffca\072\uffca\073\uffca\074\uffca\075\uffca" +
    "\076\uffca\077\uffca\100\uffca\103\uffca\001\002\000\052\042" +
    "\uffda\043\uffda\044\uffda\045\uffda\046\uffda\052\uffda\053\uffda" +
    "\063\uffda\064\uffda\065\uffda\070\uffda\071\uffda\072\uffda\073" +
    "\uffda\074\uffda\075\uffda\076\uffda\077\uffda\100\uffda\103\uffda" +
    "\001\002\000\046\042\012\043\017\044\021\045\005\046" +
    "\014\053\ufff4\063\022\064\020\065\172\070\171\071\174" +
    "\072\206\073\205\074\056\075\047\076\055\077\052\103" +
    "\203\001\002\000\004\053\272\001\002\000\054\004\045" +
    "\005\051\033\036\042\012\043\017\044\021\045\005\046" +
    "\014\050\037\063\022\064\020\074\056\075\047\076\055" +
    "\077\052\103\041\104\043\105\053\106\033\107\060\110" +
    "\035\001\002\000\004\056\277\001\002\000\056\004\101" +
    "\005\104\006\103\007\077\010\111\011\102\012\066\023" +
    "\113\024\071\025\110\026\106\027\070\030\112\031\067" +
    "\032\073\035\072\036\074\037\114\041\075\052\uff94\056" +
    "\uff94\102\107\001\002\000\004\056\276\001\002\000\052" +
    "\042\uff95\043\uff95\044\uff95\045\uff95\046\uff95\052\uff95\053" +
    "\uff95\063\uff95\064\uff95\065\uff95\070\uff95\071\uff95\072\uff95" +
    "\073\uff95\074\uff95\075\uff95\076\uff95\077\uff95\100\uff95\103" +
    "\uff95\001\002\000\036\004\045\005\051\033\036\050\037" +
    "\074\056\075\047\076\055\077\052\103\041\104\043\105" +
    "\053\106\033\107\060\110\035\001\002\000\054\004\101" +
    "\005\104\006\103\007\077\010\111\011\102\012\066\023" +
    "\113\024\071\025\110\026\106\027\070\030\112\031\067" +
    "\032\073\035\072\036\074\037\114\041\075\056\301\102" +
    "\107\001\002\000\036\004\045\005\051\033\036\050\037" +
    "\074\056\075\047\076\055\077\052\103\041\104\043\105" +
    "\053\106\033\107\060\110\035\001\002\000\056\004\101" +
    "\005\104\006\103\007\077\010\111\011\102\012\066\023" +
    "\113\024\071\025\110\026\106\027\070\030\112\031\067" +
    "\032\073\035\072\036\074\037\114\041\075\052\uff93\056" +
    "\uff93\102\107\001\002\000\054\004\101\005\104\006\103" +
    "\007\077\010\111\011\102\012\066\023\113\024\071\025" +
    "\110\026\106\027\070\030\112\031\067\032\073\035\072" +
    "\036\074\037\114\041\075\052\304\102\107\001\002\000" +
    "\046\042\012\043\017\044\021\045\005\046\014\053\ufff4" +
    "\063\022\064\020\065\172\070\171\071\174\072\206\073" +
    "\205\074\056\075\047\076\055\077\052\103\203\001\002" +
    "\000\004\053\306\001\002\000\056\042\uff90\043\uff90\044" +
    "\uff90\045\uff90\046\uff90\052\uff90\053\uff90\063\uff90\064\uff90" +
    "\065\uff90\066\311\067\uff90\070\uff90\071\uff90\072\uff90\073" +
    "\uff90\074\uff90\075\uff90\076\uff90\077\uff90\100\uff90\103\uff90" +
    "\001\002\000\056\042\uff90\043\uff90\044\uff90\045\uff90\046" +
    "\uff90\052\uff90\053\uff90\063\uff90\064\uff90\065\uff90\066\311" +
    "\067\uff90\070\uff90\071\uff90\072\uff90\073\uff90\074\uff90\075" +
    "\uff90\076\uff90\077\uff90\100\uff90\103\uff90\001\002\000\054" +
    "\042\uff8d\043\uff8d\044\uff8d\045\uff8d\046\uff8d\052\uff8d\053" +
    "\uff8d\063\uff8d\064\uff8d\065\uff8d\067\317\070\uff8d\071\uff8d" +
    "\072\uff8d\073\uff8d\074\uff8d\075\uff8d\076\uff8d\077\uff8d\100" +
    "\uff8d\103\uff8d\001\002\000\036\004\045\005\051\033\036" +
    "\050\037\074\056\075\047\076\055\077\052\103\041\104" +
    "\043\105\053\106\033\107\060\110\035\001\002\000\054" +
    "\004\101\005\104\006\103\007\077\010\111\011\102\012" +
    "\066\023\113\024\071\025\110\026\106\027\070\030\112" +
    "\031\067\032\073\035\072\036\074\037\114\041\075\052" +
    "\313\102\107\001\002\000\046\042\012\043\017\044\021" +
    "\045\005\046\014\053\ufff4\063\022\064\020\065\172\070" +
    "\171\071\174\072\206\073\205\074\056\075\047\076\055" +
    "\077\052\103\203\001\002\000\004\053\315\001\002\000" +
    "\056\042\uff8f\043\uff8f\044\uff8f\045\uff8f\046\uff8f\052\uff8f" +
    "\053\uff8f\063\uff8f\064\uff8f\065\uff8f\066\uff8f\067\uff8f\070" +
    "\uff8f\071\uff8f\072\uff8f\073\uff8f\074\uff8f\075\uff8f\076\uff8f" +
    "\077\uff8f\100\uff8f\103\uff8f\001\002\000\052\042\uff92\043" +
    "\uff92\044\uff92\045\uff92\046\uff92\052\uff92\053\uff92\063\uff92" +
    "\064\uff92\065\uff92\070\uff92\071\uff92\072\uff92\073\uff92\074" +
    "\uff92\075\uff92\076\uff92\077\uff92\100\uff92\103\uff92\001\002" +
    "\000\004\052\320\001\002\000\046\042\012\043\017\044" +
    "\021\045\005\046\014\053\ufff4\063\022\064\020\065\172" +
    "\070\171\071\174\072\206\073\205\074\056\075\047\076" +
    "\055\077\052\103\203\001\002\000\004\053\322\001\002" +
    "\000\052\042\uff8e\043\uff8e\044\uff8e\045\uff8e\046\uff8e\052" +
    "\uff8e\053\uff8e\063\uff8e\064\uff8e\065\uff8e\070\uff8e\071\uff8e" +
    "\072\uff8e\073\uff8e\074\uff8e\075\uff8e\076\uff8e\077\uff8e\100" +
    "\uff8e\103\uff8e\001\002\000\054\042\uff91\043\uff91\044\uff91" +
    "\045\uff91\046\uff91\052\uff91\053\uff91\063\uff91\064\uff91\065" +
    "\uff91\067\uff91\070\uff91\071\uff91\072\uff91\073\uff91\074\uff91" +
    "\075\uff91\076\uff91\077\uff91\100\uff91\103\uff91\001\002\000" +
    "\004\052\325\001\002\000\046\042\012\043\017\044\021" +
    "\045\005\046\014\053\ufff4\063\022\064\020\065\172\070" +
    "\171\071\174\072\206\073\205\074\056\075\047\076\055" +
    "\077\052\103\203\001\002\000\004\053\327\001\002\000" +
    "\052\042\uff96\043\uff96\044\uff96\045\uff96\046\uff96\052\uff96" +
    "\053\uff96\063\uff96\064\uff96\065\uff96\070\uff96\071\uff96\072" +
    "\uff96\073\uff96\074\uff96\075\uff96\076\uff96\077\uff96\100\uff96" +
    "\103\uff96\001\002\000\006\060\331\103\ufffa\001\002\000" +
    "\004\050\332\001\002\000\004\046\333\001\002\000\004" +
    "\054\334\001\002\000\004\055\335\001\002\000\004\061" +
    "\336\001\002\000\004\051\337\001\002\000\004\052\340" +
    "\001\002\000\046\042\012\043\017\044\021\045\005\046" +
    "\014\053\ufff4\063\022\064\020\065\172\070\171\071\174" +
    "\072\206\073\205\074\056\075\047\076\055\077\052\103" +
    "\203\001\002\000\004\053\342\001\002\000\024\002\ufff7" +
    "\042\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7\062\ufff7\063" +
    "\ufff7\064\ufff7\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\341\000\016\003\006\005\010\006\015\011\007\047" +
    "\014\050\003\001\001\000\016\003\006\005\010\006\015" +
    "\011\007\047\342\050\003\001\001\000\002\001\001\000" +
    "\010\004\153\005\010\006\155\001\001\000\012\005\010" +
    "\006\015\011\007\050\151\001\001\000\002\001\001\000" +
    "\004\051\150\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\136\001" +
    "\001\000\002\001\001\000\006\005\010\006\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\024\001" +
    "\001\000\004\013\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\017\037\020\056\026\041\027\043\030" +
    "\033\031\053\032\047\034\045\001\001\000\002\001\001" +
    "\000\004\012\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\017\037\020\056\026\126\027\043\030\033\031" +
    "\053\032\047\034\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\033\104\035\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\017\037" +
    "\020\056\026\125\027\043\030\033\031\053\032\047\034" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\017\037\020\056\021\063\026" +
    "\062\027\043\030\033\031\053\032\047\034\045\001\001" +
    "\000\002\001\001\000\006\033\104\035\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\017\037\020" +
    "\056\021\123\026\062\027\043\030\033\031\053\032\047" +
    "\034\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\017\037\020\056" +
    "\026\122\027\043\030\033\031\053\032\047\034\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\017\037\020\056\026\114\027\043\030\033\031\053" +
    "\032\047\034\045\001\001\000\006\033\104\035\075\001" +
    "\001\000\022\017\037\020\056\026\116\027\043\030\033" +
    "\031\053\032\047\034\045\001\001\000\006\033\104\035" +
    "\075\001\001\000\022\017\037\020\056\026\120\027\043" +
    "\030\033\031\053\032\047\034\045\001\001\000\006\033" +
    "\104\035\075\001\001\000\002\001\001\000\006\033\104" +
    "\035\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\033\104\035\075\001\001\000\006\033\104\035\075" +
    "\001\001\000\002\001\001\000\004\051\131\001\001\000" +
    "\002\001\001\000\022\017\037\020\056\026\133\027\043" +
    "\030\033\031\053\032\047\034\045\001\001\000\006\033" +
    "\104\035\075\001\001\000\004\051\135\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\051\131\001\001\000\012\005\010\006\015" +
    "\011\144\052\143\001\001\000\002\001\001\000\012\005" +
    "\010\006\015\011\144\052\145\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\153\005\010\006\155\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\010\006\162\007\161\010\160" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\010\006\162\010\165" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\002" +
    "\206\005\010\006\015\011\177\014\211\015\207\016\203" +
    "\017\201\020\056\022\175\023\210\024\174\036\172\040" +
    "\200\044\176\001\001\000\032\005\010\006\015\011\272" +
    "\017\037\020\056\026\273\027\043\030\033\031\053\032" +
    "\047\034\045\037\323\001\001\000\022\017\037\020\056" +
    "\026\302\027\043\030\033\031\053\032\047\034\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\224\001\001" +
    "\000\002\001\001\000\022\017\037\020\056\026\260\027" +
    "\043\030\033\031\053\032\047\034\045\001\001\000\022" +
    "\017\037\020\056\026\244\027\043\030\033\031\053\032" +
    "\047\034\045\001\001\000\002\001\001\000\040\002\242" +
    "\005\010\006\015\011\177\014\211\015\207\016\203\017" +
    "\201\020\056\022\175\023\210\024\174\036\172\040\200" +
    "\044\176\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\211\024\215\001\001\000\002\001\001\000\004" +
    "\025\224\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\017\037\020\056\026" +
    "\231\027\043\030\033\031\053\032\047\034\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\033\104\035\075\001\001\000\004" +
    "\025\233\001\001\000\022\017\037\020\056\026\234\027" +
    "\043\030\033\031\053\032\047\034\045\001\001\000\006" +
    "\033\104\035\075\001\001\000\022\017\037\020\056\026" +
    "\236\027\043\030\033\031\053\032\047\034\045\001\001" +
    "\000\006\033\104\035\075\001\001\000\004\025\240\001" +
    "\001\000\022\017\037\020\056\026\241\027\043\030\033" +
    "\031\053\032\047\034\045\001\001\000\006\033\104\035" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\033\104\035\075\001\001\000\004\045\246\001\001\000" +
    "\004\046\250\001\001\000\022\017\037\020\056\026\253" +
    "\027\043\030\033\031\053\032\047\034\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\033\104\035\075\001\001\000\040\002\255\005\010\006" +
    "\015\011\177\014\211\015\207\016\203\017\201\020\056" +
    "\022\175\023\210\024\174\036\172\040\200\044\176\001" +
    "\001\000\002\001\001\000\040\002\257\005\010\006\015" +
    "\011\177\014\211\015\207\016\203\017\201\020\056\022" +
    "\175\023\210\024\174\036\172\040\200\044\176\001\001" +
    "\000\002\001\001\000\006\033\104\035\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\002" +
    "\270\005\010\006\015\011\177\014\211\015\207\016\203" +
    "\017\201\020\056\022\175\023\210\024\174\036\172\040" +
    "\200\044\176\001\001\000\002\001\001\000\032\005\010" +
    "\006\015\011\272\017\037\020\056\026\273\027\043\030" +
    "\033\031\053\032\047\034\045\037\274\001\001\000\002" +
    "\001\001\000\006\033\104\035\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\017\037\020\056\026\277" +
    "\027\043\030\033\031\053\032\047\034\045\001\001\000" +
    "\006\033\104\035\075\001\001\000\022\017\037\020\056" +
    "\026\301\027\043\030\033\031\053\032\047\034\045\001" +
    "\001\000\006\033\104\035\075\001\001\000\006\033\104" +
    "\035\075\001\001\000\040\002\304\005\010\006\015\011" +
    "\177\014\211\015\207\016\203\017\201\020\056\022\175" +
    "\023\210\024\174\036\172\040\200\044\176\001\001\000" +
    "\002\001\001\000\006\041\307\042\306\001\001\000\006" +
    "\041\322\042\306\001\001\000\004\043\315\001\001\000" +
    "\022\017\037\020\056\026\311\027\043\030\033\031\053" +
    "\032\047\034\045\001\001\000\006\033\104\035\075\001" +
    "\001\000\040\002\313\005\010\006\015\011\177\014\211" +
    "\015\207\016\203\017\201\020\056\022\175\023\210\024" +
    "\174\036\172\040\200\044\176\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\002\320\005\010\006\015\011\177\014\211\015\207" +
    "\016\203\017\201\020\056\022\175\023\210\024\174\036" +
    "\172\040\200\044\176\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\002" +
    "\325\005\010\006\015\011\177\014\211\015\207\016\203" +
    "\017\201\020\056\022\175\023\210\024\174\036\172\040" +
    "\200\044\176\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\002\340\005\010\006" +
    "\015\011\177\014\211\015\207\016\203\017\201\020\056" +
    "\022\175\023\210\024\174\036\172\040\200\044\176\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 
    ComplexSymbol s = (ComplexSymbol) getScanner().next_token();
    return s;

    }



    private HashMap<String, Double>tsymbols = new HashMap<>();

    public Double getSymbolValue(String id) {
         return tsymbols.get(id);
    }

    public void addSymbol(String id, Double value) {
        if (tsymbols.get(id) == null) {
            tsymbols.put(id, value);
        } else {
            tsymbols.replace(id, value);
        }
    }

    /**********************************************************************
     * sobrecàrrega de mètodes per gestionar els errors que es localitzin *
     **********************************************************************/

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
    **/ 
    @Override
    public void unrecovered_syntax_error(Symbol cur_token) { 
        String causa = "" + cur_token.value;
        if (cur_token.sym == ParserSym.EOF) {
            causa = "No se ha encontrado metodo main. Sintaxis: \n"+
                "f void inicio(string[]argumentos){ # codigo # }\n";
        }
        System.err.println("No se ha podido recuperar del ultimo error. \nCausa: " + causa);
        done_parsing();
    }  

    /**
     * Método al que se llama automáticamente ante algún error sintactico.
    **/ 
    @Override
    public void syntax_error(Symbol cur_token){ 
        
        report_error("Error sintactico: ", cur_token);
    } 

    @Override
    public void report_error(String message, Object info) {
        if (cur_token.sym == ParserSym.EOF) {
            return;
        }
        if (info instanceof ComplexSymbol token) {
            List expected = expected_token_ids();
            String tokens = "";
            for (Object t : expected){
                tokens += ParserSym.terminalNames[(int)t] + ", ";
            }
            if (!tokens.isEmpty()) {
                tokens = "Se esperaba algun lexema de los siguientes tipos: " + tokens.substring(0, tokens.length() - 2) + ".\n";
            }
            System.err.println(message + "Desde la linea " + token.xleft.getLine() + " y columna " + token.xleft.getColumn() + " hasta la linea " + token.xright.getLine() + " y columna " + token.xright.getColumn() + ". \n"
                    + tokens + "Se ha encontrado '" + token.value + "' de tipo " + ParserSym.terminalNames[token.sym] + ".\n");  
        } else {
            System.err.println(message + "No se esperaba este componente\n: " +cur_token.value+".");  
        }
    }

    @Override
    public void report_fatal_error(String message, Object info) throws Exception {
        report_error("Error fatal: " + message, info);
        done_parsing();
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= SCRIPT EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolScript start_val = (SymbolScript)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // SCRIPT ::= SCRIPT_ELEMENTO SCRIPT 
            {
              SymbolScript RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolScriptElemento et1 = (SymbolScriptElemento)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolScript et2 = (SymbolScript)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolScript(et1, et2, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SCRIPT",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SCRIPT ::= MAIN 
            {
              SymbolScript RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolMain et = (SymbolMain)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolScript(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SCRIPT",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SCRIPT_ELEMENTO ::= KW_METHOD TIPO_RETORNO ID LPAREN PARAMS RPAREN LKEY BODY RKEY 
            {
              SymbolScriptElemento RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).xright;
		Object et1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xright;
		SymbolTipoRetorno et2 = (SymbolTipoRetorno)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		Location et3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location et3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		String et3 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location et4xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location et4xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		SymbolParams et4 = (SymbolParams)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location et5xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et5xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolBody et5 = (SymbolBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolScriptElemento(et2, et3, et4, et5, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SCRIPT_ELEMENTO",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SCRIPT_ELEMENTO ::= DECS 
            {
              SymbolScriptElemento RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolDecs et = (SymbolDecs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolScriptElemento(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SCRIPT_ELEMENTO",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SCRIPT_ELEMENTO ::= KW_TUPLE ID LKEY MIEMBROS_TUPLA RKEY ENDINSTR 
            {
              SymbolScriptElemento RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Object et1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String et2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location et3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location et3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolMiembrosTupla et3 = (SymbolMiembrosTupla)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new SymbolScriptElemento(et2, et3, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SCRIPT_ELEMENTO",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // TIPO_RETORNO ::= TIPO 
            {
              SymbolTipoRetorno RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolTipo et = (SymbolTipo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolTipoRetorno(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_RETORNO",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TIPO_RETORNO ::= KW_VOID 
            {
              SymbolTipoRetorno RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolTipoRetorno(etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_RETORNO",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MIEMBROS_TUPLA ::= DECS MIEMBROS_TUPLA 
            {
              SymbolMiembrosTupla RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolDecs et1 = (SymbolDecs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolMiembrosTupla et2 = (SymbolMiembrosTupla)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new SymbolMiembrosTupla(et1,et2, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MIEMBROS_TUPLA",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MIEMBROS_TUPLA ::= 
            {
              SymbolMiembrosTupla RESULT =null;
		  RESULT = new SymbolMiembrosTupla(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MIEMBROS_TUPLA",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MAIN ::= KW_METHOD KW_VOID KW_MAIN LPAREN KW_STRING LBRACKET RBRACKET KW_ARGS RPAREN LKEY BODY RKEY 
            {
              SymbolMain RESULT =null;
		Location posxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).xleft;
		Location posxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).xright;
		Object pos = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		Location nombrexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).xleft;
		Location nombrexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).xright;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		Location argsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location argsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object args = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolBody et = (SymbolBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolMain(nombre, args, et, posxleft, posxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MAIN ::= MAIN SCRIPT_ELEMENTO 
            {
              SymbolMain RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolMain et1 = (SymbolMain)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolScriptElemento et2 = (SymbolScriptElemento)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolMain(et1,et2, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BODY ::= METODO_ELEMENTO BODY 
            {
              SymbolBody RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolMetodoElemento et1 = (SymbolMetodoElemento)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolBody et2 = (SymbolBody)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBody(et1, et2, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BODY",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BODY ::= 
            {
              SymbolBody RESULT =null;
		 RESULT = new SymbolBody(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BODY",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TIPO ::= TIPO_PRIMITIVO 
            {
              SymbolTipo RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolTipoPrimitivo t = (SymbolTipoPrimitivo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolTipo(t, txleft, txright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TIPO ::= TIPO_PRIMITIVO DIMENSIONES 
            {
              SymbolTipo RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolTipoPrimitivo t = (SymbolTipoPrimitivo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolDimensiones d = (SymbolDimensiones)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolTipo(t, d, txleft, txright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TIPO ::= KW_TUPLE ID 
            {
              SymbolTipo RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolTipo(i, txleft, txright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TIPO ::= KW_TUPLE ID DIMENSIONES 
            {
              SymbolTipo RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolDimensiones d = (SymbolDimensiones)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolTipo(i, d, txleft, txright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TIPO_PRIMITIVO ::= KW_BOOL 
            {
              SymbolTipoPrimitivo RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolTipoPrimitivo(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_PRIMITIVO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TIPO_PRIMITIVO ::= KW_INT 
            {
              SymbolTipoPrimitivo RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolTipoPrimitivo(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_PRIMITIVO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TIPO_PRIMITIVO ::= KW_DOUBLE 
            {
              SymbolTipoPrimitivo RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolTipoPrimitivo(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_PRIMITIVO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TIPO_PRIMITIVO ::= KW_CHAR 
            {
              SymbolTipoPrimitivo RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolTipoPrimitivo(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_PRIMITIVO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TIPO_PRIMITIVO ::= KW_STRING 
            {
              SymbolTipoPrimitivo RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolTipoPrimitivo(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_PRIMITIVO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PARAMS ::= PARAMSLISTA 
            {
              SymbolParams RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolParamsLista et = (SymbolParamsLista)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolParams(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PARAMS ::= 
            {
              SymbolParams RESULT =null;
		 RESULT = new SymbolParams(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PARAMSLISTA ::= TIPO ID COMMA PARAMSLISTA 
            {
              SymbolParamsLista RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		SymbolTipo et1 = (SymbolTipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolParamsLista et2 = (SymbolParamsLista)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolParamsLista(et1, et2, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMSLISTA",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PARAMSLISTA ::= TIPO ID 
            {
              SymbolParamsLista RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolTipo et = (SymbolTipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolParamsLista(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMSLISTA",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECS ::= KW_CONST TIPO DEC_ASIG_LISTA ENDINSTR 
            {
              SymbolDecs RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object et1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolTipo et2 = (SymbolTipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location et3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolDecAsigLista et3 = (SymbolDecAsigLista)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolDecs(true,et2,et3, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECS ::= TIPO DEC_ASIG_LISTA ENDINSTR 
            {
              SymbolDecs RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolTipo et1 = (SymbolTipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolDecAsigLista et2 = (SymbolDecAsigLista)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolDecs(false, et1,et2, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DIMENSIONES ::= LBRACKET OPERAND RBRACKET DIMENSIONES 
            {
              SymbolDimensiones RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolOperand et1 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolDimensiones et2 = (SymbolDimensiones)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolDimensiones(et1,et2, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DIMENSIONES",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DIMENSIONES ::= LBRACKET OPERAND RBRACKET 
            {
              SymbolDimensiones RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolOperand et1 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolDimensiones(et1, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DIMENSIONES",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DEC_ASIG_LISTA ::= ID ASIG_BASICO COMMA DEC_ASIG_LISTA 
            {
              SymbolDecAsigLista RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String et1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolAsigBasico et2 = (SymbolAsigBasico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location et3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location et3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolDecAsigLista et3 = (SymbolDecAsigLista)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolDecAsigLista(et1,et2,et3, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEC_ASIG_LISTA",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DEC_ASIG_LISTA ::= ID ASIG_BASICO 
            {
              SymbolDecAsigLista RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String et1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolAsigBasico et2 = (SymbolAsigBasico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolDecAsigLista(et1,et2, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEC_ASIG_LISTA",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ASIG_BASICO ::= AS_ASSIGN OPERAND 
            {
              SymbolAsigBasico RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolOperand et = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsigBasico(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG_BASICO",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ASIG_BASICO ::= 
            {
              SymbolAsigBasico RESULT =null;
		 RESULT = new SymbolAsigBasico(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG_BASICO",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // METODO_ELEMENTO ::= INSTR 
            {
              SymbolMetodoElemento RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolInstr et = (SymbolInstr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolMetodoElemento(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METODO_ELEMENTO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // METODO_ELEMENTO ::= LOOP 
            {
              SymbolMetodoElemento RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolLoop et = (SymbolLoop)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolMetodoElemento(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METODO_ELEMENTO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // METODO_ELEMENTO ::= IF 
            {
              SymbolMetodoElemento RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolIf et = (SymbolIf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolMetodoElemento(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METODO_ELEMENTO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // METODO_ELEMENTO ::= SWITCH 
            {
              SymbolMetodoElemento RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolSwitch et = (SymbolSwitch)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolMetodoElemento(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METODO_ELEMENTO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INSTR ::= FCALL ENDINSTR 
            {
              SymbolInstr RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolFCall et = (SymbolFCall)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolInstr(et,etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTR",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INSTR ::= RETURN 
            {
              SymbolInstr RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolReturn et = (SymbolReturn)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolInstr(et,etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTR",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INSTR ::= DECS 
            {
              SymbolInstr RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolDecs et = (SymbolDecs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolInstr(et,etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTR",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INSTR ::= ASIGS 
            {
              SymbolInstr RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolAsigs et = (SymbolAsigs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolInstr(et,etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTR",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // INSTR ::= SWAP 
            {
              SymbolInstr RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolSwap et = (SymbolSwap)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolInstr(et,etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTR",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FCALL ::= METODO_NOMBRE LPAREN OPERANDS_LISTA RPAREN 
            {
              SymbolFCall RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		SymbolMetodoNombre et1 = (SymbolMetodoNombre)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolOperandsLista et2 = (SymbolOperandsLista)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolFCall(et1, et2, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FCALL",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FCALL ::= METODO_NOMBRE LPAREN RPAREN 
            {
              SymbolFCall RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolMetodoNombre et1 = (SymbolMetodoNombre)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new SymbolFCall(et1, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FCALL",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // METODO_NOMBRE ::= ID 
            {
              SymbolMetodoNombre RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String et = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolMetodoNombre(null, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METODO_NOMBRE",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // METODO_NOMBRE ::= KW_IN 
            {
              SymbolMetodoNombre RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolMetodoNombre(ParserSym.KW_IN, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METODO_NOMBRE",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // METODO_NOMBRE ::= KW_OUT 
            {
              SymbolMetodoNombre RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolMetodoNombre(ParserSym.KW_OUT, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METODO_NOMBRE",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // METODO_NOMBRE ::= KW_WRITE 
            {
              SymbolMetodoNombre RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolMetodoNombre(ParserSym.KW_WRITE, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METODO_NOMBRE",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // METODO_NOMBRE ::= KW_READ 
            {
              SymbolMetodoNombre RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolMetodoNombre(ParserSym.KW_READ, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METODO_NOMBRE",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPERANDS_LISTA ::= OPERAND COMMA OPERANDS_LISTA 
            {
              SymbolOperandsLista RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolOperand et = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location olxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location olxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolOperandsLista ol = (SymbolOperandsLista)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOperandsLista(et, ol, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERANDS_LISTA",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPERANDS_LISTA ::= OPERAND 
            {
              SymbolOperandsLista RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolOperand et = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOperandsLista(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERANDS_LISTA",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // RETURN ::= KW_RETURN ENDINSTR 
            {
              SymbolReturn RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // RETURN ::= KW_RETURN OPERAND ENDINSTR 
            {
              SymbolReturn RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolOperand et = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolReturn(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SWAP ::= ID OP_SWAP ID ENDINSTR 
            {
              SymbolSwap RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String et1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String et2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolSwap(et1, et2, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWAP",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ASIGS ::= ASIG COMMA ASIGS 
            {
              SymbolAsigs RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolAsig et1 = (SymbolAsig)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolAsigs et2 = (SymbolAsigs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsigs(et1, et2, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGS",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ASIGS ::= ASIG ENDINSTR 
            {
              SymbolAsigs RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolAsig et = (SymbolAsig)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolAsigs(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGS",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ASIG ::= ID ASIG_OP OPERAND 
            {
              SymbolAsig RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String et = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location aopxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location aopxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolAsigOp aop = (SymbolAsigOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolOperand val = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsig(et, aop, val, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ASIG ::= ID AUX_MEMBER LBRACKET OPERAND RBRACKET ASIG_OP OPERAND 
            {
              SymbolAsig RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		String et1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		SymbolOperand et2 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location aopxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location aopxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolAsigOp aop = (SymbolAsigOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolOperand val = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsig(et1, et2, aop, val, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ASIG ::= ID OP_MEMBER ID ASIG_OP OPERAND 
            {
              SymbolAsig RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String et1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String et2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location aopxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location aopxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolAsigOp aop = (SymbolAsigOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolOperand val = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsig(et1, et2, aop, val, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ASIG_OP ::= AS_ASSIGN 
            {
              SymbolAsigOp RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsigOp(ParserSym.AS_ASSIGN, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG_OP",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ASIG_OP ::= AS_ADDA 
            {
              SymbolAsigOp RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsigOp(ParserSym.AS_ADDA, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG_OP",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ASIG_OP ::= AS_SUBA 
            {
              SymbolAsigOp RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsigOp(ParserSym.AS_SUBA, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG_OP",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ASIG_OP ::= AS_MULA 
            {
              SymbolAsigOp RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsigOp(ParserSym.AS_MULA, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG_OP",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ASIG_OP ::= AS_DIVA 
            {
              SymbolAsigOp RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsigOp(ParserSym.AS_DIVA, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG_OP",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ASIG_OP ::= AS_POTA 
            {
              SymbolAsigOp RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsigOp(ParserSym.AS_POTA, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG_OP",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ASIG_OP ::= AS_ANDA 
            {
              SymbolAsigOp RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsigOp(ParserSym.AS_ANDA, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG_OP",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ASIG_OP ::= AS_ORA 
            {
              SymbolAsigOp RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsigOp(ParserSym.AS_ORA, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG_OP",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPERAND ::= ATOMIC_EXPRESSION 
            {
              SymbolOperand RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolAtomicExpression et = (SymbolAtomicExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOperand(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPERAND ::= FCALL 
            {
              SymbolOperand RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolFCall et = (SymbolFCall)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOperand(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPERAND ::= LPAREN OPERAND RPAREN 
            {
              SymbolOperand RESULT =null;
		Location posxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location posxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object pos = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolOperand et = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolOperand(et, posxleft, posxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OPERAND ::= UNARY_EXPRESSION 
            {
              SymbolOperand RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolUnaryExpression et = (SymbolUnaryExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOperand(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OPERAND ::= BINARY_EXPRESSION 
            {
              SymbolOperand RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolBinaryExpression et = (SymbolBinaryExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOperand(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OPERAND ::= CONDITIONAL_EXPRESSION 
            {
              SymbolOperand RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolConditionalExpression et = (SymbolConditionalExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOperand(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OPERAND ::= OPERAND AUX_MEMBER LBRACKET OPERAND RBRACKET 
            {
              SymbolOperand RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		SymbolOperand et1 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolOperand et2 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolOperand(et1, et2, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OPERAND ::= OPERAND OP_MEMBER ID 
            {
              SymbolOperand RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolOperand et1 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String et2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOperand(et1, et2, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // UNARY_EXPRESSION ::= L_UNARY_OPERATOR OPERAND 
            {
              SymbolUnaryExpression RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolLUnaryOperator et1 = (SymbolLUnaryOperator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolOperand et2 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolUnaryExpression(et1, et2, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNARY_EXPRESSION",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // UNARY_EXPRESSION ::= OPERAND R_UNARY_OPERATOR 
            {
              SymbolUnaryExpression RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolOperand et1 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolRUnaryOperator et2 = (SymbolRUnaryOperator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolUnaryExpression(et1, et2, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNARY_EXPRESSION",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // BINARY_EXPRESSION ::= OPERAND BINARY_OPERATOR OPERAND 
            {
              SymbolBinaryExpression RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolOperand et1 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolBinaryOperator et2 = (SymbolBinaryOperator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location et3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location et3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolOperand et3 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryExpression(et1, et2, et3, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_EXPRESSION",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CONDITIONAL_EXPRESSION ::= OPERAND OP_COND OPERAND ARROW OPERAND 
            {
              SymbolConditionalExpression RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		SymbolOperand et1 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolOperand et2 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location et3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location et3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolOperand et3 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolConditionalExpression(et1, et2, et3, et1xleft, et1xright);; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDITIONAL_EXPRESSION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ATOMIC_EXPRESSION ::= ID 
            {
              SymbolAtomicExpression RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String et = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAtomicExpression(true, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATOMIC_EXPRESSION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ATOMIC_EXPRESSION ::= STRING 
            {
              SymbolAtomicExpression RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String et = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAtomicExpression(false, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATOMIC_EXPRESSION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ATOMIC_EXPRESSION ::= BOOL 
            {
              SymbolAtomicExpression RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Boolean et = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAtomicExpression(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATOMIC_EXPRESSION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ATOMIC_EXPRESSION ::= INT 
            {
              SymbolAtomicExpression RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer et = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAtomicExpression(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATOMIC_EXPRESSION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ATOMIC_EXPRESSION ::= DOUBLE 
            {
              SymbolAtomicExpression RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Double et = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAtomicExpression(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATOMIC_EXPRESSION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ATOMIC_EXPRESSION ::= CHAR 
            {
              SymbolAtomicExpression RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Character et = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAtomicExpression(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATOMIC_EXPRESSION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // BINARY_OPERATOR ::= OP_ADD 
            {
              SymbolBinaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_ADD, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // BINARY_OPERATOR ::= OP_SUB 
            {
              SymbolBinaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_SUB, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // BINARY_OPERATOR ::= OP_MUL 
            {
              SymbolBinaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_MUL, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // BINARY_OPERATOR ::= OP_DIV 
            {
              SymbolBinaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_DIV, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // BINARY_OPERATOR ::= OP_MOD 
            {
              SymbolBinaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_MOD, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // BINARY_OPERATOR ::= OP_POT 
            {
              SymbolBinaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_POT, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // BINARY_OPERATOR ::= OP_EQ 
            {
              SymbolBinaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_EQ, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // BINARY_OPERATOR ::= OP_BEQ 
            {
              SymbolBinaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_BEQ, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // BINARY_OPERATOR ::= OP_BT 
            {
              SymbolBinaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_BT, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // BINARY_OPERATOR ::= OP_LEQ 
            {
              SymbolBinaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_LEQ, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // BINARY_OPERATOR ::= OP_LT 
            {
              SymbolBinaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_LT, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // BINARY_OPERATOR ::= OP_NEQ 
            {
              SymbolBinaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_NEQ, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // BINARY_OPERATOR ::= OP_AND 
            {
              SymbolBinaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_AND, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // BINARY_OPERATOR ::= OP_OR 
            {
              SymbolBinaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_OR, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // L_UNARY_OPERATOR ::= OP_NOT 
            {
              SymbolLUnaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolLUnaryOperator(ParserSym.OP_NOT, et , etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("L_UNARY_OPERATOR",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // L_UNARY_OPERATOR ::= OP_INC 
            {
              SymbolLUnaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolLUnaryOperator(ParserSym.OP_INC, et , etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("L_UNARY_OPERATOR",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // L_UNARY_OPERATOR ::= OP_DEC 
            {
              SymbolLUnaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolLUnaryOperator(ParserSym.OP_DEC, et , etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("L_UNARY_OPERATOR",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // R_UNARY_OPERATOR ::= OP_PCT 
            {
              SymbolRUnaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolRUnaryOperator(ParserSym.OP_PCT, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R_UNARY_OPERATOR",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // R_UNARY_OPERATOR ::= OP_INC 
            {
              SymbolRUnaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolRUnaryOperator(ParserSym.OP_INC, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R_UNARY_OPERATOR",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // R_UNARY_OPERATOR ::= OP_DEC 
            {
              SymbolRUnaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolRUnaryOperator(ParserSym.OP_DEC, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R_UNARY_OPERATOR",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // LOOP ::= KW_LOOP LOOP_COND LKEY BODY RKEY 
            {
              SymbolLoop RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object et1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		SymbolLoopCond et2 = (SymbolLoopCond)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location et3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolBody et3 = (SymbolBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolLoop(et2, et3, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOP",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // LOOP ::= KW_DO LKEY BODY RKEY LOOP_COND ENDINSTR 
            {
              SymbolLoop RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Object et1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		SymbolBody et2 = (SymbolBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location et3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolLoopCond et3 = (SymbolLoopCond)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolLoop(et2, et3, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOP",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // LOOP_COND ::= OPERAND 
            {
              SymbolLoopCond RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolOperand et = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolLoopCond(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOP_COND",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // LOOP_COND ::= DECS ENDINSTR OPERAND ENDINSTR OPERAND 
            {
              SymbolLoopCond RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		SymbolDecs et1 = (SymbolDecs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolOperand et2 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location et3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location et3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolOperand et3 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolLoopCond(et1, et2, et3, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOP_COND",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // IF ::= KW_IF OPERAND LKEY BODY RKEY ELIFS ELSE 
            {
              SymbolIf RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		SymbolOperand et1 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		SymbolBody et2 = (SymbolBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location et3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolElifs et3 = (SymbolElifs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location et4xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location et4xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolElse et4 = (SymbolElse)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolIf(et1, et2, et3, et4, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ELIFS ::= ELIF ELIFS 
            {
              SymbolElifs RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolElif et1 = (SymbolElif)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolElifs et2 = (SymbolElifs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolElifs(et1, et2, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELIFS",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ELIFS ::= 
            {
              SymbolElifs RESULT =null;
		 RESULT = new SymbolElifs(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELIFS",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ELIF ::= KW_ELIF OPERAND LKEY BODY RKEY 
            {
              SymbolElif RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		SymbolOperand et1 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolBody et2 = (SymbolBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolElif(et1, et2, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELIF",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ELSE ::= KW_ELSE LKEY BODY RKEY 
            {
              SymbolElse RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolBody et = (SymbolBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolElse(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ELSE ::= 
            {
              SymbolElse RESULT =null;
		 RESULT = new SymbolElse(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // SWITCH ::= KW_SWITCH OPERAND RKEY CASO PRED LKEY 
            {
              SymbolSwitch RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		SymbolOperand et1 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolCaso et2 = (SymbolCaso)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location et3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolPred et3 = (SymbolPred)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolSwitch(et1, et2, et3, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCH",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CASO ::= CASO KW_CASE OPERAND ARROW BODY 
            {
              SymbolCaso RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		SymbolCaso et1 = (SymbolCaso)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolOperand et2 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location et3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location et3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolBody et3 = (SymbolBody)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolCaso(et1, et2, et3, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASO",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CASO ::= 
            {
              SymbolCaso RESULT =null;
		 RESULT = new SymbolCaso(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASO",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // PRED ::= KW_CASE KW_DEFAULT ARROW BODY 
            {
              SymbolPred RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolBody et = (SymbolBody)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolPred(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRED",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
