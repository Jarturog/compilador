
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadorSintactico;

import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.*;
import analizadorSintactico.symbols.*;
import java.io.PrintStream;
import java.util.HashMap;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\166\000\002\002\004\000\002\046\004\000\002\046" +
    "\003\000\002\047\013\000\002\047\003\000\002\047\010" +
    "\000\002\004\003\000\002\004\003\000\002\051\004\000" +
    "\002\051\002\000\002\003\016\000\002\003\004\000\002" +
    "\002\004\000\002\002\002\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\006\003\000\002\006\002\000\002\010\005\000" +
    "\002\010\003\000\002\007\004\000\002\007\005\000\002" +
    "\007\005\000\002\011\006\000\002\011\005\000\002\011" +
    "\007\000\002\011\006\000\002\011\006\000\002\050\006" +
    "\000\002\050\005\000\002\012\006\000\002\012\004\000" +
    "\002\013\004\000\002\013\002\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\015" +
    "\004\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\016\006\000\002\016\005\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\020\005\000\002\020" +
    "\003\000\002\021\004\000\002\021\005\000\002\022\006" +
    "\000\002\023\004\000\002\024\007\000\002\024\005\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\005\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\007\000\002\026\005\000\002" +
    "\027\004\000\002\030\005\000\002\031\007\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\035\007\000\002\035\010\000\002\036" +
    "\003\000\002\036\007\000\002\037\011\000\002\040\004" +
    "\000\002\040\002\000\002\041\007\000\002\042\006\000" +
    "\002\042\002\000\002\043\010\000\002\044\007\000\002" +
    "\044\002\000\002\045\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\340\000\022\042\010\043\015\044\020\045\005\046" +
    "\013\062\006\063\012\064\017\001\002\000\022\042\010" +
    "\043\015\044\020\045\005\046\013\062\006\063\012\064" +
    "\017\001\002\000\006\054\ufff0\103\ufff0\001\002\000\016" +
    "\042\010\043\015\044\020\045\005\046\013\047\327\001" +
    "\002\000\024\002\uffff\042\010\043\015\044\020\045\005" +
    "\046\013\062\155\063\012\064\017\001\002\000\006\054" +
    "\ufff3\103\ufff3\001\002\000\024\002\ufffd\042\ufffd\043\ufffd" +
    "\044\ufffd\045\ufffd\046\ufffd\062\ufffd\063\ufffd\064\ufffd\001" +
    "\002\000\004\103\141\001\002\000\006\054\uffef\103\uffef" +
    "\001\002\000\004\002\140\001\002\000\006\054\ufff2\103" +
    "\ufff2\001\002\000\006\054\025\103\022\001\002\000\014" +
    "\042\010\043\015\044\020\045\005\046\013\001\002\000" +
    "\006\054\ufff1\103\ufff1\001\002\000\006\054\025\103\022" +
    "\001\002\000\010\013\126\056\uffdd\057\uffdd\001\002\000" +
    "\004\103\022\001\002\000\004\056\123\001\002\000\040" +
    "\004\042\005\045\033\031\035\032\050\033\074\052\075" +
    "\043\076\051\077\046\103\035\104\040\105\047\106\027" +
    "\107\054\110\030\001\002\000\064\006\uffb8\007\uffb8\010" +
    "\uffb8\011\uffb8\012\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8" +
    "\027\uffb8\030\uffb8\031\uffb8\032\uffb8\034\uffb8\036\uffb8\037" +
    "\uffb8\040\uffb8\041\uffb8\051\uffb8\052\uffb8\053\uffb8\055\uffb8" +
    "\056\uffb8\057\uffb8\102\uffb8\001\002\000\064\006\uffae\007" +
    "\uffae\010\uffae\011\uffae\012\uffae\023\uffae\024\uffae\025\uffae" +
    "\026\uffae\027\uffae\030\uffae\031\uffae\032\uffae\034\uffae\036" +
    "\uffae\037\uffae\040\uffae\041\uffae\051\uffae\052\uffae\053\uffae" +
    "\055\uffae\056\uffae\057\uffae\102\uffae\001\002\000\064\006" +
    "\uffac\007\uffac\010\uffac\011\uffac\012\uffac\023\uffac\024\uffac" +
    "\025\uffac\026\uffac\027\uffac\030\uffac\031\uffac\032\uffac\034" +
    "\uffac\036\uffac\037\uffac\040\uffac\041\uffac\051\uffac\052\uffac" +
    "\053\uffac\055\uffac\056\uffac\057\uffac\102\uffac\001\002\000" +
    "\040\004\uff9d\005\uff9d\033\uff9d\035\uff9d\050\uff9d\074\uff9d" +
    "\075\uff9d\076\uff9d\077\uff9d\103\uff9d\104\uff9d\105\uff9d\106" +
    "\uff9d\107\uff9d\110\uff9d\001\002\000\040\004\uff9a\005\uff9a" +
    "\033\uff9a\035\uff9a\050\uff9a\074\uff9a\075\uff9a\076\uff9a\077" +
    "\uff9a\103\uff9a\104\uff9a\105\uff9a\106\uff9a\107\uff9a\110\uff9a" +
    "\001\002\000\040\004\042\005\045\033\031\035\032\050" +
    "\033\074\052\075\043\076\051\077\046\103\035\104\040" +
    "\105\047\106\027\107\054\110\030\001\002\000\064\006" +
    "\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb\023\uffbb\024\uffbb" +
    "\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\034" +
    "\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\051\uffbb\052\uffbb" +
    "\053\uffbb\055\uffbb\056\uffbb\057\uffbb\102\uffbb\001\002\000" +
    "\066\006\uffb1\007\uffb1\010\uffb1\011\uffb1\012\uffb1\023\uffb1" +
    "\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032" +
    "\uffb1\034\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\050\uffd1" +
    "\051\uffb1\052\uffb1\053\uffb1\055\uffb1\056\uffb1\057\uffb1\102" +
    "\uffb1\001\002\000\040\004\042\005\045\033\031\035\032" +
    "\050\033\074\052\075\043\076\051\077\046\103\035\104" +
    "\040\105\047\106\027\107\054\110\030\001\002\000\046" +
    "\006\074\007\071\010\102\011\073\012\062\023\103\024" +
    "\065\025\100\026\076\027\064\030\101\031\063\032\066" +
    "\036\067\037\104\041\070\055\116\102\077\001\002\000" +
    "\064\006\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0\023\uffb0" +
    "\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032" +
    "\uffb0\034\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\051\uffb0" +
    "\052\uffb0\053\uffb0\055\uffb0\056\uffb0\057\uffb0\102\uffb0\001" +
    "\002\000\064\006\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9" +
    "\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031" +
    "\uffb9\032\uffb9\034\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9" +
    "\051\uffb9\052\uffb9\053\uffb9\055\uffb9\056\uffb9\057\uffb9\102" +
    "\uffb9\001\002\000\040\004\uff9c\005\uff9c\033\uff9c\035\uff9c" +
    "\050\uff9c\074\uff9c\075\uff9c\076\uff9c\077\uff9c\103\uff9c\104" +
    "\uff9c\105\uff9c\106\uff9c\107\uff9c\110\uff9c\001\002\000\004" +
    "\050\uffcf\001\002\000\064\006\uffbc\007\uffbc\010\uffbc\011" +
    "\uffbc\012\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc" +
    "\030\uffbc\031\uffbc\032\uffbc\034\uffbc\036\uffbc\037\uffbc\040" +
    "\uffbc\041\uffbc\051\uffbc\052\uffbc\053\uffbc\055\uffbc\056\uffbc" +
    "\057\uffbc\102\uffbc\001\002\000\040\004\uff9b\005\uff9b\033" +
    "\uff9b\035\uff9b\050\uff9b\074\uff9b\075\uff9b\076\uff9b\077\uff9b" +
    "\103\uff9b\104\uff9b\105\uff9b\106\uff9b\107\uff9b\110\uff9b\001" +
    "\002\000\004\050\uffce\001\002\000\064\006\uffaf\007\uffaf" +
    "\010\uffaf\011\uffaf\012\uffaf\023\uffaf\024\uffaf\025\uffaf\026" +
    "\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\034\uffaf\036\uffaf" +
    "\037\uffaf\040\uffaf\041\uffaf\051\uffaf\052\uffaf\053\uffaf\055" +
    "\uffaf\056\uffaf\057\uffaf\102\uffaf\001\002\000\064\006\uffb7" +
    "\007\uffb7\010\uffb7\011\uffb7\012\uffb7\023\uffb7\024\uffb7\025" +
    "\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\034\uffb7" +
    "\036\uffb7\037\uffb7\040\uffb7\041\uffb7\051\uffb7\052\uffb7\053" +
    "\uffb7\055\uffb7\056\uffb7\057\uffb7\102\uffb7\001\002\000\004" +
    "\050\uffcd\001\002\000\004\050\uffd0\001\002\000\004\050" +
    "\055\001\002\000\064\006\uffad\007\uffad\010\uffad\011\uffad" +
    "\012\uffad\023\uffad\024\uffad\025\uffad\026\uffad\027\uffad\030" +
    "\uffad\031\uffad\032\uffad\034\uffad\036\uffad\037\uffad\040\uffad" +
    "\041\uffad\051\uffad\052\uffad\053\uffad\055\uffad\056\uffad\057" +
    "\uffad\102\uffad\001\002\000\042\004\042\005\045\033\031" +
    "\035\032\050\033\051\056\074\052\075\043\076\051\077" +
    "\046\103\035\104\040\105\047\106\027\107\054\110\030" +
    "\001\002\000\064\006\uffd2\007\uffd2\010\uffd2\011\uffd2\012" +
    "\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2" +
    "\031\uffd2\032\uffd2\034\uffd2\036\uffd2\037\uffd2\040\uffd2\041" +
    "\uffd2\051\uffd2\052\uffd2\053\uffd2\055\uffd2\056\uffd2\057\uffd2" +
    "\102\uffd2\001\002\000\050\006\074\007\071\010\102\011" +
    "\073\012\062\023\103\024\065\025\100\026\076\027\064" +
    "\030\101\031\063\032\066\036\067\037\104\041\070\051" +
    "\uffcb\057\072\102\077\001\002\000\004\051\061\001\002" +
    "\000\064\006\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3\023" +
    "\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3" +
    "\032\uffd3\034\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\051" +
    "\uffd3\052\uffd3\053\uffd3\055\uffd3\056\uffd3\057\uffd3\102\uffd3" +
    "\001\002\000\040\004\uffa7\005\uffa7\033\uffa7\035\uffa7\050" +
    "\uffa7\074\uffa7\075\uffa7\076\uffa7\077\uffa7\103\uffa7\104\uffa7" +
    "\105\uffa7\106\uffa7\107\uffa7\110\uffa7\001\002\000\040\004" +
    "\uff9f\005\uff9f\033\uff9f\035\uff9f\050\uff9f\074\uff9f\075\uff9f" +
    "\076\uff9f\077\uff9f\103\uff9f\104\uff9f\105\uff9f\106\uff9f\107" +
    "\uff9f\110\uff9f\001\002\000\040\004\uffa1\005\uffa1\033\uffa1" +
    "\035\uffa1\050\uffa1\074\uffa1\075\uffa1\076\uffa1\077\uffa1\103" +
    "\uffa1\104\uffa1\105\uffa1\106\uffa1\107\uffa1\110\uffa1\001\002" +
    "\000\040\004\uffa4\005\uffa4\033\uffa4\035\uffa4\050\uffa4\074" +
    "\uffa4\075\uffa4\076\uffa4\077\uffa4\103\uffa4\104\uffa4\105\uffa4" +
    "\106\uffa4\107\uffa4\110\uffa4\001\002\000\040\004\uff9e\005" +
    "\uff9e\033\uff9e\035\uff9e\050\uff9e\074\uff9e\075\uff9e\076\uff9e" +
    "\077\uff9e\103\uff9e\104\uff9e\105\uff9e\106\uff9e\107\uff9e\110" +
    "\uff9e\001\002\000\040\004\uffa6\005\uffa6\033\uffa6\035\uffa6" +
    "\050\uffa6\074\uffa6\075\uffa6\076\uffa6\077\uffa6\103\uffa6\104" +
    "\uffa6\105\uffa6\106\uffa6\107\uffa6\110\uffa6\001\002\000\004" +
    "\103\115\001\002\000\040\004\uffaa\005\uffaa\033\uffaa\035" +
    "\uffaa\050\uffaa\074\uffaa\075\uffaa\076\uffaa\077\uffaa\103\uffaa" +
    "\104\uffaa\105\uffaa\106\uffaa\107\uffaa\110\uffaa\001\002\000" +
    "\040\004\042\005\045\033\031\035\032\050\033\074\052" +
    "\075\043\076\051\077\046\103\035\104\040\105\047\106" +
    "\027\107\054\110\030\001\002\000\040\004\uffa8\005\uffa8" +
    "\033\uffa8\035\uffa8\050\uffa8\074\uffa8\075\uffa8\076\uffa8\077" +
    "\uffa8\103\uffa8\104\uffa8\105\uffa8\106\uffa8\107\uffa8\110\uffa8" +
    "\001\002\000\040\004\uffab\005\uffab\033\uffab\035\uffab\050" +
    "\uffab\074\uffab\075\uffab\076\uffab\077\uffab\103\uffab\104\uffab" +
    "\105\uffab\106\uffab\107\uffab\110\uffab\001\002\000\040\004" +
    "\042\005\045\033\031\035\032\050\033\074\052\075\043" +
    "\076\051\077\046\103\035\104\040\105\047\106\027\107" +
    "\054\110\030\001\002\000\040\004\uffa2\005\uffa2\033\uffa2" +
    "\035\uffa2\050\uffa2\074\uffa2\075\uffa2\076\uffa2\077\uffa2\103" +
    "\uffa2\104\uffa2\105\uffa2\106\uffa2\107\uffa2\110\uffa2\001\002" +
    "\000\004\054\110\001\002\000\040\004\uffa3\005\uffa3\033" +
    "\uffa3\035\uffa3\050\uffa3\074\uffa3\075\uffa3\076\uffa3\077\uffa3" +
    "\103\uffa3\104\uffa3\105\uffa3\106\uffa3\107\uffa3\110\uffa3\001" +
    "\002\000\040\004\uffa0\005\uffa0\033\uffa0\035\uffa0\050\uffa0" +
    "\074\uffa0\075\uffa0\076\uffa0\077\uffa0\103\uffa0\104\uffa0\105" +
    "\uffa0\106\uffa0\107\uffa0\110\uffa0\001\002\000\040\004\uffa9" +
    "\005\uffa9\033\uffa9\035\uffa9\050\uffa9\074\uffa9\075\uffa9\076" +
    "\uffa9\077\uffa9\103\uffa9\104\uffa9\105\uffa9\106\uffa9\107\uffa9" +
    "\110\uffa9\001\002\000\040\004\uffa5\005\uffa5\033\uffa5\035" +
    "\uffa5\050\uffa5\074\uffa5\075\uffa5\076\uffa5\077\uffa5\103\uffa5" +
    "\104\uffa5\105\uffa5\106\uffa5\107\uffa5\110\uffa5\001\002\000" +
    "\040\004\042\005\045\033\031\035\032\050\033\074\052" +
    "\075\043\076\051\077\046\103\035\104\040\105\047\106" +
    "\027\107\054\110\030\001\002\000\046\006\074\007\071" +
    "\010\102\011\073\012\062\023\103\024\065\025\100\026" +
    "\076\027\064\030\101\031\063\032\066\036\067\037\104" +
    "\040\106\041\070\102\077\001\002\000\040\004\042\005" +
    "\045\033\031\035\032\050\033\074\052\075\043\076\051" +
    "\077\046\103\035\104\040\105\047\106\027\107\054\110" +
    "\030\001\002\000\064\006\074\007\071\010\102\011\073" +
    "\012\062\023\103\024\065\025\100\026\076\027\064\030" +
    "\101\031\063\032\066\034\uffb2\036\067\037\104\040\uffb2" +
    "\041\070\051\uffb2\052\uffb2\053\uffb2\055\uffb2\056\uffb2\057" +
    "\uffb2\102\077\001\002\000\040\004\042\005\045\033\031" +
    "\035\032\050\033\074\052\075\043\076\051\077\046\103" +
    "\035\104\040\105\047\106\027\107\054\110\030\001\002" +
    "\000\046\006\074\007\071\010\102\011\073\012\062\023" +
    "\103\024\065\025\100\026\076\027\064\030\101\031\063" +
    "\032\066\036\067\037\104\041\070\055\112\102\077\001" +
    "\002\000\064\006\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6" +
    "\023\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6\031" +
    "\uffb6\032\uffb6\034\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6" +
    "\051\uffb6\052\uffb6\053\uffb6\055\uffb6\056\uffb6\057\uffb6\102" +
    "\uffb6\001\002\000\064\006\074\007\071\010\102\011\073" +
    "\012\062\023\103\024\065\025\100\026\076\027\064\030" +
    "\101\031\063\032\066\034\uffb3\036\067\037\104\040\uffb3" +
    "\041\070\051\uffb3\052\uffb3\053\uffb3\055\uffb3\056\uffb3\057" +
    "\uffb3\102\077\001\002\000\004\051\uffcc\001\002\000\064" +
    "\006\uffb5\007\uffb5\010\uffb5\011\uffb5\012\uffb5\023\uffb5\024" +
    "\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5" +
    "\034\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\051\uffb5\052" +
    "\uffb5\053\uffb5\055\uffb5\056\uffb5\057\uffb5\102\uffb5\001\002" +
    "\000\006\054\025\103\uffe1\001\002\000\004\103\uffe2\001" +
    "\002\000\064\006\074\007\071\010\102\011\073\012\062" +
    "\023\103\024\065\025\100\026\076\027\064\030\101\031" +
    "\063\032\066\034\uffb4\036\067\037\104\040\uffb4\041\070" +
    "\051\uffb4\052\uffb4\053\uffb4\055\uffb4\056\uffb4\057\uffb4\102" +
    "\077\001\002\000\046\006\074\007\071\010\102\011\073" +
    "\012\062\023\103\024\065\025\100\026\076\027\064\030" +
    "\101\031\063\032\066\036\067\037\104\041\070\051\122" +
    "\102\077\001\002\000\064\006\uffba\007\uffba\010\uffba\011" +
    "\uffba\012\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba" +
    "\030\uffba\031\uffba\032\uffba\034\uffba\036\uffba\037\uffba\040" +
    "\uffba\041\uffba\051\uffba\052\uffba\053\uffba\055\uffba\056\uffba" +
    "\057\uffba\102\uffba\001\002\000\104\002\uffe7\004\uffe7\005" +
    "\uffe7\033\uffe7\035\uffe7\042\uffe7\043\uffe7\044\uffe7\045\uffe7" +
    "\046\uffe7\050\uffe7\052\uffe7\053\uffe7\056\uffe7\062\uffe7\063" +
    "\uffe7\064\uffe7\065\uffe7\070\uffe7\071\uffe7\072\uffe7\073\uffe7" +
    "\074\uffe7\075\uffe7\076\uffe7\077\uffe7\100\uffe7\103\uffe7\104" +
    "\uffe7\105\uffe7\106\uffe7\107\uffe7\110\uffe7\001\002\000\004" +
    "\056\125\001\002\000\104\002\uffe5\004\uffe5\005\uffe5\033" +
    "\uffe5\035\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5" +
    "\050\uffe5\052\uffe5\053\uffe5\056\uffe5\062\uffe5\063\uffe5\064" +
    "\uffe5\065\uffe5\070\uffe5\071\uffe5\072\uffe5\073\uffe5\074\uffe5" +
    "\075\uffe5\076\uffe5\077\uffe5\100\uffe5\103\uffe5\104\uffe5\105" +
    "\uffe5\106\uffe5\107\uffe5\110\uffe5\001\002\000\040\004\042" +
    "\005\045\033\031\035\032\050\033\074\052\075\043\076" +
    "\051\077\046\103\035\104\040\105\047\106\027\107\054" +
    "\110\030\001\002\000\006\056\uffdf\057\130\001\002\000" +
    "\004\103\022\001\002\000\004\056\uffe0\001\002\000\050" +
    "\006\074\007\071\010\102\011\073\012\062\023\103\024" +
    "\065\025\100\026\076\027\064\030\101\031\063\032\066" +
    "\036\067\037\104\041\070\056\uffde\057\uffde\102\077\001" +
    "\002\000\004\103\022\001\002\000\004\056\135\001\002" +
    "\000\104\002\uffe6\004\uffe6\005\uffe6\033\uffe6\035\uffe6\042" +
    "\uffe6\043\uffe6\044\uffe6\045\uffe6\046\uffe6\050\uffe6\052\uffe6" +
    "\053\uffe6\056\uffe6\062\uffe6\063\uffe6\064\uffe6\065\uffe6\070" +
    "\uffe6\071\uffe6\072\uffe6\073\uffe6\074\uffe6\075\uffe6\076\uffe6" +
    "\077\uffe6\100\uffe6\103\uffe6\104\uffe6\105\uffe6\106\uffe6\107" +
    "\uffe6\110\uffe6\001\002\000\004\056\137\001\002\000\104" +
    "\002\uffe4\004\uffe4\005\uffe4\033\uffe4\035\uffe4\042\uffe4\043" +
    "\uffe4\044\uffe4\045\uffe4\046\uffe4\050\uffe4\052\uffe4\053\uffe4" +
    "\056\uffe4\062\uffe4\063\uffe4\064\uffe4\065\uffe4\070\uffe4\071" +
    "\uffe4\072\uffe4\073\uffe4\074\uffe4\075\uffe4\076\uffe4\077\uffe4" +
    "\100\uffe4\103\uffe4\104\uffe4\105\uffe4\106\uffe4\107\uffe4\110" +
    "\uffe4\001\002\000\004\002\001\001\002\000\006\052\142" +
    "\103\022\001\002\000\022\042\010\043\015\044\020\045" +
    "\005\046\013\053\ufff8\063\147\064\017\001\002\000\004" +
    "\056\144\001\002\000\104\002\uffe3\004\uffe3\005\uffe3\033" +
    "\uffe3\035\uffe3\042\uffe3\043\uffe3\044\uffe3\045\uffe3\046\uffe3" +
    "\050\uffe3\052\uffe3\053\uffe3\056\uffe3\062\uffe3\063\uffe3\064" +
    "\uffe3\065\uffe3\070\uffe3\071\uffe3\072\uffe3\073\uffe3\074\uffe3" +
    "\075\uffe3\076\uffe3\077\uffe3\100\uffe3\103\uffe3\104\uffe3\105" +
    "\uffe3\106\uffe3\107\uffe3\110\uffe3\001\002\000\004\053\152" +
    "\001\002\000\022\042\010\043\015\044\020\045\005\046" +
    "\013\053\ufff8\063\147\064\017\001\002\000\004\103\150" +
    "\001\002\000\004\103\022\001\002\000\004\053\ufff9\001" +
    "\002\000\004\056\153\001\002\000\024\002\ufffc\042\ufffc" +
    "\043\ufffc\044\ufffc\045\ufffc\046\ufffc\062\ufffc\063\ufffc\064" +
    "\ufffc\001\002\000\024\002\ufff6\042\ufff6\043\ufff6\044\ufff6" +
    "\045\ufff6\046\ufff6\062\ufff6\063\ufff6\064\ufff6\001\002\000" +
    "\016\042\010\043\015\044\020\045\005\046\013\047\156" +
    "\001\002\000\004\103\ufffa\001\002\000\004\103\161\001" +
    "\002\000\004\103\ufffb\001\002\000\004\050\162\001\002" +
    "\000\020\042\010\043\015\044\020\045\005\046\013\051" +
    "\uffed\063\165\001\002\000\004\051\uffee\001\002\000\004" +
    "\051\177\001\002\000\004\103\175\001\002\000\006\054" +
    "\025\103\172\001\002\000\006\051\uffeb\057\170\001\002" +
    "\000\016\042\010\043\015\044\020\045\005\046\013\063" +
    "\165\001\002\000\004\051\uffec\001\002\000\006\051\uffea" +
    "\057\uffea\001\002\000\004\103\174\001\002\000\006\051" +
    "\uffe9\057\uffe9\001\002\000\004\103\176\001\002\000\006" +
    "\051\uffe8\057\uffe8\001\002\000\004\052\200\001\002\000" +
    "\072\004\042\005\045\033\031\035\032\042\010\043\015" +
    "\044\020\045\005\046\013\050\033\053\ufff4\063\147\064" +
    "\017\065\216\070\212\071\202\072\217\073\210\074\052" +
    "\075\043\076\051\077\046\103\207\104\040\105\047\106" +
    "\027\107\054\110\030\001\002\000\076\004\uffdc\005\uffdc" +
    "\033\uffdc\035\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc\046" +
    "\uffdc\050\uffdc\052\uffdc\053\uffdc\063\uffdc\064\uffdc\065\uffdc" +
    "\070\uffdc\071\uffdc\072\uffdc\073\uffdc\074\uffdc\075\uffdc\076" +
    "\uffdc\077\uffdc\100\uffdc\103\uffdc\104\uffdc\105\uffdc\106\uffdc" +
    "\107\uffdc\110\uffdc\001\002\000\004\052\322\001\002\000" +
    "\076\004\uffd6\005\uffd6\033\uffd6\035\uffd6\042\uffd6\043\uffd6" +
    "\044\uffd6\045\uffd6\046\uffd6\050\uffd6\052\uffd6\053\uffd6\063" +
    "\uffd6\064\uffd6\065\uffd6\070\uffd6\071\uffd6\072\uffd6\073\uffd6" +
    "\074\uffd6\075\uffd6\076\uffd6\077\uffd6\100\uffd6\103\uffd6\104" +
    "\uffd6\105\uffd6\106\uffd6\107\uffd6\110\uffd6\001\002\000\050" +
    "\006\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb\023\uffbb\024" +
    "\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb" +
    "\034\uffbb\036\uffbb\037\uffbb\041\uffbb\056\321\102\uffbb\001" +
    "\002\000\076\004\uffdb\005\uffdb\033\uffdb\035\uffdb\042\uffdb" +
    "\043\uffdb\044\uffdb\045\uffdb\046\uffdb\050\uffdb\052\uffdb\053" +
    "\uffdb\063\uffdb\064\uffdb\065\uffdb\070\uffdb\071\uffdb\072\uffdb" +
    "\073\uffdb\074\uffdb\075\uffdb\076\uffdb\077\uffdb\100\uffdb\103" +
    "\uffdb\104\uffdb\105\uffdb\106\uffdb\107\uffdb\110\uffdb\001\002" +
    "\000\076\004\uffda\005\uffda\033\uffda\035\uffda\042\uffda\043" +
    "\uffda\044\uffda\045\uffda\046\uffda\050\uffda\052\uffda\053\uffda" +
    "\063\uffda\064\uffda\065\uffda\070\uffda\071\uffda\072\uffda\073" +
    "\uffda\074\uffda\075\uffda\076\uffda\077\uffda\100\uffda\103\uffda" +
    "\104\uffda\105\uffda\106\uffda\107\uffda\110\uffda\001\002\000" +
    "\070\006\uffb1\007\uffb1\010\uffb1\011\uffb1\012\uffb1\013\305" +
    "\014\313\015\306\016\311\017\314\020\312\021\304\022" +
    "\307\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1" +
    "\031\uffb1\032\uffb1\034\uffb1\036\uffb1\037\uffb1\041\uffb1\050" +
    "\uffd1\102\uffb1\001\002\000\042\004\042\005\045\033\031" +
    "\035\032\050\033\056\302\074\052\075\043\076\051\077" +
    "\046\103\035\104\040\105\047\106\027\107\054\110\030" +
    "\001\002\000\076\004\uffd7\005\uffd7\033\uffd7\035\uffd7\042" +
    "\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7\050\uffd7\052\uffd7" +
    "\053\uffd7\063\uffd7\064\uffd7\065\uffd7\070\uffd7\071\uffd7\072" +
    "\uffd7\073\uffd7\074\uffd7\075\uffd7\076\uffd7\077\uffd7\100\uffd7" +
    "\103\uffd7\104\uffd7\105\uffd7\106\uffd7\107\uffd7\110\uffd7\001" +
    "\002\000\056\004\042\005\045\033\031\035\032\042\010" +
    "\043\015\044\020\045\005\046\013\050\033\063\147\064" +
    "\017\074\052\075\043\076\051\077\046\103\035\104\040" +
    "\105\047\106\027\107\054\110\030\001\002\000\004\056" +
    "\266\001\002\000\046\006\074\007\071\010\102\011\073" +
    "\012\062\023\103\024\065\025\100\026\076\027\064\030" +
    "\101\031\063\032\066\034\263\036\067\037\104\041\070" +
    "\102\077\001\002\000\076\004\042\005\045\033\031\035" +
    "\032\042\010\043\015\044\020\045\005\046\013\050\033" +
    "\052\ufff4\053\ufff4\063\147\064\017\065\216\070\212\071" +
    "\202\072\217\073\210\074\052\075\043\076\051\077\046" +
    "\100\ufff4\103\207\104\040\105\047\106\027\107\054\110" +
    "\030\001\002\000\040\004\042\005\045\033\031\035\032" +
    "\050\033\074\052\075\043\076\051\077\046\103\035\104" +
    "\040\105\047\106\027\107\054\110\030\001\002\000\040" +
    "\004\042\005\045\033\031\035\032\050\033\074\052\075" +
    "\043\076\051\077\046\103\035\104\040\105\047\106\027" +
    "\107\054\110\030\001\002\000\076\004\uffd9\005\uffd9\033" +
    "\uffd9\035\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9" +
    "\050\uffd9\052\uffd9\053\uffd9\063\uffd9\064\uffd9\065\uffd9\070" +
    "\uffd9\071\uffd9\072\uffd9\073\uffd9\074\uffd9\075\uffd9\076\uffd9" +
    "\077\uffd9\100\uffd9\103\uffd9\104\uffd9\105\uffd9\106\uffd9\107" +
    "\uffd9\110\uffd9\001\002\000\076\004\uffd5\005\uffd5\033\uffd5" +
    "\035\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\050" +
    "\uffd5\052\uffd5\053\uffd5\063\uffd5\064\uffd5\065\uffd5\070\uffd5" +
    "\071\uffd5\072\uffd5\073\uffd5\074\uffd5\075\uffd5\076\uffd5\077" +
    "\uffd5\100\uffd5\103\uffd5\104\uffd5\105\uffd5\106\uffd5\107\uffd5" +
    "\110\uffd5\001\002\000\004\053\224\001\002\000\076\004" +
    "\uffd4\005\uffd4\033\uffd4\035\uffd4\042\uffd4\043\uffd4\044\uffd4" +
    "\045\uffd4\046\uffd4\050\uffd4\052\uffd4\053\uffd4\063\uffd4\064" +
    "\uffd4\065\uffd4\070\uffd4\071\uffd4\072\uffd4\073\uffd4\074\uffd4" +
    "\075\uffd4\076\uffd4\077\uffd4\100\uffd4\103\uffd4\104\uffd4\105" +
    "\uffd4\106\uffd4\107\uffd4\110\uffd4\001\002\000\024\002\ufffe" +
    "\042\ufffe\043\ufffe\044\ufffe\045\ufffe\046\ufffe\062\ufffe\063" +
    "\ufffe\064\ufffe\001\002\000\046\006\074\007\071\010\102" +
    "\011\073\012\062\023\103\024\065\025\100\026\076\027" +
    "\064\030\101\031\063\032\066\036\067\037\104\041\070" +
    "\053\226\102\077\001\002\000\004\100\uff8d\001\002\000" +
    "\004\100\230\001\002\000\042\004\042\005\045\033\031" +
    "\035\032\050\033\074\052\075\043\076\051\077\046\101" +
    "\233\103\035\104\040\105\047\106\027\107\054\110\030" +
    "\001\002\000\004\052\232\001\002\000\076\004\uff8f\005" +
    "\uff8f\033\uff8f\035\uff8f\042\uff8f\043\uff8f\044\uff8f\045\uff8f" +
    "\046\uff8f\050\uff8f\052\uff8f\053\uff8f\063\uff8f\064\uff8f\065" +
    "\uff8f\070\uff8f\071\uff8f\072\uff8f\073\uff8f\074\uff8f\075\uff8f" +
    "\076\uff8f\077\uff8f\100\uff8f\103\uff8f\104\uff8f\105\uff8f\106" +
    "\uff8f\107\uff8f\110\uff8f\001\002\000\004\040\237\001\002" +
    "\000\046\006\074\007\071\010\102\011\073\012\062\023" +
    "\103\024\065\025\100\026\076\027\064\030\101\031\063" +
    "\032\066\036\067\037\104\040\235\041\070\102\077\001" +
    "\002\000\072\004\042\005\045\033\031\035\032\042\010" +
    "\043\015\044\020\045\005\046\013\050\033\063\147\064" +
    "\017\065\216\070\212\071\202\072\217\073\210\074\052" +
    "\075\043\076\051\077\046\100\ufff4\103\207\104\040\105" +
    "\047\106\027\107\054\110\030\001\002\000\004\100\uff8e" +
    "\001\002\000\072\004\042\005\045\033\031\035\032\042" +
    "\010\043\015\044\020\045\005\046\013\050\033\052\ufff4" +
    "\063\147\064\017\065\216\070\212\071\202\072\217\073" +
    "\210\074\052\075\043\076\051\077\046\103\207\104\040" +
    "\105\047\106\027\107\054\110\030\001\002\000\004\052" +
    "\uff8c\001\002\000\046\006\074\007\071\010\102\011\073" +
    "\012\062\023\103\024\065\025\100\026\076\027\064\030" +
    "\101\031\063\032\066\036\067\037\104\041\070\052\242" +
    "\102\077\001\002\000\072\004\042\005\045\033\031\035" +
    "\032\042\010\043\015\044\020\045\005\046\013\050\033" +
    "\053\ufff4\063\147\064\017\065\216\070\212\071\202\072" +
    "\217\073\210\074\052\075\043\076\051\077\046\103\207" +
    "\104\040\105\047\106\027\107\054\110\030\001\002\000" +
    "\004\053\244\001\002\000\102\004\uff93\005\uff93\033\uff93" +
    "\035\uff93\042\uff93\043\uff93\044\uff93\045\uff93\046\uff93\050" +
    "\uff93\052\uff93\053\uff93\063\uff93\064\uff93\065\uff93\066\247" +
    "\067\uff93\070\uff93\071\uff93\072\uff93\073\uff93\074\uff93\075" +
    "\uff93\076\uff93\077\uff93\100\uff93\103\uff93\104\uff93\105\uff93" +
    "\106\uff93\107\uff93\110\uff93\001\002\000\102\004\uff93\005" +
    "\uff93\033\uff93\035\uff93\042\uff93\043\uff93\044\uff93\045\uff93" +
    "\046\uff93\050\uff93\052\uff93\053\uff93\063\uff93\064\uff93\065" +
    "\uff93\066\247\067\uff93\070\uff93\071\uff93\072\uff93\073\uff93" +
    "\074\uff93\075\uff93\076\uff93\077\uff93\100\uff93\103\uff93\104" +
    "\uff93\105\uff93\106\uff93\107\uff93\110\uff93\001\002\000\100" +
    "\004\uff90\005\uff90\033\uff90\035\uff90\042\uff90\043\uff90\044" +
    "\uff90\045\uff90\046\uff90\050\uff90\052\uff90\053\uff90\063\uff90" +
    "\064\uff90\065\uff90\067\255\070\uff90\071\uff90\072\uff90\073" +
    "\uff90\074\uff90\075\uff90\076\uff90\077\uff90\100\uff90\103\uff90" +
    "\104\uff90\105\uff90\106\uff90\107\uff90\110\uff90\001\002\000" +
    "\040\004\042\005\045\033\031\035\032\050\033\074\052" +
    "\075\043\076\051\077\046\103\035\104\040\105\047\106" +
    "\027\107\054\110\030\001\002\000\046\006\074\007\071" +
    "\010\102\011\073\012\062\023\103\024\065\025\100\026" +
    "\076\027\064\030\101\031\063\032\066\036\067\037\104" +
    "\041\070\052\251\102\077\001\002\000\072\004\042\005" +
    "\045\033\031\035\032\042\010\043\015\044\020\045\005" +
    "\046\013\050\033\053\ufff4\063\147\064\017\065\216\070" +
    "\212\071\202\072\217\073\210\074\052\075\043\076\051" +
    "\077\046\103\207\104\040\105\047\106\027\107\054\110" +
    "\030\001\002\000\004\053\253\001\002\000\102\004\uff92" +
    "\005\uff92\033\uff92\035\uff92\042\uff92\043\uff92\044\uff92\045" +
    "\uff92\046\uff92\050\uff92\052\uff92\053\uff92\063\uff92\064\uff92" +
    "\065\uff92\066\uff92\067\uff92\070\uff92\071\uff92\072\uff92\073" +
    "\uff92\074\uff92\075\uff92\076\uff92\077\uff92\100\uff92\103\uff92" +
    "\104\uff92\105\uff92\106\uff92\107\uff92\110\uff92\001\002\000" +
    "\076\004\uff95\005\uff95\033\uff95\035\uff95\042\uff95\043\uff95" +
    "\044\uff95\045\uff95\046\uff95\050\uff95\052\uff95\053\uff95\063" +
    "\uff95\064\uff95\065\uff95\070\uff95\071\uff95\072\uff95\073\uff95" +
    "\074\uff95\075\uff95\076\uff95\077\uff95\100\uff95\103\uff95\104" +
    "\uff95\105\uff95\106\uff95\107\uff95\110\uff95\001\002\000\004" +
    "\052\256\001\002\000\072\004\042\005\045\033\031\035" +
    "\032\042\010\043\015\044\020\045\005\046\013\050\033" +
    "\053\ufff4\063\147\064\017\065\216\070\212\071\202\072" +
    "\217\073\210\074\052\075\043\076\051\077\046\103\207" +
    "\104\040\105\047\106\027\107\054\110\030\001\002\000" +
    "\004\053\260\001\002\000\076\004\uff91\005\uff91\033\uff91" +
    "\035\uff91\042\uff91\043\uff91\044\uff91\045\uff91\046\uff91\050" +
    "\uff91\052\uff91\053\uff91\063\uff91\064\uff91\065\uff91\070\uff91" +
    "\071\uff91\072\uff91\073\uff91\074\uff91\075\uff91\076\uff91\077" +
    "\uff91\100\uff91\103\uff91\104\uff91\105\uff91\106\uff91\107\uff91" +
    "\110\uff91\001\002\000\100\004\uff94\005\uff94\033\uff94\035" +
    "\uff94\042\uff94\043\uff94\044\uff94\045\uff94\046\uff94\050\uff94" +
    "\052\uff94\053\uff94\063\uff94\064\uff94\065\uff94\067\uff94\070" +
    "\uff94\071\uff94\072\uff94\073\uff94\074\uff94\075\uff94\076\uff94" +
    "\077\uff94\100\uff94\103\uff94\104\uff94\105\uff94\106\uff94\107" +
    "\uff94\110\uff94\001\002\000\010\052\ufff5\053\ufff5\100\ufff5" +
    "\001\002\000\040\004\042\005\045\033\031\035\032\050" +
    "\033\074\052\075\043\076\051\077\046\103\035\104\040" +
    "\105\047\106\027\107\054\110\030\001\002\000\046\006" +
    "\074\007\071\010\102\011\073\012\062\023\103\024\065" +
    "\025\100\026\076\027\064\030\101\031\063\032\066\036" +
    "\067\037\104\041\070\056\265\102\077\001\002\000\076" +
    "\004\uffc8\005\uffc8\033\uffc8\035\uffc8\042\uffc8\043\uffc8\044" +
    "\uffc8\045\uffc8\046\uffc8\050\uffc8\052\uffc8\053\uffc8\063\uffc8" +
    "\064\uffc8\065\uffc8\070\uffc8\071\uffc8\072\uffc8\073\uffc8\074" +
    "\uffc8\075\uffc8\076\uffc8\077\uffc8\100\uffc8\103\uffc8\104\uffc8" +
    "\105\uffc8\106\uffc8\107\uffc8\110\uffc8\001\002\000\076\004" +
    "\uffc7\005\uffc7\033\uffc7\035\uffc7\042\uffc7\043\uffc7\044\uffc7" +
    "\045\uffc7\046\uffc7\050\uffc7\052\uffc7\053\uffc7\063\uffc7\064" +
    "\uffc7\065\uffc7\070\uffc7\071\uffc7\072\uffc7\073\uffc7\074\uffc7" +
    "\075\uffc7\076\uffc7\077\uffc7\100\uffc7\103\uffc7\104\uffc7\105" +
    "\uffc7\106\uffc7\107\uffc7\110\uffc7\001\002\000\004\056\275" +
    "\001\002\000\050\006\074\007\071\010\102\011\073\012" +
    "\062\023\103\024\065\025\100\026\076\027\064\030\101" +
    "\031\063\032\066\036\067\037\104\041\070\052\uff97\056" +
    "\uff97\102\077\001\002\000\004\052\272\001\002\000\072" +
    "\004\042\005\045\033\031\035\032\042\010\043\015\044" +
    "\020\045\005\046\013\050\033\053\ufff4\063\147\064\017" +
    "\065\216\070\212\071\202\072\217\073\210\074\052\075" +
    "\043\076\051\077\046\103\207\104\040\105\047\106\027" +
    "\107\054\110\030\001\002\000\004\053\274\001\002\000" +
    "\076\004\uff99\005\uff99\033\uff99\035\uff99\042\uff99\043\uff99" +
    "\044\uff99\045\uff99\046\uff99\050\uff99\052\uff99\053\uff99\063" +
    "\uff99\064\uff99\065\uff99\070\uff99\071\uff99\072\uff99\073\uff99" +
    "\074\uff99\075\uff99\076\uff99\077\uff99\100\uff99\103\uff99\104" +
    "\uff99\105\uff99\106\uff99\107\uff99\110\uff99\001\002\000\040" +
    "\004\042\005\045\033\031\035\032\050\033\074\052\075" +
    "\043\076\051\077\046\103\035\104\040\105\047\106\027" +
    "\107\054\110\030\001\002\000\046\006\074\007\071\010" +
    "\102\011\073\012\062\023\103\024\065\025\100\026\076" +
    "\027\064\030\101\031\063\032\066\036\067\037\104\041" +
    "\070\056\277\102\077\001\002\000\040\004\042\005\045" +
    "\033\031\035\032\050\033\074\052\075\043\076\051\077" +
    "\046\103\035\104\040\105\047\106\027\107\054\110\030" +
    "\001\002\000\050\006\074\007\071\010\102\011\073\012" +
    "\062\023\103\024\065\025\100\026\076\027\064\030\101" +
    "\031\063\032\066\036\067\037\104\041\070\052\uff96\056" +
    "\uff96\102\077\001\002\000\046\006\074\007\071\010\102" +
    "\011\073\012\062\023\103\024\065\025\100\026\076\027" +
    "\064\030\101\031\063\032\066\036\067\037\104\041\070" +
    "\056\303\102\077\001\002\000\076\004\uffca\005\uffca\033" +
    "\uffca\035\uffca\042\uffca\043\uffca\044\uffca\045\uffca\046\uffca" +
    "\050\uffca\052\uffca\053\uffca\063\uffca\064\uffca\065\uffca\070" +
    "\uffca\071\uffca\072\uffca\073\uffca\074\uffca\075\uffca\076\uffca" +
    "\077\uffca\100\uffca\103\uffca\104\uffca\105\uffca\106\uffca\107" +
    "\uffca\110\uffca\001\002\000\076\004\uffc9\005\uffc9\033\uffc9" +
    "\035\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\050" +
    "\uffc9\052\uffc9\053\uffc9\063\uffc9\064\uffc9\065\uffc9\070\uffc9" +
    "\071\uffc9\072\uffc9\073\uffc9\074\uffc9\075\uffc9\076\uffc9\077" +
    "\uffc9\100\uffc9\103\uffc9\104\uffc9\105\uffc9\106\uffc9\107\uffc9" +
    "\110\uffc9\001\002\000\040\004\uffbe\005\uffbe\033\uffbe\035" +
    "\uffbe\050\uffbe\074\uffbe\075\uffbe\076\uffbe\077\uffbe\103\uffbe" +
    "\104\uffbe\105\uffbe\106\uffbe\107\uffbe\110\uffbe\001\002\000" +
    "\040\004\uffc4\005\uffc4\033\uffc4\035\uffc4\050\uffc4\074\uffc4" +
    "\075\uffc4\076\uffc4\077\uffc4\103\uffc4\104\uffc4\105\uffc4\106" +
    "\uffc4\107\uffc4\110\uffc4\001\002\000\040\004\uffc2\005\uffc2" +
    "\033\uffc2\035\uffc2\050\uffc2\074\uffc2\075\uffc2\076\uffc2\077" +
    "\uffc2\103\uffc2\104\uffc2\105\uffc2\106\uffc2\107\uffc2\110\uffc2" +
    "\001\002\000\040\004\uffbd\005\uffbd\033\uffbd\035\uffbd\050" +
    "\uffbd\074\uffbd\075\uffbd\076\uffbd\077\uffbd\103\uffbd\104\uffbd" +
    "\105\uffbd\106\uffbd\107\uffbd\110\uffbd\001\002\000\040\004" +
    "\042\005\045\033\031\035\032\050\033\074\052\075\043" +
    "\076\051\077\046\103\035\104\040\105\047\106\027\107" +
    "\054\110\030\001\002\000\040\004\uffc1\005\uffc1\033\uffc1" +
    "\035\uffc1\050\uffc1\074\uffc1\075\uffc1\076\uffc1\077\uffc1\103" +
    "\uffc1\104\uffc1\105\uffc1\106\uffc1\107\uffc1\110\uffc1\001\002" +
    "\000\040\004\uffbf\005\uffbf\033\uffbf\035\uffbf\050\uffbf\074" +
    "\uffbf\075\uffbf\076\uffbf\077\uffbf\103\uffbf\104\uffbf\105\uffbf" +
    "\106\uffbf\107\uffbf\110\uffbf\001\002\000\040\004\uffc3\005" +
    "\uffc3\033\uffc3\035\uffc3\050\uffc3\074\uffc3\075\uffc3\076\uffc3" +
    "\077\uffc3\103\uffc3\104\uffc3\105\uffc3\106\uffc3\107\uffc3\110" +
    "\uffc3\001\002\000\040\004\uffc0\005\uffc0\033\uffc0\035\uffc0" +
    "\050\uffc0\074\uffc0\075\uffc0\076\uffc0\077\uffc0\103\uffc0\104" +
    "\uffc0\105\uffc0\106\uffc0\107\uffc0\110\uffc0\001\002\000\050" +
    "\006\074\007\071\010\102\011\073\012\062\023\103\024" +
    "\065\025\100\026\076\027\064\030\101\031\063\032\066" +
    "\036\067\037\104\041\070\056\uffc5\057\316\102\077\001" +
    "\002\000\004\103\317\001\002\000\022\013\305\014\313" +
    "\015\306\016\311\017\314\020\312\021\304\022\307\001" +
    "\002\000\004\056\uffc6\001\002\000\076\004\uffd8\005\uffd8" +
    "\033\uffd8\035\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8\046" +
    "\uffd8\050\uffd8\052\uffd8\053\uffd8\063\uffd8\064\uffd8\065\uffd8" +
    "\070\uffd8\071\uffd8\072\uffd8\073\uffd8\074\uffd8\075\uffd8\076" +
    "\uffd8\077\uffd8\100\uffd8\103\uffd8\104\uffd8\105\uffd8\106\uffd8" +
    "\107\uffd8\110\uffd8\001\002\000\072\004\042\005\045\033" +
    "\031\035\032\042\010\043\015\044\020\045\005\046\013" +
    "\050\033\053\ufff4\063\147\064\017\065\216\070\212\071" +
    "\202\072\217\073\210\074\052\075\043\076\051\077\046" +
    "\103\207\104\040\105\047\106\027\107\054\110\030\001" +
    "\002\000\004\053\324\001\002\000\056\004\042\005\045" +
    "\033\031\035\032\042\010\043\015\044\020\045\005\046" +
    "\013\050\033\063\147\064\017\074\052\075\043\076\051" +
    "\077\046\103\035\104\040\105\047\106\027\107\054\110" +
    "\030\001\002\000\004\056\326\001\002\000\076\004\uff98" +
    "\005\uff98\033\uff98\035\uff98\042\uff98\043\uff98\044\uff98\045" +
    "\uff98\046\uff98\050\uff98\052\uff98\053\uff98\063\uff98\064\uff98" +
    "\065\uff98\070\uff98\071\uff98\072\uff98\073\uff98\074\uff98\075" +
    "\uff98\076\uff98\077\uff98\100\uff98\103\uff98\104\uff98\105\uff98" +
    "\106\uff98\107\uff98\110\uff98\001\002\000\006\060\330\103" +
    "\ufffa\001\002\000\004\050\331\001\002\000\004\046\332" +
    "\001\002\000\004\054\333\001\002\000\004\055\334\001" +
    "\002\000\004\061\335\001\002\000\004\051\336\001\002" +
    "\000\004\052\337\001\002\000\072\004\042\005\045\033" +
    "\031\035\032\042\010\043\015\044\020\045\005\046\013" +
    "\050\033\053\ufff4\063\147\064\017\065\216\070\212\071" +
    "\202\072\217\073\210\074\052\075\043\076\051\077\046" +
    "\103\207\104\040\105\047\106\027\107\054\110\030\001" +
    "\002\000\004\053\341\001\002\000\024\002\ufff7\042\ufff7" +
    "\043\ufff7\044\ufff7\045\ufff7\046\ufff7\062\ufff7\063\ufff7\064" +
    "\ufff7\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\340\000\014\003\006\005\015\011\010\046\013\047" +
    "\003\001\001\000\014\003\006\005\015\011\010\046\341" +
    "\047\003\001\001\000\002\001\001\000\006\004\156\005" +
    "\157\001\001\000\010\005\015\011\010\047\153\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\133\050\132\001\001\000\004\005\020\001\001\000" +
    "\002\001\001\000\006\012\023\050\022\001\001\000\004" +
    "\013\126\001\001\000\004\012\123\001\001\000\002\001" +
    "\001\000\022\016\033\017\052\026\036\027\040\030\025" +
    "\031\047\032\043\034\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\016\033\017\052\026\120\027\040\030" +
    "\025\031\047\032\043\034\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\016\033\017\052\026\117\027" +
    "\040\030\025\031\047\032\043\034\035\001\001\000\004" +
    "\033\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\016\033\017\052\020\057\026" +
    "\056\027\040\030\025\031\047\032\043\034\035\001\001" +
    "\000\002\001\001\000\004\033\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\016\033\017\052\020\113\026\056\027\040\030\025\031" +
    "\047\032\043\034\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\016\033\017\052\026\112\027\040\030" +
    "\025\031\047\032\043\034\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\016\033\017\052" +
    "\026\104\027\040\030\025\031\047\032\043\034\035\001" +
    "\001\000\004\033\074\001\001\000\022\016\033\017\052" +
    "\026\106\027\040\030\025\031\047\032\043\034\035\001" +
    "\001\000\004\033\074\001\001\000\022\016\033\017\052" +
    "\026\110\027\040\030\025\031\047\032\043\034\035\001" +
    "\001\000\004\033\074\001\001\000\002\001\001\000\004" +
    "\033\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\050\116\001\001\000\002\001\001\000\004\033\074" +
    "\001\001\000\004\033\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\016\033\017\052\026\131\027\040\030\025\031\047\032" +
    "\043\034\035\001\001\000\002\001\001\000\004\012\130" +
    "\001\001\000\002\001\001\000\004\033\074\001\001\000" +
    "\004\012\135\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\142\001\001\000\010\005\015\011\145\051\144" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\015\011\145\051\150\001\001\000\002" +
    "\001\001\000\004\012\142\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\156\005\157\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\005\165" +
    "\006\163\007\166\010\162\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\050\172\001\001" +
    "\000\002\001\001\000\010\005\165\007\166\010\170\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\002\221\005\015\011\202\014\214" +
    "\015\200\016\203\017\052\021\210\022\222\023\220\024" +
    "\212\026\213\027\040\030\025\031\047\032\043\034\035" +
    "\035\204\037\205\043\217\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\307\001\001\000" +
    "\022\016\033\017\052\026\300\027\040\030\025\031\047" +
    "\032\043\034\035\001\001\000\002\001\001\000\030\005" +
    "\015\011\266\016\033\017\052\026\267\027\040\030\025" +
    "\031\047\032\043\034\035\036\270\001\001\000\002\001" +
    "\001\000\004\033\074\001\001\000\052\002\261\005\015" +
    "\011\202\014\214\015\200\016\203\017\052\021\210\022" +
    "\222\023\220\024\212\026\213\027\040\030\025\031\047" +
    "\032\043\034\035\035\204\037\205\043\217\001\001\000" +
    "\022\016\033\017\052\026\240\027\040\030\025\031\047" +
    "\032\043\034\035\001\001\000\022\016\033\017\052\026" +
    "\224\027\040\030\025\031\047\032\043\034\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\074\001\001" +
    "\000\004\044\226\001\001\000\004\045\230\001\001\000" +
    "\022\016\033\017\052\026\233\027\040\030\025\031\047" +
    "\032\043\034\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\074\001\001\000\052" +
    "\002\235\005\015\011\202\014\214\015\200\016\203\017" +
    "\052\021\210\022\222\023\220\024\212\026\213\027\040" +
    "\030\025\031\047\032\043\034\035\035\204\037\205\043" +
    "\217\001\001\000\002\001\001\000\052\002\237\005\015" +
    "\011\202\014\214\015\200\016\203\017\052\021\210\022" +
    "\222\023\220\024\212\026\213\027\040\030\025\031\047" +
    "\032\043\034\035\035\204\037\205\043\217\001\001\000" +
    "\002\001\001\000\004\033\074\001\001\000\052\002\242" +
    "\005\015\011\202\014\214\015\200\016\203\017\052\021" +
    "\210\022\222\023\220\024\212\026\213\027\040\030\025" +
    "\031\047\032\043\034\035\035\204\037\205\043\217\001" +
    "\001\000\002\001\001\000\006\040\245\041\244\001\001" +
    "\000\006\040\260\041\244\001\001\000\004\042\253\001" +
    "\001\000\022\016\033\017\052\026\247\027\040\030\025" +
    "\031\047\032\043\034\035\001\001\000\004\033\074\001" +
    "\001\000\052\002\251\005\015\011\202\014\214\015\200" +
    "\016\203\017\052\021\210\022\222\023\220\024\212\026" +
    "\213\027\040\030\025\031\047\032\043\034\035\035\204" +
    "\037\205\043\217\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\002\256" +
    "\005\015\011\202\014\214\015\200\016\203\017\052\021" +
    "\210\022\222\023\220\024\212\026\213\027\040\030\025" +
    "\031\047\032\043\034\035\035\204\037\205\043\217\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\016\033\017\052\026\263\027" +
    "\040\030\025\031\047\032\043\034\035\001\001\000\004" +
    "\033\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\074\001\001\000\002\001\001" +
    "\000\052\002\272\005\015\011\202\014\214\015\200\016" +
    "\203\017\052\021\210\022\222\023\220\024\212\026\213" +
    "\027\040\030\025\031\047\032\043\034\035\035\204\037" +
    "\205\043\217\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\016\033\017\052\026\275\027\040\030\025\031" +
    "\047\032\043\034\035\001\001\000\004\033\074\001\001" +
    "\000\022\016\033\017\052\026\277\027\040\030\025\031" +
    "\047\032\043\034\035\001\001\000\004\033\074\001\001" +
    "\000\004\033\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\016\033\017\052\026\314\027" +
    "\040\030\025\031\047\032\043\034\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\074\001\001\000\004\024\317\001\001" +
    "\000\004\025\307\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\002\322\005\015\011\202\014\214\015\200" +
    "\016\203\017\052\021\210\022\222\023\220\024\212\026" +
    "\213\027\040\030\025\031\047\032\043\034\035\035\204" +
    "\037\205\043\217\001\001\000\002\001\001\000\030\005" +
    "\015\011\266\016\033\017\052\026\267\027\040\030\025" +
    "\031\047\032\043\034\035\036\324\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\002\337\005\015\011\202\014\214\015\200\016\203\017" +
    "\052\021\210\022\222\023\220\024\212\026\213\027\040" +
    "\030\025\031\047\032\043\034\035\035\204\037\205\043" +
    "\217\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



/***
    private Scanner scanner;
    public Parser(Scanner scanner) { 
        this.scanner = scanner;
    }
***/
    private HashMap<String, Double>tsymbols = new HashMap<>();

    public Double getSymbolValue(String id) {
         return tsymbols.get(id);
    }

    public void addSymbol(String id, Double value) {
        if (tsymbols.get(id) == null) {
            tsymbols.put(id, value);
        } else {
            tsymbols.replace(id, value);
        }
    }

    /**********************************************************************
     * sobrecàrrega de mètodes per gestionar els errors que es localitzin *
     **********************************************************************/

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
    **/ 
    @Override
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception{ 
        report_error("Error síntactico irrecuperable en la Línea " + 
        (cur_token.left)+ " Columna "+cur_token.right+". Componente " + cur_token.value + 
        " no reconocido.", cur_token); 
        done_parsing();
    }  

    /**
     * Método al que se llama automáticamente ante algún error sintactico.
    **/ 
    @Override
    public void syntax_error(Symbol cur_token){ 
        if (cur_token.sym != ParserSym.error)
        report_error("Error Sintáctico en la Línea " + (cur_token.left) +
        " Columna "+cur_token.right+ ". No se esperaba este componente: " +cur_token.value+".", cur_token); 
    } 

    @Override
    public void report_error(String message, Object info) {
        StringBuilder msg = new StringBuilder("ERROR");
        if (info instanceof Symbol) {
            ComplexSymbol token = (ComplexSymbol)info;
            Location l = token.getLeft();
            
            if (l != null) {
                msg.append(" (fila: ")
                   .append(l.getLine())
                   .append(", columna: ")
                   .append(l.getColumn())
                   .append(")");
            }
        }
        msg.append(": ").append(message);
        
        System.err.println(msg);
    }

    @Override
    public void report_fatal_error(String message, Object info) throws Exception {
        report_error("Error catastròfic ("+message+")", info);
        done_parsing();
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= SCRIPT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolScript start_val = (SymbolScript)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // SCRIPT ::= SCRIPT_ELEMENTO SCRIPT 
            {
              SymbolScript RESULT =null;
		int et1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int et1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolScriptElemento et1 = (SymbolScriptElemento)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int et2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int et2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolScript et2 = (SymbolScript)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolScript(et1, et2, et1left, et1right); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SCRIPT",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SCRIPT ::= MAIN 
            {
              SymbolScript RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolMain et = (SymbolMain)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolScript(et, etleft, etright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SCRIPT",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SCRIPT_ELEMENTO ::= KW_METHOD TIPO_RETORNO ID LPAREN PARAMS RPAREN LKEY BODY RKEY 
            {
              SymbolScriptElemento RESULT =null;
		int et1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int et1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		SymbolTipoRetorno et1 = (SymbolTipoRetorno)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int et2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int et2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String et2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int et3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int et3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SymbolParams et3 = (SymbolParams)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int et4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int et4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolBody et4 = (SymbolBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolScriptElemento(et1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SCRIPT_ELEMENTO",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SCRIPT_ELEMENTO ::= DECS 
            {
              SymbolScriptElemento RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolDecs et = (SymbolDecs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolScriptElemento(et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SCRIPT_ELEMENTO",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SCRIPT_ELEMENTO ::= KW_TUPLE ID LKEY MIEMBROS_TUPLA RKEY ENDINSTR 
            {
              SymbolScriptElemento RESULT =null;
		int et1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int et1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object et1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int et2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int et2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String et2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int et3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int et3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolMiembrosTupla et3 = (SymbolMiembrosTupla)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SCRIPT_ELEMENTO",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // TIPO_RETORNO ::= TIPO_VAR 
            {
              SymbolTipoRetorno RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolTipoVar et = (SymbolTipoVar)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolTipoRetorno(et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_RETORNO",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TIPO_RETORNO ::= KW_VOID 
            {
              SymbolTipoRetorno RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolTipoRetorno(et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_RETORNO",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MIEMBROS_TUPLA ::= DECS MIEMBROS_TUPLA 
            {
              SymbolMiembrosTupla RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MIEMBROS_TUPLA",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MIEMBROS_TUPLA ::= 
            {
              SymbolMiembrosTupla RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MIEMBROS_TUPLA",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MAIN ::= KW_METHOD KW_VOID KW_MAIN LPAREN KW_STRING LBRACKET RBRACKET KW_ARGS RPAREN LKEY BODY RKEY 
            {
              SymbolMain RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolBody et = (SymbolBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolMain(et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MAIN ::= MAIN SCRIPT_ELEMENTO 
            {
              SymbolMain RESULT =null;
		int et1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int et1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolMain et1 = (SymbolMain)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int et2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int et2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolScriptElemento et2 = (SymbolScriptElemento)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolMain(et1,et2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BODY ::= METODO_ELEMENTO BODY 
            {
              SymbolBody RESULT =null;
		int et1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int et1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolMetodoElemento et1 = (SymbolMetodoElemento)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int et2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int et2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolBody et2 = (SymbolBody)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBody(et1, et2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BODY",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BODY ::= 
            {
              SymbolBody RESULT =null;
		 RESULT = new SymbolBody(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BODY",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TIPO_VAR ::= KW_BOOL 
            {
              SymbolTipoVar RESULT =null;
		 RESULT = new SymbolTipoVar(ParserSym.KW_BOOL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_VAR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TIPO_VAR ::= KW_INT 
            {
              SymbolTipoVar RESULT =null;
		 RESULT = new SymbolTipoVar(ParserSym.KW_INT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_VAR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TIPO_VAR ::= KW_DOUBLE 
            {
              SymbolTipoVar RESULT =null;
		 RESULT = new SymbolTipoVar(ParserSym.KW_DOUBLE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_VAR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TIPO_VAR ::= KW_CHAR 
            {
              SymbolTipoVar RESULT =null;
		 RESULT = new SymbolTipoVar(ParserSym.KW_CHAR); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_VAR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TIPO_VAR ::= KW_STRING 
            {
              SymbolTipoVar RESULT =null;
		 RESULT = new SymbolTipoVar(ParserSym.KW_STRING); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_VAR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PARAMS ::= PARAMSLISTA 
            {
              SymbolParams RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolParamsLista et = (SymbolParamsLista)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMS",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PARAMS ::= 
            {
              SymbolParams RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMS",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PARAMSLISTA ::= PARAM COMMA PARAMSLISTA 
            {
              SymbolParamsLista RESULT =null;
		int et3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int et3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolParamsLista et3 = (SymbolParamsLista)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMSLISTA",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PARAMSLISTA ::= PARAM 
            {
              SymbolParamsLista RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMSLISTA",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PARAM ::= TIPO_VAR ID 
            {
              SymbolParam RESULT =null;
		int et1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int et1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolTipoVar et1 = (SymbolTipoVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int et2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int et2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String et2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PARAM ::= TIPO_VAR DIMENSIONES ID 
            {
              SymbolParam RESULT =null;
		int et1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int et1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolTipoVar et1 = (SymbolTipoVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int et2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int et2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolDimensiones et2 = (SymbolDimensiones)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int et3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int et3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String et3 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PARAM ::= KW_TUPLE ID ID 
            {
              SymbolParam RESULT =null;
		int et1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int et1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object et1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int et2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int et2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String et2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int et3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int et3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String et3 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECS ::= KW_CONST TIPO_VAR ID_DECS_LISTA ENDINSTR 
            {
              SymbolDecs RESULT =null;
		int et1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int et1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object et1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int et2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int et2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolTipoVar et2 = (SymbolTipoVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int et3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int et3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolIDDecsLista et3 = (SymbolIDDecsLista)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolDecs(true,et2,et3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECS ::= TIPO_VAR ID_DECS_LISTA ENDINSTR 
            {
              SymbolDecs RESULT =null;
		int et1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int et1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolTipoVar et1 = (SymbolTipoVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int et2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int et2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolIDDecsLista et2 = (SymbolIDDecsLista)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolDecs(false, et1,et2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECS ::= KW_CONST TIPO_VAR DIMENSIONES ID_DECS_LISTA ENDINSTR 
            {
              SymbolDecs RESULT =null;
		int et1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int et1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object et1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int et2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int et2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolTipoVar et2 = (SymbolTipoVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int et3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int et3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolDimensiones et3 = (SymbolDimensiones)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int et4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int et4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolIDDecsLista et4 = (SymbolIDDecsLista)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolDecs(true, et2, et3, et4); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECS ::= TIPO_VAR DIMENSIONES ID_DECS_LISTA ENDINSTR 
            {
              SymbolDecs RESULT =null;
		int et1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int et1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolTipoVar et1 = (SymbolTipoVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int et2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int et2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolDimensiones et2 = (SymbolDimensiones)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int et3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int et3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolIDDecsLista et3 = (SymbolIDDecsLista)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolDecs(false, et1, et2, et3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECS ::= KW_TUPLE ID ID_DECS_LISTA ENDINSTR 
            {
              SymbolDecs RESULT =null;
		int et1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int et1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object et1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int et2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int et2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String et2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int et3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int et3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolIDDecsLista et3 = (SymbolIDDecsLista)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DIMENSIONES ::= LBRACKET OPERAND RBRACKET DIMENSIONES 
            {
              SymbolDimensiones RESULT =null;
		int et1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int et1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolOperand et1 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int et2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int et2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolDimensiones et2 = (SymbolDimensiones)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolDimensiones(et1,et2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DIMENSIONES",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DIMENSIONES ::= LBRACKET OPERAND RBRACKET 
            {
              SymbolDimensiones RESULT =null;
		int et1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int et1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolOperand et1 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolDimensiones(et1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DIMENSIONES",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ID_DECS_LISTA ::= ID ASIG COMMA ID_DECS_LISTA 
            {
              SymbolIDDecsLista RESULT =null;
		int et1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int et1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String et1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int et2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int et2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolAsig et2 = (SymbolAsig)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int et3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int et3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolIDDecsLista et3 = (SymbolIDDecsLista)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolIDDecsLista(et1,et2,et3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_DECS_LISTA",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ID_DECS_LISTA ::= ID ASIG 
            {
              SymbolIDDecsLista RESULT =null;
		int et1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int et1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String et1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int et2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int et2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolAsig et2 = (SymbolAsig)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolIDDecsLista(et1,et2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_DECS_LISTA",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ASIG ::= AS_ASSIGN OPERAND 
            {
              SymbolAsig RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOperand et = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsig(et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ASIG ::= 
            {
              SymbolAsig RESULT =null;
		 RESULT = new SymbolAsig(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // METODO_ELEMENTO ::= INSTR 
            {
              SymbolMetodoElemento RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolInstr et = (SymbolInstr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolMetodoElemento(et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METODO_ELEMENTO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // METODO_ELEMENTO ::= LOOP 
            {
              SymbolMetodoElemento RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolLoop et = (SymbolLoop)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolMetodoElemento(et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METODO_ELEMENTO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // METODO_ELEMENTO ::= IF 
            {
              SymbolMetodoElemento RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolIf et = (SymbolIf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolMetodoElemento(et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METODO_ELEMENTO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // METODO_ELEMENTO ::= SWITCH 
            {
              SymbolMetodoElemento RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolSwitch et = (SymbolSwitch)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolMetodoElemento(et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METODO_ELEMENTO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INSTR ::= FCALL ENDINSTR 
            {
              SymbolInstr RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolFCall et = (SymbolFCall)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolInstr(et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTR",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INSTR ::= RETURN 
            {
              SymbolInstr RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolReturn et = (SymbolReturn)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolInstr(et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTR",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // INSTR ::= DECS 
            {
              SymbolInstr RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolDecs et = (SymbolDecs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolInstr(et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTR",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // INSTR ::= ASIGS 
            {
              SymbolInstr RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolAsigs et = (SymbolAsigs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolInstr(et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTR",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // INSTR ::= SWAP 
            {
              SymbolInstr RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolSwap et = (SymbolSwap)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolInstr(et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTR",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FCALL ::= METODO_NOMBRE LPAREN OPERANDS_LISTA RPAREN 
            {
              SymbolFCall RESULT =null;
		int et1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int et1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolMetodoNombre et1 = (SymbolMetodoNombre)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int et2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int et2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolOperandsLista et2 = (SymbolOperandsLista)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolFCall(et1,et2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FCALL",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FCALL ::= METODO_NOMBRE LPAREN RPAREN 
            {
              SymbolFCall RESULT =null;
		int et1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int et1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolMetodoNombre et1 = (SymbolMetodoNombre)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new SymbolFCall(et1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FCALL",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // METODO_NOMBRE ::= ID 
            {
              SymbolMetodoNombre RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String et = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolMetodoNombre(ParserSym.ID); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METODO_NOMBRE",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // METODO_NOMBRE ::= KW_IN 
            {
              SymbolMetodoNombre RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolMetodoNombre(ParserSym.KW_IN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METODO_NOMBRE",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // METODO_NOMBRE ::= KW_OUT 
            {
              SymbolMetodoNombre RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolMetodoNombre(ParserSym.KW_OUT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METODO_NOMBRE",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // METODO_NOMBRE ::= KW_WRITE 
            {
              SymbolMetodoNombre RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolMetodoNombre(ParserSym.KW_WRITE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METODO_NOMBRE",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // METODO_NOMBRE ::= KW_READ 
            {
              SymbolMetodoNombre RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolMetodoNombre(ParserSym.KW_READ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METODO_NOMBRE",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OPERANDS_LISTA ::= OPERAND COMMA OPERANDS_LISTA 
            {
              SymbolOperandsLista RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolOperand et = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int olleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int olright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOperandsLista ol = (SymbolOperandsLista)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOperandsLista(et, ol); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERANDS_LISTA",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPERANDS_LISTA ::= OPERAND 
            {
              SymbolOperandsLista RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOperand et = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOperandsLista(et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERANDS_LISTA",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // RETURN ::= KW_RETURN ENDINSTR 
            {
              SymbolReturn RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // RETURN ::= KW_RETURN OPERAND ENDINSTR 
            {
              SymbolReturn RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SWAP ::= OPERAND OP_SWAP OPERAND ENDINSTR 
            {
              SymbolSwap RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWAP",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ASIGS ::= ID_ASIG_LISTA ENDINSTR 
            {
              SymbolAsigs RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGS",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ID_ASIG_LISTA ::= ID ASIG_OP OPERAND COMMA ID_ASIG_LISTA 
            {
              SymbolIDAsigLista RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_ASIG_LISTA",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ID_ASIG_LISTA ::= ID ASIG_OP OPERAND 
            {
              SymbolIDAsigLista RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_ASIG_LISTA",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ASIG_OP ::= AS_ASSIGN 
            {
              SymbolAsigOp RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsigOp(ParserSym.AS_ASSIGN, et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG_OP",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ASIG_OP ::= AS_ADDA 
            {
              SymbolAsigOp RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsigOp(ParserSym.AS_ADDA, et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG_OP",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ASIG_OP ::= AS_SUBA 
            {
              SymbolAsigOp RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsigOp(ParserSym.AS_SUBA, et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG_OP",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ASIG_OP ::= AS_MULA 
            {
              SymbolAsigOp RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsigOp(ParserSym.AS_MULA, et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG_OP",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ASIG_OP ::= AS_DIVA 
            {
              SymbolAsigOp RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsigOp(ParserSym.AS_DIVA, et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG_OP",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ASIG_OP ::= AS_POTA 
            {
              SymbolAsigOp RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsigOp(ParserSym.AS_POTA, et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG_OP",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ASIG_OP ::= AS_ANDA 
            {
              SymbolAsigOp RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsigOp(ParserSym.AS_ANDA, et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG_OP",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ASIG_OP ::= AS_ORA 
            {
              SymbolAsigOp RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsigOp(ParserSym.AS_ORA, et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG_OP",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPERAND ::= ATOMIC_EXPRESSION 
            {
              SymbolOperand RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolAtomicExpression et = (SymbolAtomicExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOperand(et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPERAND ::= FCALL 
            {
              SymbolOperand RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolFCall et = (SymbolFCall)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOperand(et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPERAND ::= LPAREN OPERAND RPAREN 
            {
              SymbolOperand RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolOperand et = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolOperand(et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OPERAND ::= UNARY_EXPRESSION 
            {
              SymbolOperand RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolUnaryExpression et = (SymbolUnaryExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOperand(et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OPERAND ::= BINARY_EXPRESSION 
            {
              SymbolOperand RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolBinaryExpression et = (SymbolBinaryExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOperand(et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OPERAND ::= CONDITIONAL_EXPRESSION 
            {
              SymbolOperand RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolConditionalExpression et = (SymbolConditionalExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOperand(et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OPERAND ::= OPERAND AUX_MEMBER LBRACKET OPERAND RBRACKET 
            {
              SymbolOperand RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SymbolOperand arr = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idxleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idxright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolOperand idx = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolOperand(arr, idx); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OPERAND ::= OPERAND OP_MEMBER ID 
            {
              SymbolOperand RESULT =null;
		int tupleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tupleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolOperand tuple = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int memberleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int memberright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String member = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOperand(tuple, member); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // UNARY_EXPRESSION ::= UNARY_OPERATOR OPERAND 
            {
              SymbolUnaryExpression RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolUnaryOperator et = (SymbolUnaryOperator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOperand op = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolUnaryExpression(et, op); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNARY_EXPRESSION",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // BINARY_EXPRESSION ::= OPERAND BINARY_OPERATOR OPERAND 
            {
              SymbolBinaryExpression RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolOperand op1 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolBinaryOperator et = (SymbolBinaryOperator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOperand op2 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryExpression(et, op1, op2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_EXPRESSION",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CONDITIONAL_EXPRESSION ::= OPERAND OP_COND OPERAND ARROW OPERAND 
            {
              SymbolConditionalExpression RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SymbolOperand cond = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolOperand op1 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOperand op2 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolConditionalExpression(cond, op1, op2);; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDITIONAL_EXPRESSION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ATOMIC_EXPRESSION ::= ID 
            {
              SymbolAtomicExpression RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String et = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAtomicExpression(et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATOMIC_EXPRESSION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ATOMIC_EXPRESSION ::= STRING 
            {
              SymbolAtomicExpression RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String et = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAtomicExpression(et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATOMIC_EXPRESSION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ATOMIC_EXPRESSION ::= BOOL 
            {
              SymbolAtomicExpression RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean et = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAtomicExpression(et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATOMIC_EXPRESSION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ATOMIC_EXPRESSION ::= INT 
            {
              SymbolAtomicExpression RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer et = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAtomicExpression(et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATOMIC_EXPRESSION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ATOMIC_EXPRESSION ::= DOUBLE 
            {
              SymbolAtomicExpression RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double et = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAtomicExpression(et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATOMIC_EXPRESSION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ATOMIC_EXPRESSION ::= CHAR 
            {
              SymbolAtomicExpression RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character et = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAtomicExpression(et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATOMIC_EXPRESSION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // BINARY_OPERATOR ::= OP_ADD 
            {
              SymbolBinaryOperator RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_ADD, et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // BINARY_OPERATOR ::= OP_SUB 
            {
              SymbolBinaryOperator RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_SUB, et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // BINARY_OPERATOR ::= OP_MUL 
            {
              SymbolBinaryOperator RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_MUL, et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // BINARY_OPERATOR ::= OP_DIV 
            {
              SymbolBinaryOperator RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_DIV, et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // BINARY_OPERATOR ::= OP_MOD 
            {
              SymbolBinaryOperator RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_MOD, et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // BINARY_OPERATOR ::= OP_POT 
            {
              SymbolBinaryOperator RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_POT, et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // BINARY_OPERATOR ::= OP_EQ 
            {
              SymbolBinaryOperator RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_EQ, et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // BINARY_OPERATOR ::= OP_BEQ 
            {
              SymbolBinaryOperator RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_BEQ, et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // BINARY_OPERATOR ::= OP_BT 
            {
              SymbolBinaryOperator RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_BT, et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // BINARY_OPERATOR ::= OP_LEQ 
            {
              SymbolBinaryOperator RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_LEQ, et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // BINARY_OPERATOR ::= OP_LT 
            {
              SymbolBinaryOperator RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_LT, et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // BINARY_OPERATOR ::= OP_NEQ 
            {
              SymbolBinaryOperator RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_NEQ, et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // BINARY_OPERATOR ::= OP_AND 
            {
              SymbolBinaryOperator RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_AND, et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // BINARY_OPERATOR ::= OP_OR 
            {
              SymbolBinaryOperator RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_OR, et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // UNARY_OPERATOR ::= OP_NOT 
            {
              SymbolUnaryOperator RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolUnaryOperator(ParserSym.OP_NOT, et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNARY_OPERATOR",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // UNARY_OPERATOR ::= OP_INC 
            {
              SymbolUnaryOperator RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolUnaryOperator(ParserSym.OP_INC, et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNARY_OPERATOR",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // UNARY_OPERATOR ::= OP_DEC 
            {
              SymbolUnaryOperator RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolUnaryOperator(ParserSym.OP_DEC, et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNARY_OPERATOR",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // UNARY_OPERATOR ::= OP_PCT 
            {
              SymbolUnaryOperator RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolUnaryOperator(ParserSym.OP_PCT, et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNARY_OPERATOR",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // LOOP ::= KW_LOOP LOOP_COND LKEY BODY RKEY 
            {
              SymbolLoop RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOP",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // LOOP ::= KW_DO LKEY BODY RKEY LOOP_COND ENDINSTR 
            {
              SymbolLoop RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOP",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // LOOP_COND ::= OPERAND 
            {
              SymbolLoopCond RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOP_COND",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // LOOP_COND ::= DECS ENDINSTR OPERAND ENDINSTR OPERAND 
            {
              SymbolLoopCond RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOP_COND",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // IF ::= KW_IF OPERAND LKEY BODY RKEY ELIFS ELSE 
            {
              SymbolIf RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ELIFS ::= ELIF ELIFS 
            {
              SymbolElifs RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELIFS",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ELIFS ::= 
            {
              SymbolElifs RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELIFS",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ELIF ::= KW_ELIF OPERAND LKEY BODY RKEY 
            {
              SymbolElif RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELIF",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ELSE ::= KW_ELSE LKEY BODY RKEY 
            {
              SymbolElse RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ELSE ::= 
            {
              SymbolElse RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // SWITCH ::= KW_SWITCH OPERAND RKEY CASO PRED LKEY 
            {
              SymbolSwitch RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCH",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CASO ::= CASO KW_CASE OPERAND ARROW BODY 
            {
              SymbolCaso RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASO",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CASO ::= 
            {
              SymbolCaso RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASO",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // PRED ::= KW_CASE KW_DEFAULT ARROW BODY 
            {
              SymbolPred RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRED",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
