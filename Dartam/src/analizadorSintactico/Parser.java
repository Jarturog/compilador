
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadorSintactico;

import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.*;
import analizadorSintactico.symbols.*;
import java.io.PrintStream;
import java.util.HashMap;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\164\000\002\002\004\000\002\047\004\000\002\047" +
    "\003\000\002\050\003\000\002\050\003\000\002\051\003" +
    "\000\002\051\004\000\002\003\016\000\002\004\013\000" +
    "\002\002\004\000\002\002\002\000\002\005\003\000\002" +
    "\005\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\007\005" +
    "\000\002\007\003\000\002\007\002\000\002\010\004\000" +
    "\002\011\006\000\002\011\005\000\002\011\007\000\002" +
    "\011\006\000\002\011\007\000\002\011\010\000\002\052" +
    "\006\000\002\052\005\000\002\012\006\000\002\012\004" +
    "\000\002\013\004\000\002\013\002\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\015\004\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\016\006\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\020\003\000\002\020\002\000\002" +
    "\021\005\000\002\021\003\000\002\022\004\000\002\022" +
    "\005\000\002\023\006\000\002\024\004\000\002\025\007" +
    "\000\002\025\005\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\005\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\007\000" +
    "\002\027\005\000\002\030\004\000\002\031\005\000\002" +
    "\032\007\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\036\007\000\002" +
    "\036\010\000\002\037\003\000\002\037\007\000\002\040" +
    "\011\000\002\041\004\000\002\041\002\000\002\042\007" +
    "\000\002\043\006\000\002\043\002\000\002\044\010\000" +
    "\002\045\006\000\002\045\002\000\002\046\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\327\000\022\042\010\043\016\044\022\045\004\046" +
    "\013\062\005\063\012\064\020\001\002\000\006\054\ufff1" +
    "\103\ufff1\001\002\000\016\042\010\043\016\044\022\045" +
    "\004\046\013\047\317\001\002\000\024\002\ufffc\042\ufffc" +
    "\043\ufffc\044\ufffc\045\ufffc\046\ufffc\062\ufffc\063\ufffc\064" +
    "\ufffc\001\002\000\024\002\ufffd\042\ufffd\043\ufffd\044\ufffd" +
    "\045\ufffd\046\ufffd\062\ufffd\063\ufffd\064\ufffd\001\002\000" +
    "\006\054\ufff4\103\ufff4\001\002\000\022\042\010\043\016" +
    "\044\022\045\004\046\013\062\005\063\012\064\020\001" +
    "\002\000\004\103\307\001\002\000\006\054\ufff0\103\ufff0" +
    "\001\002\000\004\002\306\001\002\000\024\002\uffff\042" +
    "\010\043\016\044\022\045\004\046\013\062\142\063\012" +
    "\064\020\001\002\000\006\054\ufff3\103\ufff3\001\002\000" +
    "\006\054\027\103\025\001\002\000\014\042\010\043\016" +
    "\044\022\045\004\046\013\001\002\000\024\002\ufffe\042" +
    "\ufffe\043\ufffe\044\ufffe\045\ufffe\046\ufffe\062\ufffe\063\ufffe" +
    "\064\ufffe\001\002\000\006\054\ufff2\103\ufff2\001\002\000" +
    "\006\054\027\103\025\001\002\000\004\056\134\001\002" +
    "\000\012\013\127\053\uffe0\056\uffe0\057\uffe0\001\002\000" +
    "\004\103\025\001\002\000\040\004\045\005\050\033\033" +
    "\035\034\050\035\074\055\075\046\076\054\077\051\103" +
    "\037\104\042\105\052\106\030\107\056\110\032\001\002" +
    "\000\064\006\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0\023" +
    "\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0" +
    "\032\uffb0\034\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\051" +
    "\uffb0\052\uffb0\053\uffb0\055\uffb0\056\uffb0\057\uffb0\102\uffb0" +
    "\001\002\000\064\006\uffba\007\uffba\010\uffba\011\uffba\012" +
    "\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba\030\uffba" +
    "\031\uffba\032\uffba\034\uffba\036\uffba\037\uffba\040\uffba\041" +
    "\uffba\051\uffba\052\uffba\053\uffba\055\uffba\056\uffba\057\uffba" +
    "\102\uffba\001\002\000\064\006\uffae\007\uffae\010\uffae\011" +
    "\uffae\012\uffae\023\uffae\024\uffae\025\uffae\026\uffae\027\uffae" +
    "\030\uffae\031\uffae\032\uffae\034\uffae\036\uffae\037\uffae\040" +
    "\uffae\041\uffae\051\uffae\052\uffae\053\uffae\055\uffae\056\uffae" +
    "\057\uffae\102\uffae\001\002\000\040\004\uff9f\005\uff9f\033" +
    "\uff9f\035\uff9f\050\uff9f\074\uff9f\075\uff9f\076\uff9f\077\uff9f" +
    "\103\uff9f\104\uff9f\105\uff9f\106\uff9f\107\uff9f\110\uff9f\001" +
    "\002\000\040\004\uff9c\005\uff9c\033\uff9c\035\uff9c\050\uff9c" +
    "\074\uff9c\075\uff9c\076\uff9c\077\uff9c\103\uff9c\104\uff9c\105" +
    "\uff9c\106\uff9c\107\uff9c\110\uff9c\001\002\000\040\004\045" +
    "\005\050\033\033\035\034\050\035\074\055\075\046\076" +
    "\054\077\051\103\037\104\042\105\052\106\030\107\056" +
    "\110\032\001\002\000\064\006\uffbd\007\uffbd\010\uffbd\011" +
    "\uffbd\012\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd" +
    "\030\uffbd\031\uffbd\032\uffbd\034\uffbd\036\uffbd\037\uffbd\040" +
    "\uffbd\041\uffbd\051\uffbd\052\uffbd\053\uffbd\055\uffbd\056\uffbd" +
    "\057\uffbd\102\uffbd\001\002\000\066\006\uffb3\007\uffb3\010" +
    "\uffb3\011\uffb3\012\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3" +
    "\027\uffb3\030\uffb3\031\uffb3\032\uffb3\034\uffb3\036\uffb3\037" +
    "\uffb3\040\uffb3\041\uffb3\050\uffd5\051\uffb3\052\uffb3\053\uffb3" +
    "\055\uffb3\056\uffb3\057\uffb3\102\uffb3\001\002\000\040\004" +
    "\045\005\050\033\033\035\034\050\035\074\055\075\046" +
    "\076\054\077\051\103\037\104\042\105\052\106\030\107" +
    "\056\110\032\001\002\000\046\006\075\007\072\010\103" +
    "\011\074\012\063\023\104\024\066\025\101\026\077\027" +
    "\065\030\102\031\064\032\067\036\070\037\105\041\071" +
    "\055\120\102\100\001\002\000\064\006\uffb2\007\uffb2\010" +
    "\uffb2\011\uffb2\012\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2" +
    "\027\uffb2\030\uffb2\031\uffb2\032\uffb2\034\uffb2\036\uffb2\037" +
    "\uffb2\040\uffb2\041\uffb2\051\uffb2\052\uffb2\053\uffb2\055\uffb2" +
    "\056\uffb2\057\uffb2\102\uffb2\001\002\000\004\050\057\001" +
    "\002\000\064\006\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb" +
    "\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031" +
    "\uffbb\032\uffbb\034\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb" +
    "\051\uffbb\052\uffbb\053\uffbb\055\uffbb\056\uffbb\057\uffbb\102" +
    "\uffbb\001\002\000\040\004\uff9e\005\uff9e\033\uff9e\035\uff9e" +
    "\050\uff9e\074\uff9e\075\uff9e\076\uff9e\077\uff9e\103\uff9e\104" +
    "\uff9e\105\uff9e\106\uff9e\107\uff9e\110\uff9e\001\002\000\004" +
    "\050\uffd3\001\002\000\064\006\uffbe\007\uffbe\010\uffbe\011" +
    "\uffbe\012\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe" +
    "\030\uffbe\031\uffbe\032\uffbe\034\uffbe\036\uffbe\037\uffbe\040" +
    "\uffbe\041\uffbe\051\uffbe\052\uffbe\053\uffbe\055\uffbe\056\uffbe" +
    "\057\uffbe\102\uffbe\001\002\000\040\004\uff9d\005\uff9d\033" +
    "\uff9d\035\uff9d\050\uff9d\074\uff9d\075\uff9d\076\uff9d\077\uff9d" +
    "\103\uff9d\104\uff9d\105\uff9d\106\uff9d\107\uff9d\110\uff9d\001" +
    "\002\000\004\050\uffd2\001\002\000\064\006\uffb1\007\uffb1" +
    "\010\uffb1\011\uffb1\012\uffb1\023\uffb1\024\uffb1\025\uffb1\026" +
    "\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\034\uffb1\036\uffb1" +
    "\037\uffb1\040\uffb1\041\uffb1\051\uffb1\052\uffb1\053\uffb1\055" +
    "\uffb1\056\uffb1\057\uffb1\102\uffb1\001\002\000\064\006\uffb9" +
    "\007\uffb9\010\uffb9\011\uffb9\012\uffb9\023\uffb9\024\uffb9\025" +
    "\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\034\uffb9" +
    "\036\uffb9\037\uffb9\040\uffb9\041\uffb9\051\uffb9\052\uffb9\053" +
    "\uffb9\055\uffb9\056\uffb9\057\uffb9\102\uffb9\001\002\000\004" +
    "\050\uffd1\001\002\000\004\050\uffd4\001\002\000\064\006" +
    "\uffaf\007\uffaf\010\uffaf\011\uffaf\012\uffaf\023\uffaf\024\uffaf" +
    "\025\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\034" +
    "\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf\051\uffaf\052\uffaf" +
    "\053\uffaf\055\uffaf\056\uffaf\057\uffaf\102\uffaf\001\002\000" +
    "\042\004\045\005\050\033\033\035\034\050\035\051\uffcf" +
    "\074\055\075\046\076\054\077\051\103\037\104\042\105" +
    "\052\106\030\107\056\110\032\001\002\000\004\051\117" +
    "\001\002\000\050\006\075\007\072\010\103\011\074\012" +
    "\063\023\104\024\066\025\101\026\077\027\065\030\102" +
    "\031\064\032\067\036\070\037\105\041\071\051\uffcd\057" +
    "\073\102\100\001\002\000\004\051\uffd0\001\002\000\040" +
    "\004\uffa9\005\uffa9\033\uffa9\035\uffa9\050\uffa9\074\uffa9\075" +
    "\uffa9\076\uffa9\077\uffa9\103\uffa9\104\uffa9\105\uffa9\106\uffa9" +
    "\107\uffa9\110\uffa9\001\002\000\040\004\uffa1\005\uffa1\033" +
    "\uffa1\035\uffa1\050\uffa1\074\uffa1\075\uffa1\076\uffa1\077\uffa1" +
    "\103\uffa1\104\uffa1\105\uffa1\106\uffa1\107\uffa1\110\uffa1\001" +
    "\002\000\040\004\uffa3\005\uffa3\033\uffa3\035\uffa3\050\uffa3" +
    "\074\uffa3\075\uffa3\076\uffa3\077\uffa3\103\uffa3\104\uffa3\105" +
    "\uffa3\106\uffa3\107\uffa3\110\uffa3\001\002\000\040\004\uffa6" +
    "\005\uffa6\033\uffa6\035\uffa6\050\uffa6\074\uffa6\075\uffa6\076" +
    "\uffa6\077\uffa6\103\uffa6\104\uffa6\105\uffa6\106\uffa6\107\uffa6" +
    "\110\uffa6\001\002\000\040\004\uffa0\005\uffa0\033\uffa0\035" +
    "\uffa0\050\uffa0\074\uffa0\075\uffa0\076\uffa0\077\uffa0\103\uffa0" +
    "\104\uffa0\105\uffa0\106\uffa0\107\uffa0\110\uffa0\001\002\000" +
    "\040\004\uffa8\005\uffa8\033\uffa8\035\uffa8\050\uffa8\074\uffa8" +
    "\075\uffa8\076\uffa8\077\uffa8\103\uffa8\104\uffa8\105\uffa8\106" +
    "\uffa8\107\uffa8\110\uffa8\001\002\000\004\103\116\001\002" +
    "\000\040\004\uffac\005\uffac\033\uffac\035\uffac\050\uffac\074" +
    "\uffac\075\uffac\076\uffac\077\uffac\103\uffac\104\uffac\105\uffac" +
    "\106\uffac\107\uffac\110\uffac\001\002\000\040\004\045\005" +
    "\050\033\033\035\034\050\035\074\055\075\046\076\054" +
    "\077\051\103\037\104\042\105\052\106\030\107\056\110" +
    "\032\001\002\000\040\004\uffaa\005\uffaa\033\uffaa\035\uffaa" +
    "\050\uffaa\074\uffaa\075\uffaa\076\uffaa\077\uffaa\103\uffaa\104" +
    "\uffaa\105\uffaa\106\uffaa\107\uffaa\110\uffaa\001\002\000\040" +
    "\004\uffad\005\uffad\033\uffad\035\uffad\050\uffad\074\uffad\075" +
    "\uffad\076\uffad\077\uffad\103\uffad\104\uffad\105\uffad\106\uffad" +
    "\107\uffad\110\uffad\001\002\000\040\004\045\005\050\033" +
    "\033\035\034\050\035\074\055\075\046\076\054\077\051" +
    "\103\037\104\042\105\052\106\030\107\056\110\032\001" +
    "\002\000\040\004\uffa4\005\uffa4\033\uffa4\035\uffa4\050\uffa4" +
    "\074\uffa4\075\uffa4\076\uffa4\077\uffa4\103\uffa4\104\uffa4\105" +
    "\uffa4\106\uffa4\107\uffa4\110\uffa4\001\002\000\004\054\111" +
    "\001\002\000\040\004\uffa5\005\uffa5\033\uffa5\035\uffa5\050" +
    "\uffa5\074\uffa5\075\uffa5\076\uffa5\077\uffa5\103\uffa5\104\uffa5" +
    "\105\uffa5\106\uffa5\107\uffa5\110\uffa5\001\002\000\040\004" +
    "\uffa2\005\uffa2\033\uffa2\035\uffa2\050\uffa2\074\uffa2\075\uffa2" +
    "\076\uffa2\077\uffa2\103\uffa2\104\uffa2\105\uffa2\106\uffa2\107" +
    "\uffa2\110\uffa2\001\002\000\040\004\uffab\005\uffab\033\uffab" +
    "\035\uffab\050\uffab\074\uffab\075\uffab\076\uffab\077\uffab\103" +
    "\uffab\104\uffab\105\uffab\106\uffab\107\uffab\110\uffab\001\002" +
    "\000\040\004\uffa7\005\uffa7\033\uffa7\035\uffa7\050\uffa7\074" +
    "\uffa7\075\uffa7\076\uffa7\077\uffa7\103\uffa7\104\uffa7\105\uffa7" +
    "\106\uffa7\107\uffa7\110\uffa7\001\002\000\040\004\045\005" +
    "\050\033\033\035\034\050\035\074\055\075\046\076\054" +
    "\077\051\103\037\104\042\105\052\106\030\107\056\110" +
    "\032\001\002\000\046\006\075\007\072\010\103\011\074" +
    "\012\063\023\104\024\066\025\101\026\077\027\065\030" +
    "\102\031\064\032\067\036\070\037\105\040\107\041\071" +
    "\102\100\001\002\000\040\004\045\005\050\033\033\035" +
    "\034\050\035\074\055\075\046\076\054\077\051\103\037" +
    "\104\042\105\052\106\030\107\056\110\032\001\002\000" +
    "\064\006\075\007\072\010\103\011\074\012\063\023\104" +
    "\024\066\025\101\026\077\027\065\030\102\031\064\032" +
    "\067\034\uffb4\036\070\037\105\040\uffb4\041\071\051\uffb4" +
    "\052\uffb4\053\uffb4\055\uffb4\056\uffb4\057\uffb4\102\100\001" +
    "\002\000\040\004\045\005\050\033\033\035\034\050\035" +
    "\074\055\075\046\076\054\077\051\103\037\104\042\105" +
    "\052\106\030\107\056\110\032\001\002\000\046\006\075" +
    "\007\072\010\103\011\074\012\063\023\104\024\066\025" +
    "\101\026\077\027\065\030\102\031\064\032\067\036\070" +
    "\037\105\041\071\055\113\102\100\001\002\000\064\006" +
    "\uffb8\007\uffb8\010\uffb8\011\uffb8\012\uffb8\023\uffb8\024\uffb8" +
    "\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\034" +
    "\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\051\uffb8\052\uffb8" +
    "\053\uffb8\055\uffb8\056\uffb8\057\uffb8\102\uffb8\001\002\000" +
    "\064\006\075\007\072\010\103\011\074\012\063\023\104" +
    "\024\066\025\101\026\077\027\065\030\102\031\064\032" +
    "\067\034\uffb5\036\070\037\105\040\uffb5\041\071\051\uffb5" +
    "\052\uffb5\053\uffb5\055\uffb5\056\uffb5\057\uffb5\102\100\001" +
    "\002\000\004\051\uffce\001\002\000\064\006\uffb7\007\uffb7" +
    "\010\uffb7\011\uffb7\012\uffb7\023\uffb7\024\uffb7\025\uffb7\026" +
    "\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\034\uffb7\036\uffb7" +
    "\037\uffb7\040\uffb7\041\uffb7\051\uffb7\052\uffb7\053\uffb7\055" +
    "\uffb7\056\uffb7\057\uffb7\102\uffb7\001\002\000\064\006\uffd6" +
    "\007\uffd6\010\uffd6\011\uffd6\012\uffd6\023\uffd6\024\uffd6\025" +
    "\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\034\uffd6" +
    "\036\uffd6\037\uffd6\040\uffd6\041\uffd6\051\uffd6\052\uffd6\053" +
    "\uffd6\055\uffd6\056\uffd6\057\uffd6\102\uffd6\001\002\000\006" +
    "\054\027\103\uffe4\001\002\000\004\103\uffe5\001\002\000" +
    "\064\006\075\007\072\010\103\011\074\012\063\023\104" +
    "\024\066\025\101\026\077\027\065\030\102\031\064\032" +
    "\067\034\uffb6\036\070\037\105\040\uffb6\041\071\051\uffb6" +
    "\052\uffb6\053\uffb6\055\uffb6\056\uffb6\057\uffb6\102\100\001" +
    "\002\000\046\006\075\007\072\010\103\011\074\012\063" +
    "\023\104\024\066\025\101\026\077\027\065\030\102\031" +
    "\064\032\067\036\070\037\105\041\071\051\124\102\100" +
    "\001\002\000\064\006\uffbc\007\uffbc\010\uffbc\011\uffbc\012" +
    "\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc" +
    "\031\uffbc\032\uffbc\034\uffbc\036\uffbc\037\uffbc\040\uffbc\041" +
    "\uffbc\051\uffbc\052\uffbc\053\uffbc\055\uffbc\056\uffbc\057\uffbc" +
    "\102\uffbc\001\002\000\004\056\126\001\002\000\104\002" +
    "\uffe9\004\uffe9\005\uffe9\033\uffe9\035\uffe9\042\uffe9\043\uffe9" +
    "\044\uffe9\045\uffe9\046\uffe9\050\uffe9\052\uffe9\053\uffe9\056" +
    "\uffe9\062\uffe9\063\uffe9\064\uffe9\065\uffe9\070\uffe9\071\uffe9" +
    "\072\uffe9\073\uffe9\074\uffe9\075\uffe9\076\uffe9\077\uffe9\100" +
    "\uffe9\103\uffe9\104\uffe9\105\uffe9\106\uffe9\107\uffe9\110\uffe9" +
    "\001\002\000\040\004\045\005\050\033\033\035\034\050" +
    "\035\074\055\075\046\076\054\077\051\103\037\104\042" +
    "\105\052\106\030\107\056\110\032\001\002\000\010\053" +
    "\uffe2\056\uffe2\057\131\001\002\000\004\103\025\001\002" +
    "\000\006\053\uffe3\056\uffe3\001\002\000\052\006\075\007" +
    "\072\010\103\011\074\012\063\023\104\024\066\025\101" +
    "\026\077\027\065\030\102\031\064\032\067\036\070\037" +
    "\105\041\071\053\uffe1\056\uffe1\057\uffe1\102\100\001\002" +
    "\000\104\002\uffeb\004\uffeb\005\uffeb\033\uffeb\035\uffeb\042" +
    "\uffeb\043\uffeb\044\uffeb\045\uffeb\046\uffeb\050\uffeb\052\uffeb" +
    "\053\uffeb\056\uffeb\062\uffeb\063\uffeb\064\uffeb\065\uffeb\070" +
    "\uffeb\071\uffeb\072\uffeb\073\uffeb\074\uffeb\075\uffeb\076\uffeb" +
    "\077\uffeb\100\uffeb\103\uffeb\104\uffeb\105\uffeb\106\uffeb\107" +
    "\uffeb\110\uffeb\001\002\000\004\056\141\001\002\000\004" +
    "\103\025\001\002\000\004\056\140\001\002\000\104\002" +
    "\uffe8\004\uffe8\005\uffe8\033\uffe8\035\uffe8\042\uffe8\043\uffe8" +
    "\044\uffe8\045\uffe8\046\uffe8\050\uffe8\052\uffe8\053\uffe8\056" +
    "\uffe8\062\uffe8\063\uffe8\064\uffe8\065\uffe8\070\uffe8\071\uffe8" +
    "\072\uffe8\073\uffe8\074\uffe8\075\uffe8\076\uffe8\077\uffe8\100" +
    "\uffe8\103\uffe8\104\uffe8\105\uffe8\106\uffe8\107\uffe8\110\uffe8" +
    "\001\002\000\104\002\uffea\004\uffea\005\uffea\033\uffea\035" +
    "\uffea\042\uffea\043\uffea\044\uffea\045\uffea\046\uffea\050\uffea" +
    "\052\uffea\053\uffea\056\uffea\062\uffea\063\uffea\064\uffea\065" +
    "\uffea\070\uffea\071\uffea\072\uffea\073\uffea\074\uffea\075\uffea" +
    "\076\uffea\077\uffea\100\uffea\103\uffea\104\uffea\105\uffea\106" +
    "\uffea\107\uffea\110\uffea\001\002\000\016\042\010\043\016" +
    "\044\022\045\004\046\013\047\144\001\002\000\024\002" +
    "\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb\046\ufffb\062\ufffb" +
    "\063\ufffb\064\ufffb\001\002\000\004\103\ufff5\001\002\000" +
    "\004\103\147\001\002\000\004\103\ufff6\001\002\000\004" +
    "\050\150\001\002\000\016\042\010\043\016\044\022\045" +
    "\004\046\013\051\uffed\001\002\000\004\051\157\001\002" +
    "\000\006\051\uffee\057\155\001\002\000\004\103\154\001" +
    "\002\000\006\051\uffec\057\uffec\001\002\000\016\042\010" +
    "\043\016\044\022\045\004\046\013\051\uffed\001\002\000" +
    "\004\051\uffef\001\002\000\004\052\160\001\002\000\072" +
    "\004\045\005\050\033\033\035\034\042\010\043\016\044" +
    "\022\045\004\046\013\050\035\053\ufff7\063\012\064\020" +
    "\065\177\070\174\071\162\072\176\073\172\074\055\075" +
    "\046\076\054\077\051\103\170\104\042\105\052\106\030" +
    "\107\056\110\032\001\002\000\076\004\uffdf\005\uffdf\033" +
    "\uffdf\035\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf" +
    "\050\uffdf\052\uffdf\053\uffdf\063\uffdf\064\uffdf\065\uffdf\070" +
    "\uffdf\071\uffdf\072\uffdf\073\uffdf\074\uffdf\075\uffdf\076\uffdf" +
    "\077\uffdf\100\uffdf\103\uffdf\104\uffdf\105\uffdf\106\uffdf\107" +
    "\uffdf\110\uffdf\001\002\000\004\052\301\001\002\000\076" +
    "\004\045\005\050\033\033\035\034\042\010\043\016\044" +
    "\022\045\004\046\013\050\035\052\ufff7\053\ufff7\063\012" +
    "\064\020\065\177\070\174\071\162\072\176\073\172\074" +
    "\055\075\046\076\054\077\051\100\ufff7\103\170\104\042" +
    "\105\052\106\030\107\056\110\032\001\002\000\076\004" +
    "\uffd9\005\uffd9\033\uffd9\035\uffd9\042\uffd9\043\uffd9\044\uffd9" +
    "\045\uffd9\046\uffd9\050\uffd9\052\uffd9\053\uffd9\063\uffd9\064" +
    "\uffd9\065\uffd9\070\uffd9\071\uffd9\072\uffd9\073\uffd9\074\uffd9" +
    "\075\uffd9\076\uffd9\077\uffd9\100\uffd9\103\uffd9\104\uffd9\105" +
    "\uffd9\106\uffd9\107\uffd9\110\uffd9\001\002\000\050\006\uffbd" +
    "\007\uffbd\010\uffbd\011\uffbd\012\uffbd\023\uffbd\024\uffbd\025" +
    "\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\034\uffbd" +
    "\036\uffbd\037\uffbd\041\uffbd\056\277\102\uffbd\001\002\000" +
    "\076\004\uffde\005\uffde\033\uffde\035\uffde\042\uffde\043\uffde" +
    "\044\uffde\045\uffde\046\uffde\050\uffde\052\uffde\053\uffde\063" +
    "\uffde\064\uffde\065\uffde\070\uffde\071\uffde\072\uffde\073\uffde" +
    "\074\uffde\075\uffde\076\uffde\077\uffde\100\uffde\103\uffde\104" +
    "\uffde\105\uffde\106\uffde\107\uffde\110\uffde\001\002\000\076" +
    "\004\uffdd\005\uffdd\033\uffdd\035\uffdd\042\uffdd\043\uffdd\044" +
    "\uffdd\045\uffdd\046\uffdd\050\uffdd\052\uffdd\053\uffdd\063\uffdd" +
    "\064\uffdd\065\uffdd\070\uffdd\071\uffdd\072\uffdd\073\uffdd\074" +
    "\uffdd\075\uffdd\076\uffdd\077\uffdd\100\uffdd\103\uffdd\104\uffdd" +
    "\105\uffdd\106\uffdd\107\uffdd\110\uffdd\001\002\000\070\006" +
    "\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3\013\264\014\271" +
    "\015\265\016\267\017\272\020\270\021\262\022\266\023" +
    "\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3" +
    "\032\uffb3\034\uffb3\036\uffb3\037\uffb3\041\uffb3\050\uffd5\102" +
    "\uffb3\001\002\000\004\056\261\001\002\000\042\004\045" +
    "\005\050\033\033\035\034\050\035\056\257\074\055\075" +
    "\046\076\054\077\051\103\037\104\042\105\052\106\030" +
    "\107\056\110\032\001\002\000\076\004\uffda\005\uffda\033" +
    "\uffda\035\uffda\042\uffda\043\uffda\044\uffda\045\uffda\046\uffda" +
    "\050\uffda\052\uffda\053\uffda\063\uffda\064\uffda\065\uffda\070" +
    "\uffda\071\uffda\072\uffda\073\uffda\074\uffda\075\uffda\076\uffda" +
    "\077\uffda\100\uffda\103\uffda\104\uffda\105\uffda\106\uffda\107" +
    "\uffda\110\uffda\001\002\000\056\004\045\005\050\033\033" +
    "\035\034\042\010\043\016\044\022\045\004\046\013\050" +
    "\035\063\012\064\020\074\055\075\046\076\054\077\051" +
    "\103\037\104\042\105\052\106\030\107\056\110\032\001" +
    "\002\000\046\006\075\007\072\010\103\011\074\012\063" +
    "\023\104\024\066\025\101\026\077\027\065\030\102\031" +
    "\064\032\067\034\241\036\070\037\105\041\071\102\100" +
    "\001\002\000\040\004\045\005\050\033\033\035\034\050" +
    "\035\074\055\075\046\076\054\077\051\103\037\104\042" +
    "\105\052\106\030\107\056\110\032\001\002\000\040\004" +
    "\045\005\050\033\033\035\034\050\035\074\055\075\046" +
    "\076\054\077\051\103\037\104\042\105\052\106\030\107" +
    "\056\110\032\001\002\000\076\004\uffdc\005\uffdc\033\uffdc" +
    "\035\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc\050" +
    "\uffdc\052\uffdc\053\uffdc\063\uffdc\064\uffdc\065\uffdc\070\uffdc" +
    "\071\uffdc\072\uffdc\073\uffdc\074\uffdc\075\uffdc\076\uffdc\077" +
    "\uffdc\100\uffdc\103\uffdc\104\uffdc\105\uffdc\106\uffdc\107\uffdc" +
    "\110\uffdc\001\002\000\076\004\uffd8\005\uffd8\033\uffd8\035" +
    "\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8\050\uffd8" +
    "\052\uffd8\053\uffd8\063\uffd8\064\uffd8\065\uffd8\070\uffd8\071" +
    "\uffd8\072\uffd8\073\uffd8\074\uffd8\075\uffd8\076\uffd8\077\uffd8" +
    "\100\uffd8\103\uffd8\104\uffd8\105\uffd8\106\uffd8\107\uffd8\110" +
    "\uffd8\001\002\000\004\053\204\001\002\000\076\004\uffd7" +
    "\005\uffd7\033\uffd7\035\uffd7\042\uffd7\043\uffd7\044\uffd7\045" +
    "\uffd7\046\uffd7\050\uffd7\052\uffd7\053\uffd7\063\uffd7\064\uffd7" +
    "\065\uffd7\070\uffd7\071\uffd7\072\uffd7\073\uffd7\074\uffd7\075" +
    "\uffd7\076\uffd7\077\uffd7\100\uffd7\103\uffd7\104\uffd7\105\uffd7" +
    "\106\uffd7\107\uffd7\110\uffd7\001\002\000\024\002\ufff9\042" +
    "\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9\062\ufff9\063\ufff9" +
    "\064\ufff9\001\002\000\046\006\075\007\072\010\103\011" +
    "\074\012\063\023\104\024\066\025\101\026\077\027\065" +
    "\030\102\031\064\032\067\036\070\037\105\041\071\052" +
    "\206\102\100\001\002\000\072\004\045\005\050\033\033" +
    "\035\034\042\010\043\016\044\022\045\004\046\013\050" +
    "\035\053\ufff7\063\012\064\020\065\177\070\174\071\162" +
    "\072\176\073\172\074\055\075\046\076\054\077\051\103" +
    "\170\104\042\105\052\106\030\107\056\110\032\001\002" +
    "\000\004\053\210\001\002\000\102\004\uff95\005\uff95\033" +
    "\uff95\035\uff95\042\uff95\043\uff95\044\uff95\045\uff95\046\uff95" +
    "\050\uff95\052\uff95\053\uff95\063\uff95\064\uff95\065\uff95\066" +
    "\213\067\uff95\070\uff95\071\uff95\072\uff95\073\uff95\074\uff95" +
    "\075\uff95\076\uff95\077\uff95\100\uff95\103\uff95\104\uff95\105" +
    "\uff95\106\uff95\107\uff95\110\uff95\001\002\000\102\004\uff95" +
    "\005\uff95\033\uff95\035\uff95\042\uff95\043\uff95\044\uff95\045" +
    "\uff95\046\uff95\050\uff95\052\uff95\053\uff95\063\uff95\064\uff95" +
    "\065\uff95\066\213\067\uff95\070\uff95\071\uff95\072\uff95\073" +
    "\uff95\074\uff95\075\uff95\076\uff95\077\uff95\100\uff95\103\uff95" +
    "\104\uff95\105\uff95\106\uff95\107\uff95\110\uff95\001\002\000" +
    "\100\004\uff92\005\uff92\033\uff92\035\uff92\042\uff92\043\uff92" +
    "\044\uff92\045\uff92\046\uff92\050\uff92\052\uff92\053\uff92\063" +
    "\uff92\064\uff92\065\uff92\067\221\070\uff92\071\uff92\072\uff92" +
    "\073\uff92\074\uff92\075\uff92\076\uff92\077\uff92\100\uff92\103" +
    "\uff92\104\uff92\105\uff92\106\uff92\107\uff92\110\uff92\001\002" +
    "\000\040\004\045\005\050\033\033\035\034\050\035\074" +
    "\055\075\046\076\054\077\051\103\037\104\042\105\052" +
    "\106\030\107\056\110\032\001\002\000\046\006\075\007" +
    "\072\010\103\011\074\012\063\023\104\024\066\025\101" +
    "\026\077\027\065\030\102\031\064\032\067\036\070\037" +
    "\105\041\071\052\215\102\100\001\002\000\072\004\045" +
    "\005\050\033\033\035\034\042\010\043\016\044\022\045" +
    "\004\046\013\050\035\053\ufff7\063\012\064\020\065\177" +
    "\070\174\071\162\072\176\073\172\074\055\075\046\076" +
    "\054\077\051\103\170\104\042\105\052\106\030\107\056" +
    "\110\032\001\002\000\004\053\217\001\002\000\102\004" +
    "\uff94\005\uff94\033\uff94\035\uff94\042\uff94\043\uff94\044\uff94" +
    "\045\uff94\046\uff94\050\uff94\052\uff94\053\uff94\063\uff94\064" +
    "\uff94\065\uff94\066\uff94\067\uff94\070\uff94\071\uff94\072\uff94" +
    "\073\uff94\074\uff94\075\uff94\076\uff94\077\uff94\100\uff94\103" +
    "\uff94\104\uff94\105\uff94\106\uff94\107\uff94\110\uff94\001\002" +
    "\000\076\004\uff97\005\uff97\033\uff97\035\uff97\042\uff97\043" +
    "\uff97\044\uff97\045\uff97\046\uff97\050\uff97\052\uff97\053\uff97" +
    "\063\uff97\064\uff97\065\uff97\070\uff97\071\uff97\072\uff97\073" +
    "\uff97\074\uff97\075\uff97\076\uff97\077\uff97\100\uff97\103\uff97" +
    "\104\uff97\105\uff97\106\uff97\107\uff97\110\uff97\001\002\000" +
    "\004\052\222\001\002\000\072\004\045\005\050\033\033" +
    "\035\034\042\010\043\016\044\022\045\004\046\013\050" +
    "\035\053\ufff7\063\012\064\020\065\177\070\174\071\162" +
    "\072\176\073\172\074\055\075\046\076\054\077\051\103" +
    "\170\104\042\105\052\106\030\107\056\110\032\001\002" +
    "\000\004\053\224\001\002\000\076\004\uff93\005\uff93\033" +
    "\uff93\035\uff93\042\uff93\043\uff93\044\uff93\045\uff93\046\uff93" +
    "\050\uff93\052\uff93\053\uff93\063\uff93\064\uff93\065\uff93\070" +
    "\uff93\071\uff93\072\uff93\073\uff93\074\uff93\075\uff93\076\uff93" +
    "\077\uff93\100\uff93\103\uff93\104\uff93\105\uff93\106\uff93\107" +
    "\uff93\110\uff93\001\002\000\100\004\uff96\005\uff96\033\uff96" +
    "\035\uff96\042\uff96\043\uff96\044\uff96\045\uff96\046\uff96\050" +
    "\uff96\052\uff96\053\uff96\063\uff96\064\uff96\065\uff96\067\uff96" +
    "\070\uff96\071\uff96\072\uff96\073\uff96\074\uff96\075\uff96\076" +
    "\uff96\077\uff96\100\uff96\103\uff96\104\uff96\105\uff96\106\uff96" +
    "\107\uff96\110\uff96\001\002\000\046\006\075\007\072\010" +
    "\103\011\074\012\063\023\104\024\066\025\101\026\077" +
    "\027\065\030\102\031\064\032\067\036\070\037\105\041" +
    "\071\053\227\102\100\001\002\000\004\100\uff8f\001\002" +
    "\000\004\100\231\001\002\000\006\040\234\101\235\001" +
    "\002\000\004\052\233\001\002\000\076\004\uff91\005\uff91" +
    "\033\uff91\035\uff91\042\uff91\043\uff91\044\uff91\045\uff91\046" +
    "\uff91\050\uff91\052\uff91\053\uff91\063\uff91\064\uff91\065\uff91" +
    "\070\uff91\071\uff91\072\uff91\073\uff91\074\uff91\075\uff91\076" +
    "\uff91\077\uff91\100\uff91\103\uff91\104\uff91\105\uff91\106\uff91" +
    "\107\uff91\110\uff91\001\002\000\072\004\045\005\050\033" +
    "\033\035\034\042\010\043\016\044\022\045\004\046\013" +
    "\050\035\063\012\064\020\065\177\070\174\071\162\072" +
    "\176\073\172\074\055\075\046\076\054\077\051\100\ufff7" +
    "\103\170\104\042\105\052\106\030\107\056\110\032\001" +
    "\002\000\004\040\236\001\002\000\072\004\045\005\050" +
    "\033\033\035\034\042\010\043\016\044\022\045\004\046" +
    "\013\050\035\052\ufff7\063\012\064\020\065\177\070\174" +
    "\071\162\072\176\073\172\074\055\075\046\076\054\077" +
    "\051\103\170\104\042\105\052\106\030\107\056\110\032" +
    "\001\002\000\004\052\uff8e\001\002\000\004\100\uff90\001" +
    "\002\000\040\004\045\005\050\033\033\035\034\050\035" +
    "\074\055\075\046\076\054\077\051\103\037\104\042\105" +
    "\052\106\030\107\056\110\032\001\002\000\046\006\075" +
    "\007\072\010\103\011\074\012\063\023\104\024\066\025" +
    "\101\026\077\027\065\030\102\031\064\032\067\036\070" +
    "\037\105\041\071\056\243\102\100\001\002\000\076\004" +
    "\uffca\005\uffca\033\uffca\035\uffca\042\uffca\043\uffca\044\uffca" +
    "\045\uffca\046\uffca\050\uffca\052\uffca\053\uffca\063\uffca\064" +
    "\uffca\065\uffca\070\uffca\071\uffca\072\uffca\073\uffca\074\uffca" +
    "\075\uffca\076\uffca\077\uffca\100\uffca\103\uffca\104\uffca\105" +
    "\uffca\106\uffca\107\uffca\110\uffca\001\002\000\004\056\252" +
    "\001\002\000\050\006\075\007\072\010\103\011\074\012" +
    "\063\023\104\024\066\025\101\026\077\027\065\030\102" +
    "\031\064\032\067\036\070\037\105\041\071\052\uff99\056" +
    "\uff99\102\100\001\002\000\004\052\247\001\002\000\072" +
    "\004\045\005\050\033\033\035\034\042\010\043\016\044" +
    "\022\045\004\046\013\050\035\053\ufff7\063\012\064\020" +
    "\065\177\070\174\071\162\072\176\073\172\074\055\075" +
    "\046\076\054\077\051\103\170\104\042\105\052\106\030" +
    "\107\056\110\032\001\002\000\004\053\251\001\002\000" +
    "\076\004\uff9b\005\uff9b\033\uff9b\035\uff9b\042\uff9b\043\uff9b" +
    "\044\uff9b\045\uff9b\046\uff9b\050\uff9b\052\uff9b\053\uff9b\063" +
    "\uff9b\064\uff9b\065\uff9b\070\uff9b\071\uff9b\072\uff9b\073\uff9b" +
    "\074\uff9b\075\uff9b\076\uff9b\077\uff9b\100\uff9b\103\uff9b\104" +
    "\uff9b\105\uff9b\106\uff9b\107\uff9b\110\uff9b\001\002\000\040" +
    "\004\045\005\050\033\033\035\034\050\035\074\055\075" +
    "\046\076\054\077\051\103\037\104\042\105\052\106\030" +
    "\107\056\110\032\001\002\000\046\006\075\007\072\010" +
    "\103\011\074\012\063\023\104\024\066\025\101\026\077" +
    "\027\065\030\102\031\064\032\067\036\070\037\105\041" +
    "\071\056\254\102\100\001\002\000\040\004\045\005\050" +
    "\033\033\035\034\050\035\074\055\075\046\076\054\077" +
    "\051\103\037\104\042\105\052\106\030\107\056\110\032" +
    "\001\002\000\050\006\075\007\072\010\103\011\074\012" +
    "\063\023\104\024\066\025\101\026\077\027\065\030\102" +
    "\031\064\032\067\036\070\037\105\041\071\052\uff98\056" +
    "\uff98\102\100\001\002\000\046\006\075\007\072\010\103" +
    "\011\074\012\063\023\104\024\066\025\101\026\077\027" +
    "\065\030\102\031\064\032\067\036\070\037\105\041\071" +
    "\056\260\102\100\001\002\000\076\004\uffcc\005\uffcc\033" +
    "\uffcc\035\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc" +
    "\050\uffcc\052\uffcc\053\uffcc\063\uffcc\064\uffcc\065\uffcc\070" +
    "\uffcc\071\uffcc\072\uffcc\073\uffcc\074\uffcc\075\uffcc\076\uffcc" +
    "\077\uffcc\100\uffcc\103\uffcc\104\uffcc\105\uffcc\106\uffcc\107" +
    "\uffcc\110\uffcc\001\002\000\076\004\uffcb\005\uffcb\033\uffcb" +
    "\035\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\050" +
    "\uffcb\052\uffcb\053\uffcb\063\uffcb\064\uffcb\065\uffcb\070\uffcb" +
    "\071\uffcb\072\uffcb\073\uffcb\074\uffcb\075\uffcb\076\uffcb\077" +
    "\uffcb\100\uffcb\103\uffcb\104\uffcb\105\uffcb\106\uffcb\107\uffcb" +
    "\110\uffcb\001\002\000\076\004\uffc9\005\uffc9\033\uffc9\035" +
    "\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\050\uffc9" +
    "\052\uffc9\053\uffc9\063\uffc9\064\uffc9\065\uffc9\070\uffc9\071" +
    "\uffc9\072\uffc9\073\uffc9\074\uffc9\075\uffc9\076\uffc9\077\uffc9" +
    "\100\uffc9\103\uffc9\104\uffc9\105\uffc9\106\uffc9\107\uffc9\110" +
    "\uffc9\001\002\000\040\004\uffc0\005\uffc0\033\uffc0\035\uffc0" +
    "\050\uffc0\074\uffc0\075\uffc0\076\uffc0\077\uffc0\103\uffc0\104" +
    "\uffc0\105\uffc0\106\uffc0\107\uffc0\110\uffc0\001\002\000\040" +
    "\004\045\005\050\033\033\035\034\050\035\074\055\075" +
    "\046\076\054\077\051\103\037\104\042\105\052\106\030" +
    "\107\056\110\032\001\002\000\040\004\uffc6\005\uffc6\033" +
    "\uffc6\035\uffc6\050\uffc6\074\uffc6\075\uffc6\076\uffc6\077\uffc6" +
    "\103\uffc6\104\uffc6\105\uffc6\106\uffc6\107\uffc6\110\uffc6\001" +
    "\002\000\040\004\uffc4\005\uffc4\033\uffc4\035\uffc4\050\uffc4" +
    "\074\uffc4\075\uffc4\076\uffc4\077\uffc4\103\uffc4\104\uffc4\105" +
    "\uffc4\106\uffc4\107\uffc4\110\uffc4\001\002\000\040\004\uffbf" +
    "\005\uffbf\033\uffbf\035\uffbf\050\uffbf\074\uffbf\075\uffbf\076" +
    "\uffbf\077\uffbf\103\uffbf\104\uffbf\105\uffbf\106\uffbf\107\uffbf" +
    "\110\uffbf\001\002\000\040\004\uffc3\005\uffc3\033\uffc3\035" +
    "\uffc3\050\uffc3\074\uffc3\075\uffc3\076\uffc3\077\uffc3\103\uffc3" +
    "\104\uffc3\105\uffc3\106\uffc3\107\uffc3\110\uffc3\001\002\000" +
    "\040\004\uffc1\005\uffc1\033\uffc1\035\uffc1\050\uffc1\074\uffc1" +
    "\075\uffc1\076\uffc1\077\uffc1\103\uffc1\104\uffc1\105\uffc1\106" +
    "\uffc1\107\uffc1\110\uffc1\001\002\000\040\004\uffc5\005\uffc5" +
    "\033\uffc5\035\uffc5\050\uffc5\074\uffc5\075\uffc5\076\uffc5\077" +
    "\uffc5\103\uffc5\104\uffc5\105\uffc5\106\uffc5\107\uffc5\110\uffc5" +
    "\001\002\000\040\004\uffc2\005\uffc2\033\uffc2\035\uffc2\050" +
    "\uffc2\074\uffc2\075\uffc2\076\uffc2\077\uffc2\103\uffc2\104\uffc2" +
    "\105\uffc2\106\uffc2\107\uffc2\110\uffc2\001\002\000\050\006" +
    "\075\007\072\010\103\011\074\012\063\023\104\024\066" +
    "\025\101\026\077\027\065\030\102\031\064\032\067\036" +
    "\070\037\105\041\071\056\uffc7\057\274\102\100\001\002" +
    "\000\004\103\275\001\002\000\022\013\264\014\271\015" +
    "\265\016\267\017\272\020\270\021\262\022\266\001\002" +
    "\000\004\056\uffc8\001\002\000\076\004\uffdb\005\uffdb\033" +
    "\uffdb\035\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb" +
    "\050\uffdb\052\uffdb\053\uffdb\063\uffdb\064\uffdb\065\uffdb\070" +
    "\uffdb\071\uffdb\072\uffdb\073\uffdb\074\uffdb\075\uffdb\076\uffdb" +
    "\077\uffdb\100\uffdb\103\uffdb\104\uffdb\105\uffdb\106\uffdb\107" +
    "\uffdb\110\uffdb\001\002\000\010\052\ufff8\053\ufff8\100\ufff8" +
    "\001\002\000\072\004\045\005\050\033\033\035\034\042" +
    "\010\043\016\044\022\045\004\046\013\050\035\053\ufff7" +
    "\063\012\064\020\065\177\070\174\071\162\072\176\073" +
    "\172\074\055\075\046\076\054\077\051\103\170\104\042" +
    "\105\052\106\030\107\056\110\032\001\002\000\004\053" +
    "\303\001\002\000\056\004\045\005\050\033\033\035\034" +
    "\042\010\043\016\044\022\045\004\046\013\050\035\063" +
    "\012\064\020\074\055\075\046\076\054\077\051\103\037" +
    "\104\042\105\052\106\030\107\056\110\032\001\002\000" +
    "\004\056\305\001\002\000\076\004\uff9a\005\uff9a\033\uff9a" +
    "\035\uff9a\042\uff9a\043\uff9a\044\uff9a\045\uff9a\046\uff9a\050" +
    "\uff9a\052\uff9a\053\uff9a\063\uff9a\064\uff9a\065\uff9a\070\uff9a" +
    "\071\uff9a\072\uff9a\073\uff9a\074\uff9a\075\uff9a\076\uff9a\077" +
    "\uff9a\100\uff9a\103\uff9a\104\uff9a\105\uff9a\106\uff9a\107\uff9a" +
    "\110\uff9a\001\002\000\004\002\001\001\002\000\004\052" +
    "\310\001\002\000\006\053\312\103\025\001\002\000\004" +
    "\053\314\001\002\000\004\056\313\001\002\000\104\002" +
    "\uffe7\004\uffe7\005\uffe7\033\uffe7\035\uffe7\042\uffe7\043\uffe7" +
    "\044\uffe7\045\uffe7\046\uffe7\050\uffe7\052\uffe7\053\uffe7\056" +
    "\uffe7\062\uffe7\063\uffe7\064\uffe7\065\uffe7\070\uffe7\071\uffe7" +
    "\072\uffe7\073\uffe7\074\uffe7\075\uffe7\076\uffe7\077\uffe7\100" +
    "\uffe7\103\uffe7\104\uffe7\105\uffe7\106\uffe7\107\uffe7\110\uffe7" +
    "\001\002\000\004\056\315\001\002\000\104\002\uffe6\004" +
    "\uffe6\005\uffe6\033\uffe6\035\uffe6\042\uffe6\043\uffe6\044\uffe6" +
    "\045\uffe6\046\uffe6\050\uffe6\052\uffe6\053\uffe6\056\uffe6\062" +
    "\uffe6\063\uffe6\064\uffe6\065\uffe6\070\uffe6\071\uffe6\072\uffe6" +
    "\073\uffe6\074\uffe6\075\uffe6\076\uffe6\077\uffe6\100\uffe6\103" +
    "\uffe6\104\uffe6\105\uffe6\106\uffe6\107\uffe6\110\uffe6\001\002" +
    "\000\004\002\000\001\002\000\006\060\320\103\ufff5\001" +
    "\002\000\004\050\321\001\002\000\004\046\322\001\002" +
    "\000\004\054\323\001\002\000\004\055\324\001\002\000" +
    "\004\061\325\001\002\000\004\051\326\001\002\000\004" +
    "\052\327\001\002\000\072\004\045\005\050\033\033\035" +
    "\034\042\010\043\016\044\022\045\004\046\013\050\035" +
    "\053\ufff7\063\012\064\020\065\177\070\174\071\162\072" +
    "\176\073\172\074\055\075\046\076\054\077\051\103\170" +
    "\104\042\105\052\106\030\107\056\110\032\001\002\000" +
    "\004\053\331\001\002\000\024\002\ufffa\042\ufffa\043\ufffa" +
    "\044\ufffa\045\ufffa\046\ufffa\062\ufffa\063\ufffa\064\ufffa\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\327\000\020\003\005\004\020\006\016\011\006\047" +
    "\013\050\010\051\014\001\001\000\002\001\001\000\006" +
    "\005\144\006\145\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\003\005\004\020\006\016" +
    "\011\006\047\315\050\010\051\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\004\020" +
    "\006\016\011\006\050\142\001\001\000\002\001\001\000" +
    "\006\012\134\052\135\001\001\000\004\006\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\023\052" +
    "\025\001\001\000\002\001\001\000\004\013\127\001\001" +
    "\000\004\012\124\001\001\000\022\016\035\017\042\027" +
    "\040\030\043\031\030\032\052\033\046\035\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\016\035\017\042" +
    "\027\122\030\043\031\030\032\052\033\046\035\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\016\035" +
    "\017\042\027\121\030\043\031\030\032\052\033\046\035" +
    "\037\001\001\000\004\034\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\016\035" +
    "\017\042\020\057\021\061\027\060\030\043\031\030\032" +
    "\052\033\046\035\037\001\001\000\002\001\001\000\004" +
    "\034\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\016\035\017\042\021\114\027\060\030\043" +
    "\031\030\032\052\033\046\035\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\016\035\017\042\027\113" +
    "\030\043\031\030\032\052\033\046\035\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\016" +
    "\035\017\042\027\105\030\043\031\030\032\052\033\046" +
    "\035\037\001\001\000\004\034\075\001\001\000\022\016" +
    "\035\017\042\027\107\030\043\031\030\032\052\033\046" +
    "\035\037\001\001\000\004\034\075\001\001\000\022\016" +
    "\035\017\042\027\111\030\043\031\030\032\052\033\046" +
    "\035\037\001\001\000\004\034\075\001\001\000\002\001" +
    "\001\000\004\034\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\052\120\001\001\000" +
    "\002\001\001\000\004\034\075\001\001\000\004\034\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\016\035\017\042\027\132\030\043\031\030" +
    "\032\052\033\046\035\037\001\001\000\002\001\001\000" +
    "\004\012\131\001\001\000\002\001\001\000\004\034\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\136\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\144\006\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\006\152\007\150\010\151\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\006\152\007\155\010\151\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\002\201" +
    "\006\016\011\163\014\162\015\160\016\164\017\042\022" +
    "\172\023\202\024\200\025\170\027\174\030\043\031\030" +
    "\032\052\033\046\035\037\036\165\040\166\044\177\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\002\277" +
    "\006\016\011\163\014\162\015\160\016\164\017\042\022" +
    "\172\023\202\024\200\025\170\027\174\030\043\031\030" +
    "\032\052\033\046\035\037\036\165\040\166\044\177\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\262\001\001\000\002\001" +
    "\001\000\022\016\035\017\042\027\255\030\043\031\030" +
    "\032\052\033\046\035\037\001\001\000\002\001\001\000" +
    "\030\006\016\011\243\016\035\017\042\027\244\030\043" +
    "\031\030\032\052\033\046\035\037\037\245\001\001\000" +
    "\004\034\075\001\001\000\022\016\035\017\042\027\225" +
    "\030\043\031\030\032\052\033\046\035\037\001\001\000" +
    "\022\016\035\017\042\027\204\030\043\031\030\032\052" +
    "\033\046\035\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\034\075\001\001\000\052\002\206\006\016\011" +
    "\163\014\162\015\160\016\164\017\042\022\172\023\202" +
    "\024\200\025\170\027\174\030\043\031\030\032\052\033" +
    "\046\035\037\036\165\040\166\044\177\001\001\000\002" +
    "\001\001\000\006\041\211\042\210\001\001\000\006\041" +
    "\224\042\210\001\001\000\004\043\217\001\001\000\022" +
    "\016\035\017\042\027\213\030\043\031\030\032\052\033" +
    "\046\035\037\001\001\000\004\034\075\001\001\000\052" +
    "\002\215\006\016\011\163\014\162\015\160\016\164\017" +
    "\042\022\172\023\202\024\200\025\170\027\174\030\043" +
    "\031\030\032\052\033\046\035\037\036\165\040\166\044" +
    "\177\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\002\222\006\016\011" +
    "\163\014\162\015\160\016\164\017\042\022\172\023\202" +
    "\024\200\025\170\027\174\030\043\031\030\032\052\033" +
    "\046\035\037\036\165\040\166\044\177\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\034" +
    "\075\001\001\000\004\045\227\001\001\000\004\046\231" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\002\237\006\016\011\163\014\162\015\160" +
    "\016\164\017\042\022\172\023\202\024\200\025\170\027" +
    "\174\030\043\031\030\032\052\033\046\035\037\036\165" +
    "\040\166\044\177\001\001\000\002\001\001\000\052\002" +
    "\236\006\016\011\163\014\162\015\160\016\164\017\042" +
    "\022\172\023\202\024\200\025\170\027\174\030\043\031" +
    "\030\032\052\033\046\035\037\036\165\040\166\044\177" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\016" +
    "\035\017\042\027\241\030\043\031\030\032\052\033\046" +
    "\035\037\001\001\000\004\034\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\075\001\001\000\002" +
    "\001\001\000\052\002\247\006\016\011\163\014\162\015" +
    "\160\016\164\017\042\022\172\023\202\024\200\025\170" +
    "\027\174\030\043\031\030\032\052\033\046\035\037\036" +
    "\165\040\166\044\177\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\016\035\017\042\027\252\030\043\031" +
    "\030\032\052\033\046\035\037\001\001\000\004\034\075" +
    "\001\001\000\022\016\035\017\042\027\254\030\043\031" +
    "\030\032\052\033\046\035\037\001\001\000\004\034\075" +
    "\001\001\000\004\034\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\016\035\017\042\027\272\030\043\031\030\032\052\033" +
    "\046\035\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\075\001\001" +
    "\000\004\025\275\001\001\000\004\026\262\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\002\301\006\016\011\163\014\162\015\160\016\164\017" +
    "\042\022\172\023\202\024\200\025\170\027\174\030\043" +
    "\031\030\032\052\033\046\035\037\036\165\040\166\044" +
    "\177\001\001\000\002\001\001\000\030\006\016\011\243" +
    "\016\035\017\042\027\244\030\043\031\030\032\052\033" +
    "\046\035\037\037\303\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\310\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\002\327\006\016" +
    "\011\163\014\162\015\160\016\164\017\042\022\172\023" +
    "\202\024\200\025\170\027\174\030\043\031\030\032\052" +
    "\033\046\035\037\036\165\040\166\044\177\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



/***
    private Scanner scanner;
    public Parser(Scanner scanner) { 
        this.scanner = scanner;
    }
***/
    private HashMap<String, Double>tsymbols = new HashMap<>();

    public Double getSymbolValue(String id) {
         return tsymbols.get(id);
    }

    public void addSymbol(String id, Double value) {
        if (tsymbols.get(id) == null) {
            tsymbols.put(id, value);
        } else {
            tsymbols.replace(id, value);
        }
    }

    /**********************************************************************
     * sobrecàrrega de mètodes per gestionar els errors que es localitzin *
     **********************************************************************/

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
    **/ 
    @Override
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception{ 
        report_error("Error síntactico irrecuperable en la Línea " + 
        (cur_token.left)+ " Columna "+cur_token.right+". Componente " + cur_token.value + 
        " no reconocido.", cur_token); 
        done_parsing();
    }  

    /**
     * Método al que se llama automáticamente ante algún error sintactico.
    **/ 
    @Override
    public void syntax_error(Symbol cur_token){ 
        if (cur_token.sym != ParserSym.error)
        report_error("Error Sintáctico en la Línea " + (cur_token.left) +
        " Columna "+cur_token.right+ ". No se esperaba este componente: " +cur_token.value+".", cur_token); 
    } 

    @Override
    public void report_error(String message, Object info) {
        StringBuilder msg = new StringBuilder("ERROR");
        if (info instanceof Symbol) {
            ComplexSymbol token = (ComplexSymbol)info;
            Location l = token.getLeft();
            
            if (l != null) {
                msg.append(" (fila: ")
                   .append(l.getLine())
                   .append(", columna: ")
                   .append(l.getColumn())
                   .append(")");
            }
        }
        msg.append(": ").append(message);
        
        System.err.println(msg);
    }

    @Override
    public void report_fatal_error(String message, Object info) throws Exception {
        report_error("Error catastròfic ("+message+")", info);
        done_parsing();
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= SCRIPT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolScript start_val = (SymbolScript)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // SCRIPT ::= SCRIPTBM SCRIPT 
            {
              SymbolScript RESULT =null;
		int et1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int et1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolMethodsBeforeMain et1 = (SymbolMethodsBeforeMain)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int et2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int et2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolScript et2 = (SymbolScript)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolScript(et1, et2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SCRIPT",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SCRIPT ::= SCRIPTAM 
            {
              SymbolScript RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolMethodsAfterMain et = (SymbolMethodsAfterMain)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolScript(et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SCRIPT",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SCRIPTBM ::= METHOD 
            {
              SymbolMethodsBeforeMain RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SCRIPTBM",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SCRIPTBM ::= DECS 
            {
              SymbolMethodsBeforeMain RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SCRIPTBM",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SCRIPTAM ::= MAIN 
            {
              SymbolMethodsAfterMain RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolMain et = (SymbolMain)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolMethodsAfterMain(et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SCRIPTAM",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SCRIPTAM ::= SCRIPTAM SCRIPTBM 
            {
              SymbolMethodsAfterMain RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SCRIPTAM",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MAIN ::= KW_METHOD KW_VOID KW_MAIN LPAREN KW_STRING LBRACKET RBRACKET KW_ARGS RPAREN LKEY BODY RKEY 
            {
              SymbolMain RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolBody et = (SymbolBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolMain(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // METHOD ::= KW_METHOD TIPO_RETORNO ID LPAREN GETPARAMS RPAREN LKEY BODY RKEY 
            {
              SymbolMethod RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METHOD",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BODY ::= ELEMENTO_METODO BODY 
            {
              SymbolBody RESULT =null;
		int et1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int et1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolElementoMetodo et1 = (SymbolElementoMetodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int et2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int et2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolBody et2 = (SymbolBody)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBody(et1, et2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BODY",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BODY ::= 
            {
              SymbolBody RESULT =null;
		 RESULT = new SymbolBody(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BODY",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TIPO_RETORNO ::= TIPO_VAR 
            {
              SymbolTypeRetorno RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolTypeVar et = (SymbolTypeVar)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolTypeRetorno(et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_RETORNO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TIPO_RETORNO ::= KW_VOID 
            {
              SymbolTypeRetorno RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolTypeRetorno(et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_RETORNO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TIPO_VAR ::= KW_BOOL 
            {
              SymbolTypeVar RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_VAR",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TIPO_VAR ::= KW_INT 
            {
              SymbolTypeVar RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_VAR",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TIPO_VAR ::= KW_DOUBLE 
            {
              SymbolTypeVar RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_VAR",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TIPO_VAR ::= KW_CHAR 
            {
              SymbolTypeVar RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_VAR",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TIPO_VAR ::= KW_STRING 
            {
              SymbolTypeVar RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_VAR",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // GETPARAMS ::= PARAM COMMA GETPARAMS 
            {
              SymbolGetParams RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GETPARAMS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // GETPARAMS ::= PARAM 
            {
              SymbolGetParams RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GETPARAMS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // GETPARAMS ::= 
            {
              SymbolGetParams RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GETPARAMS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PARAM ::= TIPO_VAR ID 
            {
              SymbolParam RESULT =null;
		int et1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int et1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolTypeVar et1 = (SymbolTypeVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int et2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int et2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String et2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolParam(et1, et2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECS ::= KW_CONST TIPO_VAR IDDECSLISTA ENDINSTR 
            {
              SymbolDecs RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECS ::= TIPO_VAR IDDECSLISTA ENDINSTR 
            {
              SymbolDecs RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECS ::= KW_CONST TIPO_VAR DIMENSIONES IDDECSLISTA ENDINSTR 
            {
              SymbolDecs RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECS ::= TIPO_VAR DIMENSIONES IDDECSLISTA ENDINSTR 
            {
              SymbolDecs RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECS ::= KW_TUPLE ID LKEY RKEY ENDINSTR 
            {
              SymbolDecs RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECS ::= KW_TUPLE ID LKEY IDDECSLISTA RKEY ENDINSTR 
            {
              SymbolDecs RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DIMENSIONES ::= LBRACKET OPERAND RBRACKET DIMENSIONES 
            {
              SymbolDimensiones RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DIMENSIONES",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DIMENSIONES ::= LBRACKET OPERAND RBRACKET 
            {
              SymbolDimensiones RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DIMENSIONES",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // IDDECSLISTA ::= ID ASIG COMMA IDDECSLISTA 
            {
              SymbolIDDecsLista RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDDECSLISTA",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // IDDECSLISTA ::= ID ASIG 
            {
              SymbolIDDecsLista RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDDECSLISTA",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ASIG ::= AS_ASSIGN OPERAND 
            {
              SymbolAsig RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOperand et = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsig(et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ASIG ::= 
            {
              SymbolAsig RESULT =null;
		 RESULT = new SymbolAsig(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ELEMENTO_METODO ::= INSTR 
            {
              SymbolElementoMetodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_METODO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ELEMENTO_METODO ::= LOOP 
            {
              SymbolElementoMetodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_METODO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ELEMENTO_METODO ::= IF 
            {
              SymbolElementoMetodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_METODO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ELEMENTO_METODO ::= SWITCH 
            {
              SymbolElementoMetodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_METODO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // INSTR ::= FCALL ENDINSTR 
            {
              SymbolInstr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTR",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INSTR ::= RETURN 
            {
              SymbolInstr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTR",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INSTR ::= DECS 
            {
              SymbolInstr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTR",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INSTR ::= ASIGS 
            {
              SymbolInstr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTR",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INSTR ::= SWAP 
            {
              SymbolInstr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTR",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FCALL ::= FNAME LPAREN SETPARAMS RPAREN 
            {
              SymbolFCall RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FCALL",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FNAME ::= ID 
            {
              SymbolFName RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FNAME",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FNAME ::= KW_IN 
            {
              SymbolFName RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FNAME",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FNAME ::= KW_OUT 
            {
              SymbolFName RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FNAME",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FNAME ::= KW_WRITE 
            {
              SymbolFName RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FNAME",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FNAME ::= KW_READ 
            {
              SymbolFName RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FNAME",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SETPARAMS ::= OPERANDSLISTA 
            {
              SymbolSetParams RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SETPARAMS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SETPARAMS ::= 
            {
              SymbolSetParams RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SETPARAMS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPERANDSLISTA ::= OPERAND COMMA OPERANDSLISTA 
            {
              SymbolOperandsLista RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERANDSLISTA",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPERANDSLISTA ::= OPERAND 
            {
              SymbolOperandsLista RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERANDSLISTA",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // RETURN ::= KW_RETURN ENDINSTR 
            {
              SymbolReturn RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // RETURN ::= KW_RETURN OPERAND ENDINSTR 
            {
              SymbolReturn RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SWAP ::= OPERAND OP_SWAP OPERAND ENDINSTR 
            {
              SymbolSwap RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWAP",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ASIGS ::= IDASIGLISTA ENDINSTR 
            {
              SymbolAsigs RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGS",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // IDASIGLISTA ::= ID AS_OP OPERAND COMMA IDASIGLISTA 
            {
              SymbolIDAsigLista RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDASIGLISTA",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // IDASIGLISTA ::= ID AS_OP OPERAND 
            {
              SymbolIDAsigLista RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDASIGLISTA",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // AS_OP ::= AS_ASSIGN 
            {
              SymbolAsOp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AS_OP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // AS_OP ::= AS_ADDA 
            {
              SymbolAsOp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AS_OP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // AS_OP ::= AS_SUBA 
            {
              SymbolAsOp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AS_OP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // AS_OP ::= AS_MULA 
            {
              SymbolAsOp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AS_OP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // AS_OP ::= AS_DIVA 
            {
              SymbolAsOp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AS_OP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // AS_OP ::= AS_POTA 
            {
              SymbolAsOp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AS_OP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // AS_OP ::= AS_ANDA 
            {
              SymbolAsOp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AS_OP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // AS_OP ::= AS_ORA 
            {
              SymbolAsOp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AS_OP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPERAND ::= ATOMIC_EXPRESSION 
            {
              SymbolOperand RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPERAND ::= FCALL 
            {
              SymbolOperand RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPERAND ::= LPAREN OPERAND RPAREN 
            {
              SymbolOperand RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPERAND ::= UNARY_EXPRESSION 
            {
              SymbolOperand RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPERAND ::= BINARY_EXPRESSION 
            {
              SymbolOperand RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OPERAND ::= CONDITIONAL_EXPRESSION 
            {
              SymbolOperand RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OPERAND ::= OPERAND AUX_MEMBER LBRACKET OPERAND RBRACKET 
            {
              SymbolOperand RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OPERAND ::= OPERAND OP_MEMBER ID 
            {
              SymbolOperand RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // UNARY_EXPRESSION ::= UNARY_OPERATOR OPERAND 
            {
              SymbolUnaryExpression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNARY_EXPRESSION",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // BINARY_EXPRESSION ::= OPERAND BINARY_OPERATOR OPERAND 
            {
              SymbolBinaryExpression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_EXPRESSION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CONDITIONAL_EXPRESSION ::= OPERAND OP_COND OPERAND ARROW OPERAND 
            {
              SymbolConditionalExpression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDITIONAL_EXPRESSION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ATOMIC_EXPRESSION ::= ID 
            {
              SymbolAtomicExpression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATOMIC_EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ATOMIC_EXPRESSION ::= STRING 
            {
              SymbolAtomicExpression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATOMIC_EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ATOMIC_EXPRESSION ::= BOOL 
            {
              SymbolAtomicExpression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATOMIC_EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ATOMIC_EXPRESSION ::= INT 
            {
              SymbolAtomicExpression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATOMIC_EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ATOMIC_EXPRESSION ::= DOUBLE 
            {
              SymbolAtomicExpression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATOMIC_EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ATOMIC_EXPRESSION ::= CHAR 
            {
              SymbolAtomicExpression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATOMIC_EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // BINARY_OPERATOR ::= OP_ADD 
            {
              SymbolBinaryOperator RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // BINARY_OPERATOR ::= OP_SUB 
            {
              SymbolBinaryOperator RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // BINARY_OPERATOR ::= OP_MUL 
            {
              SymbolBinaryOperator RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // BINARY_OPERATOR ::= OP_DIV 
            {
              SymbolBinaryOperator RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // BINARY_OPERATOR ::= OP_MOD 
            {
              SymbolBinaryOperator RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // BINARY_OPERATOR ::= OP_POT 
            {
              SymbolBinaryOperator RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // BINARY_OPERATOR ::= OP_EQ 
            {
              SymbolBinaryOperator RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // BINARY_OPERATOR ::= OP_BEQ 
            {
              SymbolBinaryOperator RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // BINARY_OPERATOR ::= OP_BT 
            {
              SymbolBinaryOperator RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // BINARY_OPERATOR ::= OP_LEQ 
            {
              SymbolBinaryOperator RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // BINARY_OPERATOR ::= OP_LT 
            {
              SymbolBinaryOperator RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // BINARY_OPERATOR ::= OP_NEQ 
            {
              SymbolBinaryOperator RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // BINARY_OPERATOR ::= OP_AND 
            {
              SymbolBinaryOperator RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // BINARY_OPERATOR ::= OP_OR 
            {
              SymbolBinaryOperator RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // UNARY_OPERATOR ::= OP_NOT 
            {
              SymbolUnaryOperator RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNARY_OPERATOR",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // UNARY_OPERATOR ::= OP_INC 
            {
              SymbolUnaryOperator RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNARY_OPERATOR",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // UNARY_OPERATOR ::= OP_DEC 
            {
              SymbolUnaryOperator RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNARY_OPERATOR",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // UNARY_OPERATOR ::= OP_PCT 
            {
              SymbolUnaryOperator RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNARY_OPERATOR",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // LOOP ::= KW_LOOP LOOP_COND LKEY BODY RKEY 
            {
              SymbolLoop RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOP",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // LOOP ::= KW_DO LKEY BODY RKEY LOOP_COND ENDINSTR 
            {
              SymbolLoop RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOP",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // LOOP_COND ::= OPERAND 
            {
              SymbolLoopCond RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOP_COND",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // LOOP_COND ::= DECS ENDINSTR OPERAND ENDINSTR OPERAND 
            {
              SymbolLoopCond RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOP_COND",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // IF ::= KW_IF OPERAND LKEY BODY RKEY ELIFS ELSE 
            {
              SymbolIf RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ELIFS ::= ELIF ELIFS 
            {
              SymbolElifs RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELIFS",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ELIFS ::= 
            {
              SymbolElifs RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELIFS",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ELIF ::= KW_ELIF OPERAND LKEY BODY RKEY 
            {
              SymbolElif RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELIF",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ELSE ::= KW_ELSE LKEY BODY RKEY 
            {
              SymbolElse RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ELSE ::= 
            {
              SymbolElse RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // SWITCH ::= KW_SWITCH OPERAND RKEY CASO PRED LKEY 
            {
              SymbolSwitch RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCH",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // CASO ::= CASO KW_CASE ARROW BODY 
            {
              SymbolCaso RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASO",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CASO ::= 
            {
              SymbolCaso RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASO",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // PRED ::= KW_CASE KW_DEFAULT ARROW BODY 
            {
              SymbolPred RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRED",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
