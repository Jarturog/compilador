
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadorSintactico;

import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.*;
import analizadorSintactico.symbols.*;
import java.io.PrintStream;
import java.util.HashMap;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\170\000\002\002\004\000\002\047\004\000\002\047" +
    "\003\000\002\050\003\000\002\050\003\000\002\050\010" +
    "\000\002\051\003\000\002\051\004\000\002\053\004\000" +
    "\002\053\002\000\002\003\016\000\002\004\013\000\002" +
    "\002\004\000\002\002\002\000\002\005\003\000\002\005" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\007\003\000" +
    "\002\007\002\000\002\011\005\000\002\011\003\000\002" +
    "\010\004\000\002\010\005\000\002\010\005\000\002\012" +
    "\006\000\002\012\005\000\002\012\007\000\002\012\006" +
    "\000\002\012\006\000\002\052\006\000\002\052\005\000" +
    "\002\013\006\000\002\013\004\000\002\014\004\000\002" +
    "\014\002\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\016\004\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\017\006\000\002\017\005\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\021\005\000\002\021\003\000\002\022\004" +
    "\000\002\022\005\000\002\023\006\000\002\024\004\000" +
    "\002\025\007\000\002\025\005\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\005\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\007\000\002\027\005\000\002\030\004\000\002\031" +
    "\005\000\002\032\007\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\036" +
    "\007\000\002\036\010\000\002\037\003\000\002\037\007" +
    "\000\002\040\011\000\002\041\004\000\002\041\002\000" +
    "\002\042\007\000\002\043\006\000\002\043\002\000\002" +
    "\044\010\000\002\045\007\000\002\045\002\000\002\046" +
    "\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\342\000\022\042\010\043\016\044\022\045\004\046" +
    "\013\062\005\063\012\064\020\001\002\000\006\054\uffee" +
    "\103\uffee\001\002\000\016\042\010\043\016\044\022\045" +
    "\004\046\013\047\332\001\002\000\024\002\ufffb\042\ufffb" +
    "\043\ufffb\044\ufffb\045\ufffb\046\ufffb\062\ufffb\063\ufffb\064" +
    "\ufffb\001\002\000\024\002\ufffd\042\ufffd\043\ufffd\044\ufffd" +
    "\045\ufffd\046\ufffd\062\ufffd\063\ufffd\064\ufffd\001\002\000" +
    "\006\054\ufff1\103\ufff1\001\002\000\022\042\010\043\016" +
    "\044\022\045\004\046\013\062\005\063\012\064\020\001" +
    "\002\000\004\103\322\001\002\000\006\054\uffed\103\uffed" +
    "\001\002\000\004\002\321\001\002\000\024\002\uffff\042" +
    "\010\043\016\044\022\045\004\046\013\062\142\063\012" +
    "\064\020\001\002\000\006\054\ufff0\103\ufff0\001\002\000" +
    "\006\054\027\103\025\001\002\000\014\042\010\043\016" +
    "\044\022\045\004\046\013\001\002\000\024\002\ufffe\042" +
    "\ufffe\043\ufffe\044\ufffe\045\ufffe\046\ufffe\062\ufffe\063\ufffe" +
    "\064\ufffe\001\002\000\006\054\uffef\103\uffef\001\002\000" +
    "\006\054\027\103\025\001\002\000\004\056\134\001\002" +
    "\000\010\013\127\056\uffdb\057\uffdb\001\002\000\004\103" +
    "\025\001\002\000\040\004\044\005\050\033\033\035\034" +
    "\050\035\074\055\075\046\076\054\077\052\103\037\104" +
    "\042\105\051\106\031\107\056\110\032\001\002\000\064" +
    "\006\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6\023\uffb6\024" +
    "\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6" +
    "\034\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6\051\uffb6\052" +
    "\uffb6\053\uffb6\055\uffb6\056\uffb6\057\uffb6\102\uffb6\001\002" +
    "\000\064\006\uffac\007\uffac\010\uffac\011\uffac\012\uffac\023" +
    "\uffac\024\uffac\025\uffac\026\uffac\027\uffac\030\uffac\031\uffac" +
    "\032\uffac\034\uffac\036\uffac\037\uffac\040\uffac\041\uffac\051" +
    "\uffac\052\uffac\053\uffac\055\uffac\056\uffac\057\uffac\102\uffac" +
    "\001\002\000\064\006\uffaa\007\uffaa\010\uffaa\011\uffaa\012" +
    "\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa\030\uffaa" +
    "\031\uffaa\032\uffaa\034\uffaa\036\uffaa\037\uffaa\040\uffaa\041" +
    "\uffaa\051\uffaa\052\uffaa\053\uffaa\055\uffaa\056\uffaa\057\uffaa" +
    "\102\uffaa\001\002\000\040\004\uff9b\005\uff9b\033\uff9b\035" +
    "\uff9b\050\uff9b\074\uff9b\075\uff9b\076\uff9b\077\uff9b\103\uff9b" +
    "\104\uff9b\105\uff9b\106\uff9b\107\uff9b\110\uff9b\001\002\000" +
    "\040\004\uff98\005\uff98\033\uff98\035\uff98\050\uff98\074\uff98" +
    "\075\uff98\076\uff98\077\uff98\103\uff98\104\uff98\105\uff98\106" +
    "\uff98\107\uff98\110\uff98\001\002\000\040\004\044\005\050" +
    "\033\033\035\034\050\035\074\055\075\046\076\054\077" +
    "\052\103\037\104\042\105\051\106\031\107\056\110\032" +
    "\001\002\000\064\006\uffb9\007\uffb9\010\uffb9\011\uffb9\012" +
    "\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9" +
    "\031\uffb9\032\uffb9\034\uffb9\036\uffb9\037\uffb9\040\uffb9\041" +
    "\uffb9\051\uffb9\052\uffb9\053\uffb9\055\uffb9\056\uffb9\057\uffb9" +
    "\102\uffb9\001\002\000\066\006\uffaf\007\uffaf\010\uffaf\011" +
    "\uffaf\012\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf" +
    "\030\uffaf\031\uffaf\032\uffaf\034\uffaf\036\uffaf\037\uffaf\040" +
    "\uffaf\041\uffaf\050\uffcf\051\uffaf\052\uffaf\053\uffaf\055\uffaf" +
    "\056\uffaf\057\uffaf\102\uffaf\001\002\000\040\004\044\005" +
    "\050\033\033\035\034\050\035\074\055\075\046\076\054" +
    "\077\052\103\037\104\042\105\051\106\031\107\056\110" +
    "\032\001\002\000\046\006\076\007\073\010\104\011\075" +
    "\012\064\023\105\024\067\025\102\026\100\027\066\030" +
    "\103\031\065\032\070\036\071\037\106\041\072\055\120" +
    "\102\101\001\002\000\064\006\uffae\007\uffae\010\uffae\011" +
    "\uffae\012\uffae\023\uffae\024\uffae\025\uffae\026\uffae\027\uffae" +
    "\030\uffae\031\uffae\032\uffae\034\uffae\036\uffae\037\uffae\040" +
    "\uffae\041\uffae\051\uffae\052\uffae\053\uffae\055\uffae\056\uffae" +
    "\057\uffae\102\uffae\001\002\000\064\006\uffb7\007\uffb7\010" +
    "\uffb7\011\uffb7\012\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7" +
    "\027\uffb7\030\uffb7\031\uffb7\032\uffb7\034\uffb7\036\uffb7\037" +
    "\uffb7\040\uffb7\041\uffb7\051\uffb7\052\uffb7\053\uffb7\055\uffb7" +
    "\056\uffb7\057\uffb7\102\uffb7\001\002\000\040\004\uff9a\005" +
    "\uff9a\033\uff9a\035\uff9a\050\uff9a\074\uff9a\075\uff9a\076\uff9a" +
    "\077\uff9a\103\uff9a\104\uff9a\105\uff9a\106\uff9a\107\uff9a\110" +
    "\uff9a\001\002\000\004\050\057\001\002\000\004\050\uffcd" +
    "\001\002\000\064\006\uffba\007\uffba\010\uffba\011\uffba\012" +
    "\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba\030\uffba" +
    "\031\uffba\032\uffba\034\uffba\036\uffba\037\uffba\040\uffba\041" +
    "\uffba\051\uffba\052\uffba\053\uffba\055\uffba\056\uffba\057\uffba" +
    "\102\uffba\001\002\000\040\004\uff99\005\uff99\033\uff99\035" +
    "\uff99\050\uff99\074\uff99\075\uff99\076\uff99\077\uff99\103\uff99" +
    "\104\uff99\105\uff99\106\uff99\107\uff99\110\uff99\001\002\000" +
    "\064\006\uffad\007\uffad\010\uffad\011\uffad\012\uffad\023\uffad" +
    "\024\uffad\025\uffad\026\uffad\027\uffad\030\uffad\031\uffad\032" +
    "\uffad\034\uffad\036\uffad\037\uffad\040\uffad\041\uffad\051\uffad" +
    "\052\uffad\053\uffad\055\uffad\056\uffad\057\uffad\102\uffad\001" +
    "\002\000\004\050\uffcc\001\002\000\064\006\uffb5\007\uffb5" +
    "\010\uffb5\011\uffb5\012\uffb5\023\uffb5\024\uffb5\025\uffb5\026" +
    "\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\034\uffb5\036\uffb5" +
    "\037\uffb5\040\uffb5\041\uffb5\051\uffb5\052\uffb5\053\uffb5\055" +
    "\uffb5\056\uffb5\057\uffb5\102\uffb5\001\002\000\004\050\uffcb" +
    "\001\002\000\004\050\uffce\001\002\000\064\006\uffab\007" +
    "\uffab\010\uffab\011\uffab\012\uffab\023\uffab\024\uffab\025\uffab" +
    "\026\uffab\027\uffab\030\uffab\031\uffab\032\uffab\034\uffab\036" +
    "\uffab\037\uffab\040\uffab\041\uffab\051\uffab\052\uffab\053\uffab" +
    "\055\uffab\056\uffab\057\uffab\102\uffab\001\002\000\042\004" +
    "\044\005\050\033\033\035\034\050\035\051\060\074\055" +
    "\075\046\076\054\077\052\103\037\104\042\105\051\106" +
    "\031\107\056\110\032\001\002\000\064\006\uffd0\007\uffd0" +
    "\010\uffd0\011\uffd0\012\uffd0\023\uffd0\024\uffd0\025\uffd0\026" +
    "\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\034\uffd0\036\uffd0" +
    "\037\uffd0\040\uffd0\041\uffd0\051\uffd0\052\uffd0\053\uffd0\055" +
    "\uffd0\056\uffd0\057\uffd0\102\uffd0\001\002\000\050\006\076" +
    "\007\073\010\104\011\075\012\064\023\105\024\067\025" +
    "\102\026\100\027\066\030\103\031\065\032\070\036\071" +
    "\037\106\041\072\051\uffc9\057\074\102\101\001\002\000" +
    "\004\051\063\001\002\000\064\006\uffd1\007\uffd1\010\uffd1" +
    "\011\uffd1\012\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027" +
    "\uffd1\030\uffd1\031\uffd1\032\uffd1\034\uffd1\036\uffd1\037\uffd1" +
    "\040\uffd1\041\uffd1\051\uffd1\052\uffd1\053\uffd1\055\uffd1\056" +
    "\uffd1\057\uffd1\102\uffd1\001\002\000\040\004\uffa5\005\uffa5" +
    "\033\uffa5\035\uffa5\050\uffa5\074\uffa5\075\uffa5\076\uffa5\077" +
    "\uffa5\103\uffa5\104\uffa5\105\uffa5\106\uffa5\107\uffa5\110\uffa5" +
    "\001\002\000\040\004\uff9d\005\uff9d\033\uff9d\035\uff9d\050" +
    "\uff9d\074\uff9d\075\uff9d\076\uff9d\077\uff9d\103\uff9d\104\uff9d" +
    "\105\uff9d\106\uff9d\107\uff9d\110\uff9d\001\002\000\040\004" +
    "\uff9f\005\uff9f\033\uff9f\035\uff9f\050\uff9f\074\uff9f\075\uff9f" +
    "\076\uff9f\077\uff9f\103\uff9f\104\uff9f\105\uff9f\106\uff9f\107" +
    "\uff9f\110\uff9f\001\002\000\040\004\uffa2\005\uffa2\033\uffa2" +
    "\035\uffa2\050\uffa2\074\uffa2\075\uffa2\076\uffa2\077\uffa2\103" +
    "\uffa2\104\uffa2\105\uffa2\106\uffa2\107\uffa2\110\uffa2\001\002" +
    "\000\040\004\uff9c\005\uff9c\033\uff9c\035\uff9c\050\uff9c\074" +
    "\uff9c\075\uff9c\076\uff9c\077\uff9c\103\uff9c\104\uff9c\105\uff9c" +
    "\106\uff9c\107\uff9c\110\uff9c\001\002\000\040\004\uffa4\005" +
    "\uffa4\033\uffa4\035\uffa4\050\uffa4\074\uffa4\075\uffa4\076\uffa4" +
    "\077\uffa4\103\uffa4\104\uffa4\105\uffa4\106\uffa4\107\uffa4\110" +
    "\uffa4\001\002\000\004\103\117\001\002\000\040\004\uffa8" +
    "\005\uffa8\033\uffa8\035\uffa8\050\uffa8\074\uffa8\075\uffa8\076" +
    "\uffa8\077\uffa8\103\uffa8\104\uffa8\105\uffa8\106\uffa8\107\uffa8" +
    "\110\uffa8\001\002\000\040\004\044\005\050\033\033\035" +
    "\034\050\035\074\055\075\046\076\054\077\052\103\037" +
    "\104\042\105\051\106\031\107\056\110\032\001\002\000" +
    "\040\004\uffa6\005\uffa6\033\uffa6\035\uffa6\050\uffa6\074\uffa6" +
    "\075\uffa6\076\uffa6\077\uffa6\103\uffa6\104\uffa6\105\uffa6\106" +
    "\uffa6\107\uffa6\110\uffa6\001\002\000\040\004\uffa9\005\uffa9" +
    "\033\uffa9\035\uffa9\050\uffa9\074\uffa9\075\uffa9\076\uffa9\077" +
    "\uffa9\103\uffa9\104\uffa9\105\uffa9\106\uffa9\107\uffa9\110\uffa9" +
    "\001\002\000\040\004\044\005\050\033\033\035\034\050" +
    "\035\074\055\075\046\076\054\077\052\103\037\104\042" +
    "\105\051\106\031\107\056\110\032\001\002\000\040\004" +
    "\uffa0\005\uffa0\033\uffa0\035\uffa0\050\uffa0\074\uffa0\075\uffa0" +
    "\076\uffa0\077\uffa0\103\uffa0\104\uffa0\105\uffa0\106\uffa0\107" +
    "\uffa0\110\uffa0\001\002\000\004\054\112\001\002\000\040" +
    "\004\uffa1\005\uffa1\033\uffa1\035\uffa1\050\uffa1\074\uffa1\075" +
    "\uffa1\076\uffa1\077\uffa1\103\uffa1\104\uffa1\105\uffa1\106\uffa1" +
    "\107\uffa1\110\uffa1\001\002\000\040\004\uff9e\005\uff9e\033" +
    "\uff9e\035\uff9e\050\uff9e\074\uff9e\075\uff9e\076\uff9e\077\uff9e" +
    "\103\uff9e\104\uff9e\105\uff9e\106\uff9e\107\uff9e\110\uff9e\001" +
    "\002\000\040\004\uffa7\005\uffa7\033\uffa7\035\uffa7\050\uffa7" +
    "\074\uffa7\075\uffa7\076\uffa7\077\uffa7\103\uffa7\104\uffa7\105" +
    "\uffa7\106\uffa7\107\uffa7\110\uffa7\001\002\000\040\004\uffa3" +
    "\005\uffa3\033\uffa3\035\uffa3\050\uffa3\074\uffa3\075\uffa3\076" +
    "\uffa3\077\uffa3\103\uffa3\104\uffa3\105\uffa3\106\uffa3\107\uffa3" +
    "\110\uffa3\001\002\000\040\004\044\005\050\033\033\035" +
    "\034\050\035\074\055\075\046\076\054\077\052\103\037" +
    "\104\042\105\051\106\031\107\056\110\032\001\002\000" +
    "\046\006\076\007\073\010\104\011\075\012\064\023\105" +
    "\024\067\025\102\026\100\027\066\030\103\031\065\032" +
    "\070\036\071\037\106\040\110\041\072\102\101\001\002" +
    "\000\040\004\044\005\050\033\033\035\034\050\035\074" +
    "\055\075\046\076\054\077\052\103\037\104\042\105\051" +
    "\106\031\107\056\110\032\001\002\000\064\006\076\007" +
    "\073\010\104\011\075\012\064\023\105\024\067\025\102" +
    "\026\100\027\066\030\103\031\065\032\070\034\uffb0\036" +
    "\071\037\106\040\uffb0\041\072\051\uffb0\052\uffb0\053\uffb0" +
    "\055\uffb0\056\uffb0\057\uffb0\102\101\001\002\000\040\004" +
    "\044\005\050\033\033\035\034\050\035\074\055\075\046" +
    "\076\054\077\052\103\037\104\042\105\051\106\031\107" +
    "\056\110\032\001\002\000\046\006\076\007\073\010\104" +
    "\011\075\012\064\023\105\024\067\025\102\026\100\027" +
    "\066\030\103\031\065\032\070\036\071\037\106\041\072" +
    "\055\114\102\101\001\002\000\064\006\uffb4\007\uffb4\010" +
    "\uffb4\011\uffb4\012\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4" +
    "\027\uffb4\030\uffb4\031\uffb4\032\uffb4\034\uffb4\036\uffb4\037" +
    "\uffb4\040\uffb4\041\uffb4\051\uffb4\052\uffb4\053\uffb4\055\uffb4" +
    "\056\uffb4\057\uffb4\102\uffb4\001\002\000\064\006\076\007" +
    "\073\010\104\011\075\012\064\023\105\024\067\025\102" +
    "\026\100\027\066\030\103\031\065\032\070\034\uffb1\036" +
    "\071\037\106\040\uffb1\041\072\051\uffb1\052\uffb1\053\uffb1" +
    "\055\uffb1\056\uffb1\057\uffb1\102\101\001\002\000\004\051" +
    "\uffca\001\002\000\064\006\uffb3\007\uffb3\010\uffb3\011\uffb3" +
    "\012\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030" +
    "\uffb3\031\uffb3\032\uffb3\034\uffb3\036\uffb3\037\uffb3\040\uffb3" +
    "\041\uffb3\051\uffb3\052\uffb3\053\uffb3\055\uffb3\056\uffb3\057" +
    "\uffb3\102\uffb3\001\002\000\006\054\027\103\uffdf\001\002" +
    "\000\004\103\uffe0\001\002\000\064\006\076\007\073\010" +
    "\104\011\075\012\064\023\105\024\067\025\102\026\100" +
    "\027\066\030\103\031\065\032\070\034\uffb2\036\071\037" +
    "\106\040\uffb2\041\072\051\uffb2\052\uffb2\053\uffb2\055\uffb2" +
    "\056\uffb2\057\uffb2\102\101\001\002\000\046\006\076\007" +
    "\073\010\104\011\075\012\064\023\105\024\067\025\102" +
    "\026\100\027\066\030\103\031\065\032\070\036\071\037" +
    "\106\041\072\051\124\102\101\001\002\000\064\006\uffb8" +
    "\007\uffb8\010\uffb8\011\uffb8\012\uffb8\023\uffb8\024\uffb8\025" +
    "\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\034\uffb8" +
    "\036\uffb8\037\uffb8\040\uffb8\041\uffb8\051\uffb8\052\uffb8\053" +
    "\uffb8\055\uffb8\056\uffb8\057\uffb8\102\uffb8\001\002\000\004" +
    "\056\126\001\002\000\104\002\uffe3\004\uffe3\005\uffe3\033" +
    "\uffe3\035\uffe3\042\uffe3\043\uffe3\044\uffe3\045\uffe3\046\uffe3" +
    "\050\uffe3\052\uffe3\053\uffe3\056\uffe3\062\uffe3\063\uffe3\064" +
    "\uffe3\065\uffe3\070\uffe3\071\uffe3\072\uffe3\073\uffe3\074\uffe3" +
    "\075\uffe3\076\uffe3\077\uffe3\100\uffe3\103\uffe3\104\uffe3\105" +
    "\uffe3\106\uffe3\107\uffe3\110\uffe3\001\002\000\040\004\044" +
    "\005\050\033\033\035\034\050\035\074\055\075\046\076" +
    "\054\077\052\103\037\104\042\105\051\106\031\107\056" +
    "\110\032\001\002\000\006\056\uffdd\057\131\001\002\000" +
    "\004\103\025\001\002\000\004\056\uffde\001\002\000\050" +
    "\006\076\007\073\010\104\011\075\012\064\023\105\024" +
    "\067\025\102\026\100\027\066\030\103\031\065\032\070" +
    "\036\071\037\106\041\072\056\uffdc\057\uffdc\102\101\001" +
    "\002\000\104\002\uffe5\004\uffe5\005\uffe5\033\uffe5\035\uffe5" +
    "\042\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5\050\uffe5\052" +
    "\uffe5\053\uffe5\056\uffe5\062\uffe5\063\uffe5\064\uffe5\065\uffe5" +
    "\070\uffe5\071\uffe5\072\uffe5\073\uffe5\074\uffe5\075\uffe5\076" +
    "\uffe5\077\uffe5\100\uffe5\103\uffe5\104\uffe5\105\uffe5\106\uffe5" +
    "\107\uffe5\110\uffe5\001\002\000\004\056\141\001\002\000" +
    "\004\103\025\001\002\000\004\056\140\001\002\000\104" +
    "\002\uffe2\004\uffe2\005\uffe2\033\uffe2\035\uffe2\042\uffe2\043" +
    "\uffe2\044\uffe2\045\uffe2\046\uffe2\050\uffe2\052\uffe2\053\uffe2" +
    "\056\uffe2\062\uffe2\063\uffe2\064\uffe2\065\uffe2\070\uffe2\071" +
    "\uffe2\072\uffe2\073\uffe2\074\uffe2\075\uffe2\076\uffe2\077\uffe2" +
    "\100\uffe2\103\uffe2\104\uffe2\105\uffe2\106\uffe2\107\uffe2\110" +
    "\uffe2\001\002\000\104\002\uffe4\004\uffe4\005\uffe4\033\uffe4" +
    "\035\uffe4\042\uffe4\043\uffe4\044\uffe4\045\uffe4\046\uffe4\050" +
    "\uffe4\052\uffe4\053\uffe4\056\uffe4\062\uffe4\063\uffe4\064\uffe4" +
    "\065\uffe4\070\uffe4\071\uffe4\072\uffe4\073\uffe4\074\uffe4\075" +
    "\uffe4\076\uffe4\077\uffe4\100\uffe4\103\uffe4\104\uffe4\105\uffe4" +
    "\106\uffe4\107\uffe4\110\uffe4\001\002\000\016\042\010\043" +
    "\016\044\022\045\004\046\013\047\144\001\002\000\024" +
    "\002\ufffa\042\ufffa\043\ufffa\044\ufffa\045\ufffa\046\ufffa\062" +
    "\ufffa\063\ufffa\064\ufffa\001\002\000\004\103\ufff2\001\002" +
    "\000\004\103\147\001\002\000\004\103\ufff3\001\002\000" +
    "\004\050\150\001\002\000\020\042\010\043\016\044\022" +
    "\045\004\046\013\051\uffeb\063\153\001\002\000\004\051" +
    "\uffec\001\002\000\004\051\165\001\002\000\004\103\163" +
    "\001\002\000\006\054\027\103\160\001\002\000\006\051" +
    "\uffe9\057\156\001\002\000\016\042\010\043\016\044\022" +
    "\045\004\046\013\063\153\001\002\000\004\051\uffea\001" +
    "\002\000\006\051\uffe8\057\uffe8\001\002\000\004\103\162" +
    "\001\002\000\006\051\uffe7\057\uffe7\001\002\000\004\103" +
    "\164\001\002\000\006\051\uffe6\057\uffe6\001\002\000\004" +
    "\052\166\001\002\000\072\004\044\005\050\033\033\035" +
    "\034\042\010\043\016\044\022\045\004\046\013\050\035" +
    "\053\ufff4\063\174\064\020\065\206\070\203\071\170\072" +
    "\205\073\201\074\055\075\046\076\054\077\052\103\177" +
    "\104\042\105\051\106\031\107\056\110\032\001\002\000" +
    "\076\004\uffda\005\uffda\033\uffda\035\uffda\042\uffda\043\uffda" +
    "\044\uffda\045\uffda\046\uffda\050\uffda\052\uffda\053\uffda\063" +
    "\uffda\064\uffda\065\uffda\070\uffda\071\uffda\072\uffda\073\uffda" +
    "\074\uffda\075\uffda\076\uffda\077\uffda\100\uffda\103\uffda\104" +
    "\uffda\105\uffda\106\uffda\107\uffda\110\uffda\001\002\000\004" +
    "\052\314\001\002\000\076\004\uffd4\005\uffd4\033\uffd4\035" +
    "\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\050\uffd4" +
    "\052\uffd4\053\uffd4\063\uffd4\064\uffd4\065\uffd4\070\uffd4\071" +
    "\uffd4\072\uffd4\073\uffd4\074\uffd4\075\uffd4\076\uffd4\077\uffd4" +
    "\100\uffd4\103\uffd4\104\uffd4\105\uffd4\106\uffd4\107\uffd4\110" +
    "\uffd4\001\002\000\076\004\044\005\050\033\033\035\034" +
    "\042\010\043\016\044\022\045\004\046\013\050\035\052" +
    "\ufff4\053\ufff4\063\174\064\020\065\206\070\203\071\170" +
    "\072\205\073\201\074\055\075\046\076\054\077\052\100" +
    "\ufff4\103\177\104\042\105\051\106\031\107\056\110\032" +
    "\001\002\000\050\006\uffb9\007\uffb9\010\uffb9\011\uffb9\012" +
    "\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9" +
    "\031\uffb9\032\uffb9\034\uffb9\036\uffb9\037\uffb9\041\uffb9\056" +
    "\312\102\uffb9\001\002\000\004\103\307\001\002\000\076" +
    "\004\uffd9\005\uffd9\033\uffd9\035\uffd9\042\uffd9\043\uffd9\044" +
    "\uffd9\045\uffd9\046\uffd9\050\uffd9\052\uffd9\053\uffd9\063\uffd9" +
    "\064\uffd9\065\uffd9\070\uffd9\071\uffd9\072\uffd9\073\uffd9\074" +
    "\uffd9\075\uffd9\076\uffd9\077\uffd9\100\uffd9\103\uffd9\104\uffd9" +
    "\105\uffd9\106\uffd9\107\uffd9\110\uffd9\001\002\000\076\004" +
    "\uffd8\005\uffd8\033\uffd8\035\uffd8\042\uffd8\043\uffd8\044\uffd8" +
    "\045\uffd8\046\uffd8\050\uffd8\052\uffd8\053\uffd8\063\uffd8\064" +
    "\uffd8\065\uffd8\070\uffd8\071\uffd8\072\uffd8\073\uffd8\074\uffd8" +
    "\075\uffd8\076\uffd8\077\uffd8\100\uffd8\103\uffd8\104\uffd8\105" +
    "\uffd8\106\uffd8\107\uffd8\110\uffd8\001\002\000\070\006\uffaf" +
    "\007\uffaf\010\uffaf\011\uffaf\012\uffaf\013\273\014\301\015" +
    "\274\016\277\017\302\020\300\021\272\022\275\023\uffaf" +
    "\024\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\032" +
    "\uffaf\034\uffaf\036\uffaf\037\uffaf\041\uffaf\050\uffcf\102\uffaf" +
    "\001\002\000\004\056\271\001\002\000\042\004\044\005" +
    "\050\033\033\035\034\050\035\056\267\074\055\075\046" +
    "\076\054\077\052\103\037\104\042\105\051\106\031\107" +
    "\056\110\032\001\002\000\076\004\uffd5\005\uffd5\033\uffd5" +
    "\035\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\050" +
    "\uffd5\052\uffd5\053\uffd5\063\uffd5\064\uffd5\065\uffd5\070\uffd5" +
    "\071\uffd5\072\uffd5\073\uffd5\074\uffd5\075\uffd5\076\uffd5\077" +
    "\uffd5\100\uffd5\103\uffd5\104\uffd5\105\uffd5\106\uffd5\107\uffd5" +
    "\110\uffd5\001\002\000\056\004\044\005\050\033\033\035" +
    "\034\042\010\043\016\044\022\045\004\046\013\050\035" +
    "\063\174\064\020\074\055\075\046\076\054\077\052\103" +
    "\037\104\042\105\051\106\031\107\056\110\032\001\002" +
    "\000\046\006\076\007\073\010\104\011\075\012\064\023" +
    "\105\024\067\025\102\026\100\027\066\030\103\031\065" +
    "\032\070\034\251\036\071\037\106\041\072\102\101\001" +
    "\002\000\040\004\044\005\050\033\033\035\034\050\035" +
    "\074\055\075\046\076\054\077\052\103\037\104\042\105" +
    "\051\106\031\107\056\110\032\001\002\000\040\004\044" +
    "\005\050\033\033\035\034\050\035\074\055\075\046\076" +
    "\054\077\052\103\037\104\042\105\051\106\031\107\056" +
    "\110\032\001\002\000\076\004\uffd7\005\uffd7\033\uffd7\035" +
    "\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7\050\uffd7" +
    "\052\uffd7\053\uffd7\063\uffd7\064\uffd7\065\uffd7\070\uffd7\071" +
    "\uffd7\072\uffd7\073\uffd7\074\uffd7\075\uffd7\076\uffd7\077\uffd7" +
    "\100\uffd7\103\uffd7\104\uffd7\105\uffd7\106\uffd7\107\uffd7\110" +
    "\uffd7\001\002\000\076\004\uffd3\005\uffd3\033\uffd3\035\uffd3" +
    "\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\050\uffd3\052" +
    "\uffd3\053\uffd3\063\uffd3\064\uffd3\065\uffd3\070\uffd3\071\uffd3" +
    "\072\uffd3\073\uffd3\074\uffd3\075\uffd3\076\uffd3\077\uffd3\100" +
    "\uffd3\103\uffd3\104\uffd3\105\uffd3\106\uffd3\107\uffd3\110\uffd3" +
    "\001\002\000\004\053\213\001\002\000\076\004\uffd2\005" +
    "\uffd2\033\uffd2\035\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2" +
    "\046\uffd2\050\uffd2\052\uffd2\053\uffd2\063\uffd2\064\uffd2\065" +
    "\uffd2\070\uffd2\071\uffd2\072\uffd2\073\uffd2\074\uffd2\075\uffd2" +
    "\076\uffd2\077\uffd2\100\uffd2\103\uffd2\104\uffd2\105\uffd2\106" +
    "\uffd2\107\uffd2\110\uffd2\001\002\000\024\002\ufff6\042\ufff6" +
    "\043\ufff6\044\ufff6\045\ufff6\046\ufff6\062\ufff6\063\ufff6\064" +
    "\ufff6\001\002\000\046\006\076\007\073\010\104\011\075" +
    "\012\064\023\105\024\067\025\102\026\100\027\066\030" +
    "\103\031\065\032\070\036\071\037\106\041\072\052\215" +
    "\102\101\001\002\000\072\004\044\005\050\033\033\035" +
    "\034\042\010\043\016\044\022\045\004\046\013\050\035" +
    "\053\ufff4\063\174\064\020\065\206\070\203\071\170\072" +
    "\205\073\201\074\055\075\046\076\054\077\052\103\177" +
    "\104\042\105\051\106\031\107\056\110\032\001\002\000" +
    "\004\053\217\001\002\000\102\004\uff91\005\uff91\033\uff91" +
    "\035\uff91\042\uff91\043\uff91\044\uff91\045\uff91\046\uff91\050" +
    "\uff91\052\uff91\053\uff91\063\uff91\064\uff91\065\uff91\066\222" +
    "\067\uff91\070\uff91\071\uff91\072\uff91\073\uff91\074\uff91\075" +
    "\uff91\076\uff91\077\uff91\100\uff91\103\uff91\104\uff91\105\uff91" +
    "\106\uff91\107\uff91\110\uff91\001\002\000\102\004\uff91\005" +
    "\uff91\033\uff91\035\uff91\042\uff91\043\uff91\044\uff91\045\uff91" +
    "\046\uff91\050\uff91\052\uff91\053\uff91\063\uff91\064\uff91\065" +
    "\uff91\066\222\067\uff91\070\uff91\071\uff91\072\uff91\073\uff91" +
    "\074\uff91\075\uff91\076\uff91\077\uff91\100\uff91\103\uff91\104" +
    "\uff91\105\uff91\106\uff91\107\uff91\110\uff91\001\002\000\100" +
    "\004\uff8e\005\uff8e\033\uff8e\035\uff8e\042\uff8e\043\uff8e\044" +
    "\uff8e\045\uff8e\046\uff8e\050\uff8e\052\uff8e\053\uff8e\063\uff8e" +
    "\064\uff8e\065\uff8e\067\230\070\uff8e\071\uff8e\072\uff8e\073" +
    "\uff8e\074\uff8e\075\uff8e\076\uff8e\077\uff8e\100\uff8e\103\uff8e" +
    "\104\uff8e\105\uff8e\106\uff8e\107\uff8e\110\uff8e\001\002\000" +
    "\040\004\044\005\050\033\033\035\034\050\035\074\055" +
    "\075\046\076\054\077\052\103\037\104\042\105\051\106" +
    "\031\107\056\110\032\001\002\000\046\006\076\007\073" +
    "\010\104\011\075\012\064\023\105\024\067\025\102\026" +
    "\100\027\066\030\103\031\065\032\070\036\071\037\106" +
    "\041\072\052\224\102\101\001\002\000\072\004\044\005" +
    "\050\033\033\035\034\042\010\043\016\044\022\045\004" +
    "\046\013\050\035\053\ufff4\063\174\064\020\065\206\070" +
    "\203\071\170\072\205\073\201\074\055\075\046\076\054" +
    "\077\052\103\177\104\042\105\051\106\031\107\056\110" +
    "\032\001\002\000\004\053\226\001\002\000\102\004\uff90" +
    "\005\uff90\033\uff90\035\uff90\042\uff90\043\uff90\044\uff90\045" +
    "\uff90\046\uff90\050\uff90\052\uff90\053\uff90\063\uff90\064\uff90" +
    "\065\uff90\066\uff90\067\uff90\070\uff90\071\uff90\072\uff90\073" +
    "\uff90\074\uff90\075\uff90\076\uff90\077\uff90\100\uff90\103\uff90" +
    "\104\uff90\105\uff90\106\uff90\107\uff90\110\uff90\001\002\000" +
    "\076\004\uff93\005\uff93\033\uff93\035\uff93\042\uff93\043\uff93" +
    "\044\uff93\045\uff93\046\uff93\050\uff93\052\uff93\053\uff93\063" +
    "\uff93\064\uff93\065\uff93\070\uff93\071\uff93\072\uff93\073\uff93" +
    "\074\uff93\075\uff93\076\uff93\077\uff93\100\uff93\103\uff93\104" +
    "\uff93\105\uff93\106\uff93\107\uff93\110\uff93\001\002\000\004" +
    "\052\231\001\002\000\072\004\044\005\050\033\033\035" +
    "\034\042\010\043\016\044\022\045\004\046\013\050\035" +
    "\053\ufff4\063\174\064\020\065\206\070\203\071\170\072" +
    "\205\073\201\074\055\075\046\076\054\077\052\103\177" +
    "\104\042\105\051\106\031\107\056\110\032\001\002\000" +
    "\004\053\233\001\002\000\076\004\uff8f\005\uff8f\033\uff8f" +
    "\035\uff8f\042\uff8f\043\uff8f\044\uff8f\045\uff8f\046\uff8f\050" +
    "\uff8f\052\uff8f\053\uff8f\063\uff8f\064\uff8f\065\uff8f\070\uff8f" +
    "\071\uff8f\072\uff8f\073\uff8f\074\uff8f\075\uff8f\076\uff8f\077" +
    "\uff8f\100\uff8f\103\uff8f\104\uff8f\105\uff8f\106\uff8f\107\uff8f" +
    "\110\uff8f\001\002\000\100\004\uff92\005\uff92\033\uff92\035" +
    "\uff92\042\uff92\043\uff92\044\uff92\045\uff92\046\uff92\050\uff92" +
    "\052\uff92\053\uff92\063\uff92\064\uff92\065\uff92\067\uff92\070" +
    "\uff92\071\uff92\072\uff92\073\uff92\074\uff92\075\uff92\076\uff92" +
    "\077\uff92\100\uff92\103\uff92\104\uff92\105\uff92\106\uff92\107" +
    "\uff92\110\uff92\001\002\000\046\006\076\007\073\010\104" +
    "\011\075\012\064\023\105\024\067\025\102\026\100\027" +
    "\066\030\103\031\065\032\070\036\071\037\106\041\072" +
    "\053\236\102\101\001\002\000\004\100\uff8b\001\002\000" +
    "\004\100\240\001\002\000\042\004\044\005\050\033\033" +
    "\035\034\050\035\074\055\075\046\076\054\077\052\101" +
    "\243\103\037\104\042\105\051\106\031\107\056\110\032" +
    "\001\002\000\004\052\242\001\002\000\076\004\uff8d\005" +
    "\uff8d\033\uff8d\035\uff8d\042\uff8d\043\uff8d\044\uff8d\045\uff8d" +
    "\046\uff8d\050\uff8d\052\uff8d\053\uff8d\063\uff8d\064\uff8d\065" +
    "\uff8d\070\uff8d\071\uff8d\072\uff8d\073\uff8d\074\uff8d\075\uff8d" +
    "\076\uff8d\077\uff8d\100\uff8d\103\uff8d\104\uff8d\105\uff8d\106" +
    "\uff8d\107\uff8d\110\uff8d\001\002\000\004\040\247\001\002" +
    "\000\046\006\076\007\073\010\104\011\075\012\064\023" +
    "\105\024\067\025\102\026\100\027\066\030\103\031\065" +
    "\032\070\036\071\037\106\040\245\041\072\102\101\001" +
    "\002\000\072\004\044\005\050\033\033\035\034\042\010" +
    "\043\016\044\022\045\004\046\013\050\035\063\174\064" +
    "\020\065\206\070\203\071\170\072\205\073\201\074\055" +
    "\075\046\076\054\077\052\100\ufff4\103\177\104\042\105" +
    "\051\106\031\107\056\110\032\001\002\000\004\100\uff8c" +
    "\001\002\000\072\004\044\005\050\033\033\035\034\042" +
    "\010\043\016\044\022\045\004\046\013\050\035\052\ufff4" +
    "\063\174\064\020\065\206\070\203\071\170\072\205\073" +
    "\201\074\055\075\046\076\054\077\052\103\177\104\042" +
    "\105\051\106\031\107\056\110\032\001\002\000\004\052" +
    "\uff8a\001\002\000\040\004\044\005\050\033\033\035\034" +
    "\050\035\074\055\075\046\076\054\077\052\103\037\104" +
    "\042\105\051\106\031\107\056\110\032\001\002\000\046" +
    "\006\076\007\073\010\104\011\075\012\064\023\105\024" +
    "\067\025\102\026\100\027\066\030\103\031\065\032\070" +
    "\036\071\037\106\041\072\056\253\102\101\001\002\000" +
    "\076\004\uffc6\005\uffc6\033\uffc6\035\uffc6\042\uffc6\043\uffc6" +
    "\044\uffc6\045\uffc6\046\uffc6\050\uffc6\052\uffc6\053\uffc6\063" +
    "\uffc6\064\uffc6\065\uffc6\070\uffc6\071\uffc6\072\uffc6\073\uffc6" +
    "\074\uffc6\075\uffc6\076\uffc6\077\uffc6\100\uffc6\103\uffc6\104" +
    "\uffc6\105\uffc6\106\uffc6\107\uffc6\110\uffc6\001\002\000\004" +
    "\056\262\001\002\000\050\006\076\007\073\010\104\011" +
    "\075\012\064\023\105\024\067\025\102\026\100\027\066" +
    "\030\103\031\065\032\070\036\071\037\106\041\072\052" +
    "\uff95\056\uff95\102\101\001\002\000\004\052\257\001\002" +
    "\000\072\004\044\005\050\033\033\035\034\042\010\043" +
    "\016\044\022\045\004\046\013\050\035\053\ufff4\063\174" +
    "\064\020\065\206\070\203\071\170\072\205\073\201\074" +
    "\055\075\046\076\054\077\052\103\177\104\042\105\051" +
    "\106\031\107\056\110\032\001\002\000\004\053\261\001" +
    "\002\000\076\004\uff97\005\uff97\033\uff97\035\uff97\042\uff97" +
    "\043\uff97\044\uff97\045\uff97\046\uff97\050\uff97\052\uff97\053" +
    "\uff97\063\uff97\064\uff97\065\uff97\070\uff97\071\uff97\072\uff97" +
    "\073\uff97\074\uff97\075\uff97\076\uff97\077\uff97\100\uff97\103" +
    "\uff97\104\uff97\105\uff97\106\uff97\107\uff97\110\uff97\001\002" +
    "\000\040\004\044\005\050\033\033\035\034\050\035\074" +
    "\055\075\046\076\054\077\052\103\037\104\042\105\051" +
    "\106\031\107\056\110\032\001\002\000\046\006\076\007" +
    "\073\010\104\011\075\012\064\023\105\024\067\025\102" +
    "\026\100\027\066\030\103\031\065\032\070\036\071\037" +
    "\106\041\072\056\264\102\101\001\002\000\040\004\044" +
    "\005\050\033\033\035\034\050\035\074\055\075\046\076" +
    "\054\077\052\103\037\104\042\105\051\106\031\107\056" +
    "\110\032\001\002\000\050\006\076\007\073\010\104\011" +
    "\075\012\064\023\105\024\067\025\102\026\100\027\066" +
    "\030\103\031\065\032\070\036\071\037\106\041\072\052" +
    "\uff94\056\uff94\102\101\001\002\000\046\006\076\007\073" +
    "\010\104\011\075\012\064\023\105\024\067\025\102\026" +
    "\100\027\066\030\103\031\065\032\070\036\071\037\106" +
    "\041\072\056\270\102\101\001\002\000\076\004\uffc8\005" +
    "\uffc8\033\uffc8\035\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8" +
    "\046\uffc8\050\uffc8\052\uffc8\053\uffc8\063\uffc8\064\uffc8\065" +
    "\uffc8\070\uffc8\071\uffc8\072\uffc8\073\uffc8\074\uffc8\075\uffc8" +
    "\076\uffc8\077\uffc8\100\uffc8\103\uffc8\104\uffc8\105\uffc8\106" +
    "\uffc8\107\uffc8\110\uffc8\001\002\000\076\004\uffc7\005\uffc7" +
    "\033\uffc7\035\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046" +
    "\uffc7\050\uffc7\052\uffc7\053\uffc7\063\uffc7\064\uffc7\065\uffc7" +
    "\070\uffc7\071\uffc7\072\uffc7\073\uffc7\074\uffc7\075\uffc7\076" +
    "\uffc7\077\uffc7\100\uffc7\103\uffc7\104\uffc7\105\uffc7\106\uffc7" +
    "\107\uffc7\110\uffc7\001\002\000\076\004\uffc5\005\uffc5\033" +
    "\uffc5\035\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5" +
    "\050\uffc5\052\uffc5\053\uffc5\063\uffc5\064\uffc5\065\uffc5\070" +
    "\uffc5\071\uffc5\072\uffc5\073\uffc5\074\uffc5\075\uffc5\076\uffc5" +
    "\077\uffc5\100\uffc5\103\uffc5\104\uffc5\105\uffc5\106\uffc5\107" +
    "\uffc5\110\uffc5\001\002\000\040\004\uffbc\005\uffbc\033\uffbc" +
    "\035\uffbc\050\uffbc\074\uffbc\075\uffbc\076\uffbc\077\uffbc\103" +
    "\uffbc\104\uffbc\105\uffbc\106\uffbc\107\uffbc\110\uffbc\001\002" +
    "\000\040\004\uffc2\005\uffc2\033\uffc2\035\uffc2\050\uffc2\074" +
    "\uffc2\075\uffc2\076\uffc2\077\uffc2\103\uffc2\104\uffc2\105\uffc2" +
    "\106\uffc2\107\uffc2\110\uffc2\001\002\000\040\004\uffc0\005" +
    "\uffc0\033\uffc0\035\uffc0\050\uffc0\074\uffc0\075\uffc0\076\uffc0" +
    "\077\uffc0\103\uffc0\104\uffc0\105\uffc0\106\uffc0\107\uffc0\110" +
    "\uffc0\001\002\000\040\004\uffbb\005\uffbb\033\uffbb\035\uffbb" +
    "\050\uffbb\074\uffbb\075\uffbb\076\uffbb\077\uffbb\103\uffbb\104" +
    "\uffbb\105\uffbb\106\uffbb\107\uffbb\110\uffbb\001\002\000\040" +
    "\004\044\005\050\033\033\035\034\050\035\074\055\075" +
    "\046\076\054\077\052\103\037\104\042\105\051\106\031" +
    "\107\056\110\032\001\002\000\040\004\uffbf\005\uffbf\033" +
    "\uffbf\035\uffbf\050\uffbf\074\uffbf\075\uffbf\076\uffbf\077\uffbf" +
    "\103\uffbf\104\uffbf\105\uffbf\106\uffbf\107\uffbf\110\uffbf\001" +
    "\002\000\040\004\uffbd\005\uffbd\033\uffbd\035\uffbd\050\uffbd" +
    "\074\uffbd\075\uffbd\076\uffbd\077\uffbd\103\uffbd\104\uffbd\105" +
    "\uffbd\106\uffbd\107\uffbd\110\uffbd\001\002\000\040\004\uffc1" +
    "\005\uffc1\033\uffc1\035\uffc1\050\uffc1\074\uffc1\075\uffc1\076" +
    "\uffc1\077\uffc1\103\uffc1\104\uffc1\105\uffc1\106\uffc1\107\uffc1" +
    "\110\uffc1\001\002\000\040\004\uffbe\005\uffbe\033\uffbe\035" +
    "\uffbe\050\uffbe\074\uffbe\075\uffbe\076\uffbe\077\uffbe\103\uffbe" +
    "\104\uffbe\105\uffbe\106\uffbe\107\uffbe\110\uffbe\001\002\000" +
    "\050\006\076\007\073\010\104\011\075\012\064\023\105" +
    "\024\067\025\102\026\100\027\066\030\103\031\065\032" +
    "\070\036\071\037\106\041\072\056\uffc3\057\304\102\101" +
    "\001\002\000\004\103\305\001\002\000\022\013\273\014" +
    "\301\015\274\016\277\017\302\020\300\021\272\022\275" +
    "\001\002\000\004\056\uffc4\001\002\000\004\103\025\001" +
    "\002\000\004\056\311\001\002\000\104\002\uffe1\004\uffe1" +
    "\005\uffe1\033\uffe1\035\uffe1\042\uffe1\043\uffe1\044\uffe1\045" +
    "\uffe1\046\uffe1\050\uffe1\052\uffe1\053\uffe1\056\uffe1\062\uffe1" +
    "\063\uffe1\064\uffe1\065\uffe1\070\uffe1\071\uffe1\072\uffe1\073" +
    "\uffe1\074\uffe1\075\uffe1\076\uffe1\077\uffe1\100\uffe1\103\uffe1" +
    "\104\uffe1\105\uffe1\106\uffe1\107\uffe1\110\uffe1\001\002\000" +
    "\076\004\uffd6\005\uffd6\033\uffd6\035\uffd6\042\uffd6\043\uffd6" +
    "\044\uffd6\045\uffd6\046\uffd6\050\uffd6\052\uffd6\053\uffd6\063" +
    "\uffd6\064\uffd6\065\uffd6\070\uffd6\071\uffd6\072\uffd6\073\uffd6" +
    "\074\uffd6\075\uffd6\076\uffd6\077\uffd6\100\uffd6\103\uffd6\104" +
    "\uffd6\105\uffd6\106\uffd6\107\uffd6\110\uffd6\001\002\000\010" +
    "\052\ufff5\053\ufff5\100\ufff5\001\002\000\072\004\044\005" +
    "\050\033\033\035\034\042\010\043\016\044\022\045\004" +
    "\046\013\050\035\053\ufff4\063\174\064\020\065\206\070" +
    "\203\071\170\072\205\073\201\074\055\075\046\076\054" +
    "\077\052\103\177\104\042\105\051\106\031\107\056\110" +
    "\032\001\002\000\004\053\316\001\002\000\056\004\044" +
    "\005\050\033\033\035\034\042\010\043\016\044\022\045" +
    "\004\046\013\050\035\063\174\064\020\074\055\075\046" +
    "\076\054\077\052\103\037\104\042\105\051\106\031\107" +
    "\056\110\032\001\002\000\004\056\320\001\002\000\076" +
    "\004\uff96\005\uff96\033\uff96\035\uff96\042\uff96\043\uff96\044" +
    "\uff96\045\uff96\046\uff96\050\uff96\052\uff96\053\uff96\063\uff96" +
    "\064\uff96\065\uff96\070\uff96\071\uff96\072\uff96\073\uff96\074" +
    "\uff96\075\uff96\076\uff96\077\uff96\100\uff96\103\uff96\104\uff96" +
    "\105\uff96\106\uff96\107\uff96\110\uff96\001\002\000\004\002" +
    "\001\001\002\000\006\052\323\103\025\001\002\000\022" +
    "\042\010\043\016\044\022\045\004\046\013\053\ufff8\063" +
    "\174\064\020\001\002\000\004\053\327\001\002\000\022" +
    "\042\010\043\016\044\022\045\004\046\013\053\ufff8\063" +
    "\174\064\020\001\002\000\004\053\ufff9\001\002\000\004" +
    "\056\330\001\002\000\024\002\ufffc\042\ufffc\043\ufffc\044" +
    "\ufffc\045\ufffc\046\ufffc\062\ufffc\063\ufffc\064\ufffc\001\002" +
    "\000\004\002\000\001\002\000\006\060\333\103\ufff2\001" +
    "\002\000\004\050\334\001\002\000\004\046\335\001\002" +
    "\000\004\054\336\001\002\000\004\055\337\001\002\000" +
    "\004\061\340\001\002\000\004\051\341\001\002\000\004" +
    "\052\342\001\002\000\072\004\044\005\050\033\033\035" +
    "\034\042\010\043\016\044\022\045\004\046\013\050\035" +
    "\053\ufff4\063\174\064\020\065\206\070\203\071\170\072" +
    "\205\073\201\074\055\075\046\076\054\077\052\103\177" +
    "\104\042\105\051\106\031\107\056\110\032\001\002\000" +
    "\004\053\344\001\002\000\024\002\ufff7\042\ufff7\043\ufff7" +
    "\044\ufff7\045\ufff7\046\ufff7\062\ufff7\063\ufff7\064\ufff7\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\342\000\020\003\005\004\020\006\016\012\006\047" +
    "\013\050\010\051\014\001\001\000\002\001\001\000\006" +
    "\005\144\006\145\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\003\005\004\020\006\016" +
    "\012\006\047\330\050\010\051\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\004\020" +
    "\006\016\012\006\050\142\001\001\000\002\001\001\000" +
    "\006\013\134\052\135\001\001\000\004\006\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\013\023\052" +
    "\025\001\001\000\002\001\001\000\004\014\127\001\001" +
    "\000\004\013\124\001\001\000\022\017\035\020\044\027" +
    "\040\030\042\031\027\032\052\033\046\035\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\017\035\020\044" +
    "\027\122\030\042\031\027\032\052\033\046\035\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\017\035" +
    "\020\044\027\121\030\042\031\027\032\052\033\046\035" +
    "\037\001\001\000\004\034\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\017\035" +
    "\020\044\021\061\027\060\030\042\031\027\032\052\033" +
    "\046\035\037\001\001\000\002\001\001\000\004\034\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\017\035\020\044\021\115\027\060" +
    "\030\042\031\027\032\052\033\046\035\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\017\035\020\044" +
    "\027\114\030\042\031\027\032\052\033\046\035\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\017\035\020\044\027\106\030\042\031\027\032\052" +
    "\033\046\035\037\001\001\000\004\034\076\001\001\000" +
    "\022\017\035\020\044\027\110\030\042\031\027\032\052" +
    "\033\046\035\037\001\001\000\004\034\076\001\001\000" +
    "\022\017\035\020\044\027\112\030\042\031\027\032\052" +
    "\033\046\035\037\001\001\000\004\034\076\001\001\000" +
    "\002\001\001\000\004\034\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\052\120\001\001\000\002\001" +
    "\001\000\004\034\076\001\001\000\004\034\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\017\035\020\044\027\132\030\042\031\027\032\052" +
    "\033\046\035\037\001\001\000\002\001\001\000\004\013" +
    "\131\001\001\000\002\001\001\000\004\034\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\136\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\144\006\145\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\006\153\007\151\010\154\011\150\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\052\160\001\001\000\002\001\001\000\010\006" +
    "\153\010\154\011\156\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\002\210" +
    "\006\016\012\170\015\171\016\166\017\172\020\044\022" +
    "\201\023\211\024\207\025\177\027\203\030\042\031\027" +
    "\032\052\033\046\035\037\036\174\040\175\044\206\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\002\312\006\016\012\170\015\171\016\166\017" +
    "\172\020\044\022\201\023\211\024\207\025\177\027\203" +
    "\030\042\031\027\032\052\033\046\035\037\036\174\040" +
    "\175\044\206\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\275\001" +
    "\001\000\002\001\001\000\022\017\035\020\044\027\265" +
    "\030\042\031\027\032\052\033\046\035\037\001\001\000" +
    "\002\001\001\000\030\006\016\012\253\017\035\020\044" +
    "\027\254\030\042\031\027\032\052\033\046\035\037\037" +
    "\255\001\001\000\004\034\076\001\001\000\022\017\035" +
    "\020\044\027\234\030\042\031\027\032\052\033\046\035" +
    "\037\001\001\000\022\017\035\020\044\027\213\030\042" +
    "\031\027\032\052\033\046\035\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\034\076\001\001\000\052\002" +
    "\215\006\016\012\170\015\171\016\166\017\172\020\044" +
    "\022\201\023\211\024\207\025\177\027\203\030\042\031" +
    "\027\032\052\033\046\035\037\036\174\040\175\044\206" +
    "\001\001\000\002\001\001\000\006\041\220\042\217\001" +
    "\001\000\006\041\233\042\217\001\001\000\004\043\226" +
    "\001\001\000\022\017\035\020\044\027\222\030\042\031" +
    "\027\032\052\033\046\035\037\001\001\000\004\034\076" +
    "\001\001\000\052\002\224\006\016\012\170\015\171\016" +
    "\166\017\172\020\044\022\201\023\211\024\207\025\177" +
    "\027\203\030\042\031\027\032\052\033\046\035\037\036" +
    "\174\040\175\044\206\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\002" +
    "\231\006\016\012\170\015\171\016\166\017\172\020\044" +
    "\022\201\023\211\024\207\025\177\027\203\030\042\031" +
    "\027\032\052\033\046\035\037\036\174\040\175\044\206" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\076\001\001\000\004\045\236\001\001" +
    "\000\004\046\240\001\001\000\022\017\035\020\044\027" +
    "\243\030\042\031\027\032\052\033\046\035\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\034\076\001\001\000\052\002\245\006\016\012\170" +
    "\015\171\016\166\017\172\020\044\022\201\023\211\024" +
    "\207\025\177\027\203\030\042\031\027\032\052\033\046" +
    "\035\037\036\174\040\175\044\206\001\001\000\002\001" +
    "\001\000\052\002\247\006\016\012\170\015\171\016\166" +
    "\017\172\020\044\022\201\023\211\024\207\025\177\027" +
    "\203\030\042\031\027\032\052\033\046\035\037\036\174" +
    "\040\175\044\206\001\001\000\002\001\001\000\022\017" +
    "\035\020\044\027\251\030\042\031\027\032\052\033\046" +
    "\035\037\001\001\000\004\034\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\076\001\001\000\002" +
    "\001\001\000\052\002\257\006\016\012\170\015\171\016" +
    "\166\017\172\020\044\022\201\023\211\024\207\025\177" +
    "\027\203\030\042\031\027\032\052\033\046\035\037\036" +
    "\174\040\175\044\206\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\017\035\020\044\027\262\030\042\031" +
    "\027\032\052\033\046\035\037\001\001\000\004\034\076" +
    "\001\001\000\022\017\035\020\044\027\264\030\042\031" +
    "\027\032\052\033\046\035\037\001\001\000\004\034\076" +
    "\001\001\000\004\034\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\017" +
    "\035\020\044\027\302\030\042\031\027\032\052\033\046" +
    "\035\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\076\001\001" +
    "\000\004\025\305\001\001\000\004\026\275\001\001\000" +
    "\002\001\001\000\004\013\307\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\002\314\006\016\012\170\015\171\016\166\017\172" +
    "\020\044\022\201\023\211\024\207\025\177\027\203\030" +
    "\042\031\027\032\052\033\046\035\037\036\174\040\175" +
    "\044\206\001\001\000\002\001\001\000\030\006\016\012" +
    "\253\017\035\020\044\027\254\030\042\031\027\032\052" +
    "\033\046\035\037\037\316\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\307\001\001" +
    "\000\010\006\016\012\324\053\323\001\001\000\002\001" +
    "\001\000\010\006\016\012\324\053\325\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\002\342\006\016" +
    "\012\170\015\171\016\166\017\172\020\044\022\201\023" +
    "\211\024\207\025\177\027\203\030\042\031\027\032\052" +
    "\033\046\035\037\036\174\040\175\044\206\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



/***
    private Scanner scanner;
    public Parser(Scanner scanner) { 
        this.scanner = scanner;
    }
***/
    private HashMap<String, Double>tsymbols = new HashMap<>();

    public Double getSymbolValue(String id) {
         return tsymbols.get(id);
    }

    public void addSymbol(String id, Double value) {
        if (tsymbols.get(id) == null) {
            tsymbols.put(id, value);
        } else {
            tsymbols.replace(id, value);
        }
    }

    /**********************************************************************
     * sobrecàrrega de mètodes per gestionar els errors que es localitzin *
     **********************************************************************/

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
    **/ 
    @Override
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception{ 
        report_error("Error síntactico irrecuperable en la Línea " + 
        (cur_token.left)+ " Columna "+cur_token.right+". Componente " + cur_token.value + 
        " no reconocido.", cur_token); 
        done_parsing();
    }  

    /**
     * Método al que se llama automáticamente ante algún error sintactico.
    **/ 
    @Override
    public void syntax_error(Symbol cur_token){ 
        if (cur_token.sym != ParserSym.error)
        report_error("Error Sintáctico en la Línea " + (cur_token.left) +
        " Columna "+cur_token.right+ ". No se esperaba este componente: " +cur_token.value+".", cur_token); 
    } 

    @Override
    public void report_error(String message, Object info) {
        StringBuilder msg = new StringBuilder("ERROR");
        if (info instanceof Symbol) {
            ComplexSymbol token = (ComplexSymbol)info;
            Location l = token.getLeft();
            
            if (l != null) {
                msg.append(" (fila: ")
                   .append(l.getLine())
                   .append(", columna: ")
                   .append(l.getColumn())
                   .append(")");
            }
        }
        msg.append(": ").append(message);
        
        System.err.println(msg);
    }

    @Override
    public void report_fatal_error(String message, Object info) throws Exception {
        report_error("Error catastròfic ("+message+")", info);
        done_parsing();
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= SCRIPT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolScript start_val = (SymbolScript)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // SCRIPT ::= SCRIPTBM SCRIPT 
            {
              SymbolScript RESULT =null;
		int et1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int et1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolMethodsBeforeMain et1 = (SymbolMethodsBeforeMain)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int et2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int et2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolScript et2 = (SymbolScript)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolScript(et1, et2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SCRIPT",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SCRIPT ::= SCRIPTAM 
            {
              SymbolScript RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolMethodsAfterMain et = (SymbolMethodsAfterMain)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolScript(et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SCRIPT",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SCRIPTBM ::= METHOD 
            {
              SymbolMethodsBeforeMain RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolMethod et = (SymbolMethod)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolMethodsBeforeMain(et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SCRIPTBM",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SCRIPTBM ::= DECS 
            {
              SymbolMethodsBeforeMain RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolDecs et = (SymbolDecs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolMethodsBeforeMain(et) 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SCRIPTBM",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SCRIPTBM ::= KW_TUPLE ID LKEY MIEMBROS_TUPLA RKEY ENDINSTR 
            {
              SymbolMethodsBeforeMain RESULT =null;
		int et1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int et1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object et1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int et2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int et2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String et2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int et3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int et3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolMiembrosTupla et3 = (SymbolMiembrosTupla)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SCRIPTBM",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SCRIPTAM ::= MAIN 
            {
              SymbolMethodsAfterMain RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolMain et = (SymbolMain)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolMethodsAfterMain(et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SCRIPTAM",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SCRIPTAM ::= SCRIPTAM SCRIPTBM 
            {
              SymbolMethodsAfterMain RESULT =null;
		int et1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int et1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolMethodsAfterMain et1 = (SymbolMethodsAfterMain)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int et2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int et2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolMethodsBeforeMain et2 = (SymbolMethodsBeforeMain)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolMethodsAfterMain(et1,et2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SCRIPTAM",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MIEMBROS_TUPLA ::= DECS MIEMBROS_TUPLA 
            {
              SymbolMiembrosTupla RESULT =null;
		 RESULT = 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MIEMBROS_TUPLA",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MIEMBROS_TUPLA ::= 
            {
              SymbolMiembrosTupla RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MIEMBROS_TUPLA",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MAIN ::= KW_METHOD KW_VOID KW_MAIN LPAREN KW_STRING LBRACKET RBRACKET KW_ARGS RPAREN LKEY BODY RKEY 
            {
              SymbolMain RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolBody et = (SymbolBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolMain(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // METHOD ::= KW_METHOD TIPO_RETORNO ID LPAREN PARAMS RPAREN LKEY BODY RKEY 
            {
              SymbolMethod RESULT =null;
		int et1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int et1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		SymbolTypeRetorno et1 = (SymbolTypeRetorno)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int et2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int et2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String et2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int et3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int et3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SymbolParams et3 = (SymbolParams)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int et4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int et4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolBody et4 = (SymbolBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolMethod(et1,et2,et3,et4) 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METHOD",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BODY ::= ELEMENTO_METODO BODY 
            {
              SymbolBody RESULT =null;
		int et1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int et1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolElementoMetodo et1 = (SymbolElementoMetodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int et2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int et2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolBody et2 = (SymbolBody)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBody(et1, et2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BODY",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BODY ::= 
            {
              SymbolBody RESULT =null;
		 RESULT = new SymbolBody(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BODY",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TIPO_RETORNO ::= TIPO_VAR 
            {
              SymbolTypeRetorno RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolTypeVar et = (SymbolTypeVar)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolTypeRetorno(et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_RETORNO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TIPO_RETORNO ::= KW_VOID 
            {
              SymbolTypeRetorno RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolTypeRetorno(et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_RETORNO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TIPO_VAR ::= KW_BOOL 
            {
              SymbolTypeVar RESULT =null;
		 RESULT = new SymbolTypeVar(ParserSym.KW_BOOL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_VAR",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TIPO_VAR ::= KW_INT 
            {
              SymbolTypeVar RESULT =null;
		 RESULT = new SymbolTypeVar(ParserSym.KW_INT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_VAR",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TIPO_VAR ::= KW_DOUBLE 
            {
              SymbolTypeVar RESULT =null;
		 RESULT = new SymbolTypeVar(ParserSym.KW_DOUBLE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_VAR",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TIPO_VAR ::= KW_CHAR 
            {
              SymbolTypeVar RESULT =null;
		 RESULT = new SymbolTypeVar(ParserSym.KW_CHAR); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_VAR",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TIPO_VAR ::= KW_STRING 
            {
              SymbolTypeVar RESULT =null;
		 RESULT = new SymbolTypeVar(ParserSym.KW_STRING); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_VAR",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PARAMS ::= PARAMSLISTA 
            {
              SymbolParams RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolParamsLista et = (SymbolParamsLista)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolParams(et) 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PARAMS ::= 
            {
              SymbolParams RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PARAMSLISTA ::= PARAM COMMA PARAMSLISTA 
            {
              SymbolParamsLista RESULT =null;
		int et3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int et3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolParamsLista et3 = (SymbolParamsLista)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMSLISTA",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PARAMSLISTA ::= PARAM 
            {
              SymbolParamsLista RESULT =null;
		 RESULT = new SymbolParam(et1, et2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMSLISTA",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PARAM ::= TIPO_VAR ID 
            {
              SymbolParam RESULT =null;
		int et1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int et1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolTypeVar et1 = (SymbolTypeVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int et2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int et2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String et2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PARAM ::= TIPO_VAR DIMENSIONES ID 
            {
              SymbolParam RESULT =null;
		int et1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int et1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolTypeVar et1 = (SymbolTypeVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int et2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int et2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolDimensiones et2 = (SymbolDimensiones)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int et3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int et3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String et3 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PARAM ::= KW_TUPLE ID ID 
            {
              SymbolParam RESULT =null;
		int et1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int et1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object et1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int et2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int et2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String et2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int et3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int et3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String et3 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECS ::= KW_CONST TIPO_VAR IDDECSLISTA ENDINSTR 
            {
              SymbolDecs RESULT =null;
		int et1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int et1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object et1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int et2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int et2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolTypeVar et2 = (SymbolTypeVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int et3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int et3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolIDDecsLista et3 = (SymbolIDDecsLista)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolDecs(true,et2,et3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECS ::= TIPO_VAR IDDECSLISTA ENDINSTR 
            {
              SymbolDecs RESULT =null;
		int et1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int et1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolTypeVar et1 = (SymbolTypeVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int et2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int et2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolIDDecsLista et2 = (SymbolIDDecsLista)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolDecs(false, et1,et2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECS ::= KW_CONST TIPO_VAR DIMENSIONES IDDECSLISTA ENDINSTR 
            {
              SymbolDecs RESULT =null;
		int et1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int et1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object et1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int et2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int et2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolTypeVar et2 = (SymbolTypeVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int et3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int et3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolDimensiones et3 = (SymbolDimensiones)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int et4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int et4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolIDDecsLista et4 = (SymbolIDDecsLista)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolDecs(true, et2, et3, et4); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECS ::= TIPO_VAR DIMENSIONES IDDECSLISTA ENDINSTR 
            {
              SymbolDecs RESULT =null;
		int et1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int et1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolTypeVar et1 = (SymbolTypeVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int et2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int et2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolDimensiones et2 = (SymbolDimensiones)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int et3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int et3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolIDDecsLista et3 = (SymbolIDDecsLista)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolDecs(false, et1, et2, et3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECS ::= KW_TUPLE ID IDDECSLISTA ENDINSTR 
            {
              SymbolDecs RESULT =null;
		int et1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int et1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object et1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int et2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int et2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String et2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int et3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int et3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolIDDecsLista et3 = (SymbolIDDecsLista)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DIMENSIONES ::= LBRACKET OPERAND RBRACKET DIMENSIONES 
            {
              SymbolDimensiones RESULT =null;
		int et1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int et1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolOperand et1 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int et2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int et2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolDimensiones et2 = (SymbolDimensiones)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolDimensiones(et1,et2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DIMENSIONES",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DIMENSIONES ::= LBRACKET OPERAND RBRACKET 
            {
              SymbolDimensiones RESULT =null;
		int et1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int et1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolOperand et1 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolDimensiones(et1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DIMENSIONES",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // IDDECSLISTA ::= ID ASIG COMMA IDDECSLISTA 
            {
              SymbolIDDecsLista RESULT =null;
		int et1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int et1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String et1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int et2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int et2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolAsig et2 = (SymbolAsig)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int et3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int et3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolIDDecsLista et3 = (SymbolIDDecsLista)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolIDDecsLista(et1,et2,et3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDDECSLISTA",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // IDDECSLISTA ::= ID ASIG 
            {
              SymbolIDDecsLista RESULT =null;
		int et1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int et1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String et1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int et2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int et2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolAsig et2 = (SymbolAsig)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolIDDecsLista(et1,et2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDDECSLISTA",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ASIG ::= AS_ASSIGN OPERAND 
            {
              SymbolAsig RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOperand et = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsig(et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ASIG ::= 
            {
              SymbolAsig RESULT =null;
		 RESULT = new SymbolAsig(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ELEMENTO_METODO ::= INSTR 
            {
              SymbolElementoMetodo RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolInstr et = (SymbolInstr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolElementoMetodo(et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_METODO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ELEMENTO_METODO ::= LOOP 
            {
              SymbolElementoMetodo RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolLoop et = (SymbolLoop)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolElementoMetodo(et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_METODO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ELEMENTO_METODO ::= IF 
            {
              SymbolElementoMetodo RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolIf et = (SymbolIf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolElementoMetodo(et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_METODO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ELEMENTO_METODO ::= SWITCH 
            {
              SymbolElementoMetodo RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolSwitch et = (SymbolSwitch)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolElementoMetodo(et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_METODO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // INSTR ::= FCALL ENDINSTR 
            {
              SymbolInstr RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolFCall et = (SymbolFCall)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolInstr(et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTR",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // INSTR ::= RETURN 
            {
              SymbolInstr RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolReturn et = (SymbolReturn)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolInstr(et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTR",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // INSTR ::= DECS 
            {
              SymbolInstr RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolDecs et = (SymbolDecs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolInstr(et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTR",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // INSTR ::= ASIGS 
            {
              SymbolInstr RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolAsigs et = (SymbolAsigs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolInstr(et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTR",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // INSTR ::= SWAP 
            {
              SymbolInstr RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolSwap et = (SymbolSwap)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolInstr(et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTR",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FCALL ::= METHOD_NAME LPAREN OPERANDSLISTA RPAREN 
            {
              SymbolFCall RESULT =null;
		int et1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int et1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolMethodName et1 = (SymbolMethodName)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int et2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int et2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolOperandsLista et2 = (SymbolOperandsLista)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolFCall(et1,et2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FCALL",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FCALL ::= METHOD_NAME LPAREN RPAREN 
            {
              SymbolFCall RESULT =null;
		int et1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int et1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolMethodName et1 = (SymbolMethodName)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new SymbolFCall(et1,et2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FCALL",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // METHOD_NAME ::= ID 
            {
              SymbolMethodName RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String et = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolMethodName(ParserSym.ID); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METHOD_NAME",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // METHOD_NAME ::= KW_IN 
            {
              SymbolMethodName RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolMethodName(ParserSym.KW_IN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METHOD_NAME",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // METHOD_NAME ::= KW_OUT 
            {
              SymbolMethodName RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolMethodName(ParserSym.KW_OUT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METHOD_NAME",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // METHOD_NAME ::= KW_WRITE 
            {
              SymbolMethodName RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolMethodName(ParserSym.KW_WRITE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METHOD_NAME",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // METHOD_NAME ::= KW_READ 
            {
              SymbolMethodName RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolMethodName(ParserSym.KW_READ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METHOD_NAME",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPERANDSLISTA ::= OPERAND COMMA OPERANDSLISTA 
            {
              SymbolOperandsLista RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolOperand et = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int olleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int olright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOperandsLista ol = (SymbolOperandsLista)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOperandsLista(et, ol); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERANDSLISTA",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPERANDSLISTA ::= OPERAND 
            {
              SymbolOperandsLista RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOperand et = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOperandsLista(et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERANDSLISTA",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // RETURN ::= KW_RETURN ENDINSTR 
            {
              SymbolReturn RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // RETURN ::= KW_RETURN OPERAND ENDINSTR 
            {
              SymbolReturn RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SWAP ::= OPERAND OP_SWAP OPERAND ENDINSTR 
            {
              SymbolSwap RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWAP",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ASIGS ::= IDASIGLISTA ENDINSTR 
            {
              SymbolAsigs RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGS",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IDASIGLISTA ::= ID ASIG_OP OPERAND COMMA IDASIGLISTA 
            {
              SymbolIDAsigLista RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDASIGLISTA",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // IDASIGLISTA ::= ID ASIG_OP OPERAND 
            {
              SymbolIDAsigLista RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDASIGLISTA",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ASIG_OP ::= AS_ASSIGN 
            {
              SymbolAsigOp RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsigOp(ParserSym.AS_ASSIGN, et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG_OP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ASIG_OP ::= AS_ADDA 
            {
              SymbolAsigOp RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsigOp(ParserSym.AS_ADDA, et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG_OP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ASIG_OP ::= AS_SUBA 
            {
              SymbolAsigOp RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsigOp(ParserSym.AS_SUBA, et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG_OP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ASIG_OP ::= AS_MULA 
            {
              SymbolAsigOp RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsigOp(ParserSym.AS_MULA, et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG_OP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ASIG_OP ::= AS_DIVA 
            {
              SymbolAsigOp RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsigOp(ParserSym.AS_DIVA, et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG_OP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ASIG_OP ::= AS_POTA 
            {
              SymbolAsigOp RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsigOp(ParserSym.AS_POTA, et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG_OP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ASIG_OP ::= AS_ANDA 
            {
              SymbolAsigOp RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsigOp(ParserSym.AS_ANDA, et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG_OP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ASIG_OP ::= AS_ORA 
            {
              SymbolAsigOp RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsigOp(ParserSym.AS_ORA, et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG_OP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPERAND ::= ATOMIC_EXPRESSION 
            {
              SymbolOperand RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolAtomicExpression et = (SymbolAtomicExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOperand(et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OPERAND ::= FCALL 
            {
              SymbolOperand RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolFCall et = (SymbolFCall)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOperand(et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OPERAND ::= LPAREN OPERAND RPAREN 
            {
              SymbolOperand RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolOperand et = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolOperand(et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OPERAND ::= UNARY_EXPRESSION 
            {
              SymbolOperand RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolUnaryExpression et = (SymbolUnaryExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOperand(et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OPERAND ::= BINARY_EXPRESSION 
            {
              SymbolOperand RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolBinaryExpression et = (SymbolBinaryExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOperand(et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OPERAND ::= CONDITIONAL_EXPRESSION 
            {
              SymbolOperand RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolConditionalExpression et = (SymbolConditionalExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOperand(et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPERAND ::= OPERAND AUX_MEMBER LBRACKET OPERAND RBRACKET 
            {
              SymbolOperand RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SymbolOperand arr = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idxleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idxright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolOperand idx = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolOperand(arr, idx); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPERAND ::= OPERAND OP_MEMBER ID 
            {
              SymbolOperand RESULT =null;
		int tupleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tupleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolOperand tuple = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int memberleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int memberright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String member = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOperand(tuple, member); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // UNARY_EXPRESSION ::= UNARY_OPERATOR OPERAND 
            {
              SymbolUnaryExpression RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolUnaryOperator et = (SymbolUnaryOperator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOperand op = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolUnaryExpression(et, op); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNARY_EXPRESSION",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // BINARY_EXPRESSION ::= OPERAND BINARY_OPERATOR OPERAND 
            {
              SymbolBinaryExpression RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolOperand op1 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolBinaryOperator et = (SymbolBinaryOperator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOperand op2 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryExpression(et, op1, op2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_EXPRESSION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CONDITIONAL_EXPRESSION ::= OPERAND OP_COND OPERAND ARROW OPERAND 
            {
              SymbolConditionalExpression RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SymbolOperand cond = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolOperand op1 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOperand op2 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolConditionalExpression(cond, op1, op2);; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDITIONAL_EXPRESSION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ATOMIC_EXPRESSION ::= ID 
            {
              SymbolAtomicExpression RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String et = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAtomicExpression(et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATOMIC_EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ATOMIC_EXPRESSION ::= STRING 
            {
              SymbolAtomicExpression RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String et = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAtomicExpression(et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATOMIC_EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ATOMIC_EXPRESSION ::= BOOL 
            {
              SymbolAtomicExpression RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean et = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAtomicExpression(et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATOMIC_EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ATOMIC_EXPRESSION ::= INT 
            {
              SymbolAtomicExpression RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer et = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAtomicExpression(et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATOMIC_EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ATOMIC_EXPRESSION ::= DOUBLE 
            {
              SymbolAtomicExpression RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double et = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAtomicExpression(et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATOMIC_EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ATOMIC_EXPRESSION ::= CHAR 
            {
              SymbolAtomicExpression RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character et = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAtomicExpression(et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATOMIC_EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // BINARY_OPERATOR ::= OP_ADD 
            {
              SymbolBinaryOperator RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_ADD, et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // BINARY_OPERATOR ::= OP_SUB 
            {
              SymbolBinaryOperator RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_SUB, et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // BINARY_OPERATOR ::= OP_MUL 
            {
              SymbolBinaryOperator RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_MUL, et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // BINARY_OPERATOR ::= OP_DIV 
            {
              SymbolBinaryOperator RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_DIV, et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // BINARY_OPERATOR ::= OP_MOD 
            {
              SymbolBinaryOperator RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_MOD, et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // BINARY_OPERATOR ::= OP_POT 
            {
              SymbolBinaryOperator RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_POT, et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // BINARY_OPERATOR ::= OP_EQ 
            {
              SymbolBinaryOperator RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_EQ, et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // BINARY_OPERATOR ::= OP_BEQ 
            {
              SymbolBinaryOperator RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_BEQ, et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // BINARY_OPERATOR ::= OP_BT 
            {
              SymbolBinaryOperator RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_BT, et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // BINARY_OPERATOR ::= OP_LEQ 
            {
              SymbolBinaryOperator RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_LEQ, et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // BINARY_OPERATOR ::= OP_LT 
            {
              SymbolBinaryOperator RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_LT, et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // BINARY_OPERATOR ::= OP_NEQ 
            {
              SymbolBinaryOperator RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_NEQ, et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // BINARY_OPERATOR ::= OP_AND 
            {
              SymbolBinaryOperator RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_AND, et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // BINARY_OPERATOR ::= OP_OR 
            {
              SymbolBinaryOperator RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_OR, et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // UNARY_OPERATOR ::= OP_NOT 
            {
              SymbolUnaryOperator RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolUnaryOperator(ParserSym.OP_NOT, et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNARY_OPERATOR",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // UNARY_OPERATOR ::= OP_INC 
            {
              SymbolUnaryOperator RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolUnaryOperator(ParserSym.OP_INC, et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNARY_OPERATOR",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // UNARY_OPERATOR ::= OP_DEC 
            {
              SymbolUnaryOperator RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolUnaryOperator(ParserSym.OP_DEC, et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNARY_OPERATOR",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // UNARY_OPERATOR ::= OP_PCT 
            {
              SymbolUnaryOperator RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolUnaryOperator(ParserSym.OP_PCT, et); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNARY_OPERATOR",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // LOOP ::= KW_LOOP LOOP_COND LKEY BODY RKEY 
            {
              SymbolLoop RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOP",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // LOOP ::= KW_DO LKEY BODY RKEY LOOP_COND ENDINSTR 
            {
              SymbolLoop RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOP",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // LOOP_COND ::= OPERAND 
            {
              SymbolLoopCond RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOP_COND",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // LOOP_COND ::= DECS ENDINSTR OPERAND ENDINSTR OPERAND 
            {
              SymbolLoopCond RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOP_COND",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // IF ::= KW_IF OPERAND LKEY BODY RKEY ELIFS ELSE 
            {
              SymbolIf RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ELIFS ::= ELIF ELIFS 
            {
              SymbolElifs RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELIFS",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ELIFS ::= 
            {
              SymbolElifs RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELIFS",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ELIF ::= KW_ELIF OPERAND LKEY BODY RKEY 
            {
              SymbolElif RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELIF",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ELSE ::= KW_ELSE LKEY BODY RKEY 
            {
              SymbolElse RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ELSE ::= 
            {
              SymbolElse RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // SWITCH ::= KW_SWITCH OPERAND RKEY CASO PRED LKEY 
            {
              SymbolSwitch RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCH",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CASO ::= CASO KW_CASE OPERAND ARROW BODY 
            {
              SymbolCaso RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASO",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CASO ::= 
            {
              SymbolCaso RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASO",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // PRED ::= KW_CASE KW_DEFAULT ARROW BODY 
            {
              SymbolPred RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRED",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
