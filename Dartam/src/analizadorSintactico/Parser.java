
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadorSintactico;

import java_cup.runtime.*;
import analizadorSintactico.symbols.*;
import java.io.PrintStream;
import java.util.HashMap;
import java.util.List;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\211\000\002\002\004\000\002\050\004\000\002\050" +
    "\003\000\002\051\013\000\002\051\003\000\002\051\007" +
    "\000\002\004\003\000\002\004\003\000\002\054\004\000" +
    "\002\054\002\000\002\003\020\000\002\003\004\000\002" +
    "\002\004\000\002\002\002\000\002\006\003\000\002\006" +
    "\004\000\002\006\004\000\002\006\004\000\002\006\005" +
    "\000\002\006\005\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\007\003\000\002" +
    "\007\002\000\002\010\006\000\002\010\004\000\002\011" +
    "\006\000\002\011\005\000\002\052\006\000\002\052\005" +
    "\000\002\053\005\000\002\053\004\000\002\012\006\000" +
    "\002\012\004\000\002\013\004\000\002\013\002\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\016\004\000\002\016\003\000\002\016\003" +
    "\000\002\016\004\000\002\016\003\000\002\016\004\000" +
    "\002\016\004\000\002\017\006\000\002\017\005\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\021\005\000\002\021\003" +
    "\000\002\022\004\000\002\022\005\000\002\023\006\000" +
    "\002\024\005\000\002\024\003\000\002\014\005\000\002" +
    "\014\006\000\002\014\007\000\002\014\004\000\002\014" +
    "\004\000\002\014\004\000\002\014\004\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\005\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\006\000\002\026\005\000" +
    "\002\026\006\000\002\026\010\000\002\027\004\000\002" +
    "\027\004\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\030\005\000" +
    "\002\031\007\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\036\007\000\002\036\010" +
    "\000\002\040\005\000\002\040\006\000\002\037\003\000" +
    "\002\037\003\000\002\041\011\000\002\042\004\000\002" +
    "\042\002\000\002\043\007\000\002\044\006\000\002\044" +
    "\002\000\002\045\010\000\002\046\007\000\002\046\002" +
    "\000\002\047\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\373\000\020\043\012\044\016\045\020\046\006\062" +
    "\005\063\013\064\017\001\002\000\020\043\012\044\016" +
    "\045\020\046\006\062\005\063\013\064\017\001\002\000" +
    "\016\043\012\044\016\045\020\046\006\047\360\063\021" +
    "\001\002\000\006\054\uffea\110\uffea\001\002\000\022\002" +
    "\uffff\043\012\044\016\045\020\046\006\062\170\063\013" +
    "\064\017\001\002\000\022\002\ufffd\043\ufffd\044\ufffd\045" +
    "\ufffd\046\ufffd\062\ufffd\063\ufffd\064\ufffd\001\002\000\006" +
    "\054\144\110\ufff3\001\002\000\010\051\uffed\054\uffed\110" +
    "\uffed\001\002\000\004\110\157\001\002\000\004\002\156" +
    "\001\002\000\004\110\023\001\002\000\010\051\uffec\054" +
    "\uffec\110\uffec\001\002\000\014\043\012\044\016\045\020" +
    "\046\006\063\021\001\002\000\010\051\uffeb\054\uffeb\110" +
    "\uffeb\001\002\000\004\110\141\001\002\000\004\110\023" +
    "\001\002\000\010\013\026\056\uffdc\057\uffdc\001\002\000" +
    "\004\056\025\001\002\000\104\002\uffe5\004\uffe5\005\uffe5" +
    "\006\uffe5\007\uffe5\034\uffe5\043\uffe5\044\uffe5\045\uffe5\046" +
    "\uffe5\050\uffe5\052\uffe5\053\uffe5\062\uffe5\063\uffe5\064\uffe5" +
    "\065\uffe5\070\uffe5\071\uffe5\072\uffe5\073\uffe5\074\uffe5\075" +
    "\uffe5\077\uffe5\100\uffe5\101\uffe5\102\uffe5\110\uffe5\111\uffe5" +
    "\112\uffe5\113\uffe5\114\uffe5\115\uffe5\001\002\000\042\004" +
    "\051\005\054\006\052\007\045\034\035\050\036\077\041" +
    "\100\034\101\032\102\057\110\040\111\046\112\044\113" +
    "\060\114\056\115\042\001\002\000\006\056\uffde\057\030" +
    "\001\002\000\004\110\023\001\002\000\004\056\uffdf\001" +
    "\002\000\004\050\uffca\001\002\000\070\004\uffae\005\uffae" +
    "\006\uffae\007\uffae\010\uffae\011\uffae\012\uffae\024\uffae\025" +
    "\uffae\026\uffae\027\uffae\030\uffae\031\uffae\032\uffae\033\uffae" +
    "\036\uffae\037\uffae\040\uffae\041\uffae\042\uffae\051\uffae\052" +
    "\uffae\053\uffae\054\uffae\055\uffae\056\uffae\057\uffae\001\002" +
    "\000\004\050\uffcc\001\002\000\042\004\uffa6\005\uffa6\006" +
    "\uffa6\007\uffa6\034\uffa6\050\uffa6\077\uffa6\100\uffa6\101\uffa6" +
    "\102\uffa6\110\uffa6\111\uffa6\112\uffa6\113\uffa6\114\uffa6\115" +
    "\uffa6\001\002\000\052\004\051\005\054\006\052\007\045" +
    "\034\035\043\012\044\016\045\020\046\127\050\036\077" +
    "\041\100\034\101\032\102\057\110\040\111\046\112\044" +
    "\113\060\114\056\115\042\001\002\000\070\004\uffb1\005" +
    "\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1\012\uffb1\024\uffb1" +
    "\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033" +
    "\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\051\uffb1" +
    "\052\uffb1\053\uffb1\054\uffb1\055\uffb1\056\uffb1\057\uffb1\001" +
    "\002\000\072\004\uff9c\005\uff9c\006\uff9c\007\uff9c\010\uff9c" +
    "\011\uff9c\012\uff9c\024\uff9c\025\uff9c\026\uff9c\027\uff9c\030" +
    "\uff9c\031\uff9c\032\uff9c\033\uff9c\036\uff9c\037\uff9c\040\uff9c" +
    "\041\uff9c\042\uff9c\050\uffce\051\uff9c\052\uff9c\053\uff9c\054" +
    "\uff9c\055\uff9c\056\uff9c\057\uff9c\001\002\000\004\050\uffcd" +
    "\001\002\000\070\004\uff97\005\uff97\006\uff97\007\uff97\010" +
    "\uff97\011\uff97\012\uff97\024\uff97\025\uff97\026\uff97\027\uff97" +
    "\030\uff97\031\uff97\032\uff97\033\uff97\036\uff97\037\uff97\040" +
    "\uff97\041\uff97\042\uff97\051\uff97\052\uff97\053\uff97\054\uff97" +
    "\055\uff97\056\uff97\057\uff97\001\002\000\056\004\103\005" +
    "\106\006\105\007\101\010\113\011\104\012\067\024\114" +
    "\025\073\026\111\027\110\030\071\031\112\032\070\033" +
    "\074\036\072\037\076\040\115\042\077\054\075\056\uffdd" +
    "\057\uffdd\001\002\000\070\004\uff9a\005\uff9a\006\uff9a\007" +
    "\uff9a\010\uff9a\011\uff9a\012\uff9a\024\uff9a\025\uff9a\026\uff9a" +
    "\027\uff9a\030\uff9a\031\uff9a\032\uff9a\033\uff9a\036\uff9a\037" +
    "\uff9a\040\uff9a\041\uff9a\042\uff9a\051\uff9a\052\uff9a\053\uff9a" +
    "\054\uff9a\055\uff9a\056\uff9a\057\uff9a\001\002\000\042\004" +
    "\uffa2\005\uffa2\006\uffa2\007\uffa2\034\uffa2\050\uffa2\077\uffa2" +
    "\100\uffa2\101\uffa2\102\uffa2\110\uffa2\111\uffa2\112\uffa2\113" +
    "\uffa2\114\uffa2\115\uffa2\001\002\000\070\004\uff9b\005\uff9b" +
    "\006\uff9b\007\uff9b\010\uff9b\011\uff9b\012\uff9b\024\uff9b\025" +
    "\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b\032\uff9b\033\uff9b" +
    "\036\uff9b\037\uff9b\040\uff9b\041\uff9b\042\uff9b\051\uff9b\052" +
    "\uff9b\053\uff9b\054\uff9b\055\uff9b\056\uff9b\057\uff9b\001\002" +
    "\000\070\004\uffaf\005\uffaf\006\uffaf\007\uffaf\010\uffaf\011" +
    "\uffaf\012\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf" +
    "\031\uffaf\032\uffaf\033\uffaf\036\uffaf\037\uffaf\040\uffaf\041" +
    "\uffaf\042\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf" +
    "\056\uffaf\057\uffaf\001\002\000\042\004\051\005\054\006" +
    "\052\007\045\034\035\050\036\077\041\100\034\101\032" +
    "\102\057\110\040\111\046\112\044\113\060\114\056\115" +
    "\042\001\002\000\042\004\uffa5\005\uffa5\006\uffa5\007\uffa5" +
    "\034\uffa5\050\uffa5\077\uffa5\100\uffa5\101\uffa5\102\uffa5\110" +
    "\uffa5\111\uffa5\112\uffa5\113\uffa5\114\uffa5\115\uffa5\001\002" +
    "\000\042\004\uffa3\005\uffa3\006\uffa3\007\uffa3\034\uffa3\050" +
    "\uffa3\077\uffa3\100\uffa3\101\uffa3\102\uffa3\110\uffa3\111\uffa3" +
    "\112\uffa3\113\uffa3\114\uffa3\115\uffa3\001\002\000\070\004" +
    "\uffb2\005\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2" +
    "\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032" +
    "\uffb2\033\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2" +
    "\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2\056\uffb2\057" +
    "\uffb2\001\002\000\042\004\uffa4\005\uffa4\006\uffa4\007\uffa4" +
    "\034\uffa4\050\uffa4\077\uffa4\100\uffa4\101\uffa4\102\uffa4\110" +
    "\uffa4\111\uffa4\112\uffa4\113\uffa4\114\uffa4\115\uffa4\001\002" +
    "\000\070\004\uffad\005\uffad\006\uffad\007\uffad\010\uffad\011" +
    "\uffad\012\uffad\024\uffad\025\uffad\026\uffad\027\uffad\030\uffad" +
    "\031\uffad\032\uffad\033\uffad\036\uffad\037\uffad\040\uffad\041" +
    "\uffad\042\uffad\051\uffad\052\uffad\053\uffad\054\uffad\055\uffad" +
    "\056\uffad\057\uffad\001\002\000\070\004\uff98\005\uff98\006" +
    "\uff98\007\uff98\010\uff98\011\uff98\012\uff98\024\uff98\025\uff98" +
    "\026\uff98\027\uff98\030\uff98\031\uff98\032\uff98\033\uff98\036" +
    "\uff98\037\uff98\040\uff98\041\uff98\042\uff98\051\uff98\052\uff98" +
    "\053\uff98\054\uff98\055\uff98\056\uff98\057\uff98\001\002\000" +
    "\004\050\uffcb\001\002\000\070\004\uff99\005\uff99\006\uff99" +
    "\007\uff99\010\uff99\011\uff99\012\uff99\024\uff99\025\uff99\026" +
    "\uff99\027\uff99\030\uff99\031\uff99\032\uff99\033\uff99\036\uff99" +
    "\037\uff99\040\uff99\041\uff99\042\uff99\051\uff99\052\uff99\053" +
    "\uff99\054\uff99\055\uff99\056\uff99\057\uff99\001\002\000\004" +
    "\050\062\001\002\000\044\004\051\005\054\006\052\007" +
    "\045\034\035\050\036\051\063\077\041\100\034\101\032" +
    "\102\057\110\040\111\046\112\044\113\060\114\056\115" +
    "\042\001\002\000\070\004\uffcf\005\uffcf\006\uffcf\007\uffcf" +
    "\010\uffcf\011\uffcf\012\uffcf\024\uffcf\025\uffcf\026\uffcf\027" +
    "\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\036\uffcf\037\uffcf" +
    "\040\uffcf\041\uffcf\042\uffcf\051\uffcf\052\uffcf\053\uffcf\054" +
    "\uffcf\055\uffcf\056\uffcf\057\uffcf\001\002\000\056\004\103" +
    "\005\106\006\105\007\101\010\113\011\104\012\067\024" +
    "\114\025\073\026\111\027\110\030\071\031\112\032\070" +
    "\033\074\036\072\037\076\040\115\042\077\051\uffc8\054" +
    "\075\057\102\001\002\000\004\051\066\001\002\000\070" +
    "\004\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0\012" +
    "\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0" +
    "\032\uffd0\033\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042" +
    "\uffd0\051\uffd0\052\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0" +
    "\057\uffd0\001\002\000\042\004\uff92\005\uff92\006\uff92\007" +
    "\uff92\034\uff92\050\uff92\077\uff92\100\uff92\101\uff92\102\uff92" +
    "\110\uff92\111\uff92\112\uff92\113\uff92\114\uff92\115\uff92\001" +
    "\002\000\042\004\uff8a\005\uff8a\006\uff8a\007\uff8a\034\uff8a" +
    "\050\uff8a\077\uff8a\100\uff8a\101\uff8a\102\uff8a\110\uff8a\111" +
    "\uff8a\112\uff8a\113\uff8a\114\uff8a\115\uff8a\001\002\000\042" +
    "\004\uff8c\005\uff8c\006\uff8c\007\uff8c\034\uff8c\050\uff8c\077" +
    "\uff8c\100\uff8c\101\uff8c\102\uff8c\110\uff8c\111\uff8c\112\uff8c" +
    "\113\uff8c\114\uff8c\115\uff8c\001\002\000\070\004\uffa1\005" +
    "\uffa1\006\uffa1\007\uffa1\010\uffa1\011\uffa1\012\uffa1\024\uffa1" +
    "\025\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1\032\uffa1\033" +
    "\uffa1\036\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1\051\uffa1" +
    "\052\uffa1\053\uffa1\054\uffa1\055\uffa1\056\uffa1\057\uffa1\001" +
    "\002\000\042\004\uff8f\005\uff8f\006\uff8f\007\uff8f\034\uff8f" +
    "\050\uff8f\077\uff8f\100\uff8f\101\uff8f\102\uff8f\110\uff8f\111" +
    "\uff8f\112\uff8f\113\uff8f\114\uff8f\115\uff8f\001\002\000\042" +
    "\004\uff89\005\uff89\006\uff89\007\uff89\034\uff89\050\uff89\077" +
    "\uff89\100\uff89\101\uff89\102\uff89\110\uff89\111\uff89\112\uff89" +
    "\113\uff89\114\uff89\115\uff89\001\002\000\042\004\051\005" +
    "\054\006\052\007\045\034\035\050\036\077\041\100\034" +
    "\101\032\102\057\110\040\111\046\112\044\113\060\114" +
    "\056\115\042\001\002\000\042\004\uff91\005\uff91\006\uff91" +
    "\007\uff91\034\uff91\050\uff91\077\uff91\100\uff91\101\uff91\102" +
    "\uff91\110\uff91\111\uff91\112\uff91\113\uff91\114\uff91\115\uff91" +
    "\001\002\000\004\110\123\001\002\000\070\004\uffa7\005" +
    "\uffa7\006\uffa7\007\uffa7\010\uffa7\011\uffa7\012\uffa7\024\uffa7" +
    "\025\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7\033" +
    "\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7\051\uffa7" +
    "\052\uffa7\053\uffa7\054\uffa7\055\uffa7\056\uffa7\057\uffa7\001" +
    "\002\000\042\004\uff95\005\uff95\006\uff95\007\uff95\034\uff95" +
    "\050\uff95\077\uff95\100\uff95\101\uff95\102\uff95\110\uff95\111" +
    "\uff95\112\uff95\113\uff95\114\uff95\115\uff95\001\002\000\042" +
    "\004\051\005\054\006\052\007\045\034\035\050\036\077" +
    "\041\100\034\101\032\102\057\110\040\111\046\112\044" +
    "\113\060\114\056\115\042\001\002\000\070\004\uffa0\005" +
    "\uffa0\006\uffa0\007\uffa0\010\uffa0\011\uffa0\012\uffa0\024\uffa0" +
    "\025\uffa0\026\uffa0\027\uffa0\030\uffa0\031\uffa0\032\uffa0\033" +
    "\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0\042\uffa0\051\uffa0" +
    "\052\uffa0\053\uffa0\054\uffa0\055\uffa0\056\uffa0\057\uffa0\001" +
    "\002\000\042\004\uff93\005\uff93\006\uff93\007\uff93\034\uff93" +
    "\050\uff93\077\uff93\100\uff93\101\uff93\102\uff93\110\uff93\111" +
    "\uff93\112\uff93\113\uff93\114\uff93\115\uff93\001\002\000\042" +
    "\004\uff96\005\uff96\006\uff96\007\uff96\034\uff96\050\uff96\077" +
    "\uff96\100\uff96\101\uff96\102\uff96\110\uff96\111\uff96\112\uff96" +
    "\113\uff96\114\uff96\115\uff96\001\002\000\070\004\uff9f\005" +
    "\uff9f\006\uff9f\007\uff9f\010\uff9f\011\uff9f\012\uff9f\024\uff9f" +
    "\025\uff9f\026\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f\033" +
    "\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f\051\uff9f" +
    "\052\uff9f\053\uff9f\054\uff9f\055\uff9f\056\uff9f\057\uff9f\001" +
    "\002\000\042\004\051\005\054\006\052\007\045\034\035" +
    "\050\036\077\041\100\034\101\032\102\057\110\040\111" +
    "\046\112\044\113\060\114\056\115\042\001\002\000\042" +
    "\004\uff8d\005\uff8d\006\uff8d\007\uff8d\034\uff8d\050\uff8d\077" +
    "\uff8d\100\uff8d\101\uff8d\102\uff8d\110\uff8d\111\uff8d\112\uff8d" +
    "\113\uff8d\114\uff8d\115\uff8d\001\002\000\042\004\uff8e\005" +
    "\uff8e\006\uff8e\007\uff8e\034\uff8e\050\uff8e\077\uff8e\100\uff8e" +
    "\101\uff8e\102\uff8e\110\uff8e\111\uff8e\112\uff8e\113\uff8e\114" +
    "\uff8e\115\uff8e\001\002\000\042\004\uff8b\005\uff8b\006\uff8b" +
    "\007\uff8b\034\uff8b\050\uff8b\077\uff8b\100\uff8b\101\uff8b\102" +
    "\uff8b\110\uff8b\111\uff8b\112\uff8b\113\uff8b\114\uff8b\115\uff8b" +
    "\001\002\000\042\004\uff94\005\uff94\006\uff94\007\uff94\034" +
    "\uff94\050\uff94\077\uff94\100\uff94\101\uff94\102\uff94\110\uff94" +
    "\111\uff94\112\uff94\113\uff94\114\uff94\115\uff94\001\002\000" +
    "\042\004\uff90\005\uff90\006\uff90\007\uff90\034\uff90\050\uff90" +
    "\077\uff90\100\uff90\101\uff90\102\uff90\110\uff90\111\uff90\112" +
    "\uff90\113\uff90\114\uff90\115\uff90\001\002\000\042\004\051" +
    "\005\054\006\052\007\045\034\035\050\036\077\041\100" +
    "\034\101\032\102\057\110\040\111\046\112\044\113\060" +
    "\114\056\115\042\001\002\000\054\004\103\005\106\006" +
    "\105\007\101\010\113\011\104\012\067\024\114\025\073" +
    "\026\111\027\110\030\071\031\112\032\070\033\074\036" +
    "\072\037\076\040\115\041\117\042\077\054\075\001\002" +
    "\000\042\004\051\005\054\006\052\007\045\034\035\050" +
    "\036\077\041\100\034\101\032\102\057\110\040\111\046" +
    "\112\044\113\060\114\056\115\042\001\002\000\070\004" +
    "\uff9d\005\uff9d\006\uff9d\007\uff9d\010\uff9d\011\uff9d\012\uff9d" +
    "\024\uff9d\025\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d\032" +
    "\uff9d\033\uff9d\036\072\037\uff9d\040\uff9d\041\uff9d\042\077" +
    "\051\uff9d\052\uff9d\053\uff9d\054\075\055\uff9d\056\uff9d\057" +
    "\uff9d\001\002\000\070\004\uff9e\005\uff9e\006\105\007\101" +
    "\010\113\011\104\012\067\024\114\025\073\026\111\027" +
    "\110\030\071\031\112\032\070\033\074\036\072\037\076" +
    "\040\115\041\uff9e\042\077\051\uff9e\052\uff9e\053\uff9e\054" +
    "\075\055\uff9e\056\uff9e\057\uff9e\001\002\000\004\051\uffc9" +
    "\001\002\000\070\004\uffab\005\uffab\006\uffab\007\uffab\010" +
    "\uffab\011\uffab\012\uffab\024\uffab\025\uffab\026\uffab\027\uffab" +
    "\030\uffab\031\uffab\032\uffab\033\uffab\036\uffab\037\uffab\040" +
    "\uffab\041\uffab\042\uffab\051\uffab\052\uffab\053\uffab\054\uffab" +
    "\055\uffab\056\uffab\057\uffab\001\002\000\054\004\103\005" +
    "\106\006\105\007\101\010\113\011\104\012\067\024\114" +
    "\025\073\026\111\027\110\030\071\031\112\032\070\033" +
    "\074\036\072\037\076\040\115\042\077\054\075\055\125" +
    "\001\002\000\070\004\uffac\005\uffac\006\uffac\007\uffac\010" +
    "\uffac\011\uffac\012\uffac\024\uffac\025\uffac\026\uffac\027\uffac" +
    "\030\uffac\031\uffac\032\uffac\033\uffac\036\uffac\037\uffac\040" +
    "\uffac\041\uffac\042\uffac\051\uffac\052\uffac\053\uffac\054\uffac" +
    "\055\uffac\056\uffac\057\uffac\001\002\000\070\004\uffa8\005" +
    "\uffa8\006\uffa8\007\uffa8\010\uffa8\011\uffa8\012\uffa8\024\uffa8" +
    "\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033" +
    "\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8\051\uffa8" +
    "\052\uffa8\053\uffa8\054\uffa8\055\uffa8\056\uffa8\057\uffa8\001" +
    "\002\000\010\051\uffea\054\135\110\uffea\001\002\000\004" +
    "\051\133\001\002\000\054\004\103\005\106\006\105\007" +
    "\101\010\113\011\104\012\067\024\114\025\073\026\111" +
    "\027\110\030\071\031\112\032\070\033\074\036\072\037" +
    "\076\040\115\042\077\051\132\054\075\001\002\000\070" +
    "\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0\011\uffb0\012" +
    "\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0" +
    "\032\uffb0\033\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042" +
    "\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0" +
    "\057\uffb0\001\002\000\042\004\051\005\054\006\052\007" +
    "\045\034\035\050\036\077\041\100\034\101\032\102\057" +
    "\110\040\111\046\112\044\113\060\114\056\115\042\001" +
    "\002\000\070\004\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa" +
    "\011\uffaa\012\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa\030" +
    "\uffaa\031\uffaa\032\uffaa\033\uffaa\036\072\037\uffaa\040\uffaa" +
    "\041\uffaa\042\077\051\uffaa\052\uffaa\053\uffaa\054\075\055" +
    "\uffaa\056\uffaa\057\uffaa\001\002\000\004\055\136\001\002" +
    "\000\004\051\137\001\002\000\042\004\051\005\054\006" +
    "\052\007\045\034\035\050\036\077\041\100\034\101\032" +
    "\102\057\110\040\111\046\112\044\113\060\114\056\115" +
    "\042\001\002\000\070\004\uffa9\005\uffa9\006\uffa9\007\uffa9" +
    "\010\uffa9\011\uffa9\012\uffa9\024\uffa9\025\uffa9\026\uffa9\027" +
    "\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9\036\072\037\uffa9" +
    "\040\uffa9\041\uffa9\042\077\051\uffa9\052\uffa9\053\uffa9\054" +
    "\075\055\uffa9\056\uffa9\057\uffa9\001\002\000\006\054\144" +
    "\110\ufff0\001\002\000\004\110\uffee\001\002\000\004\110" +
    "\uffef\001\002\000\044\004\051\005\054\006\052\007\045" +
    "\034\035\050\036\055\145\077\041\100\034\101\032\102" +
    "\057\110\040\111\046\112\044\113\060\114\056\115\042" +
    "\001\002\000\006\054\153\110\uffe0\001\002\000\054\004" +
    "\103\005\106\006\105\007\101\010\113\011\104\012\067" +
    "\024\114\025\073\026\111\027\110\030\071\031\112\032" +
    "\070\033\074\036\072\037\076\040\115\042\077\054\075" +
    "\055\147\001\002\000\030\013\uffe2\014\uffe2\015\uffe2\016" +
    "\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\054\151" +
    "\110\uffe2\001\002\000\026\013\uffe3\014\uffe3\015\uffe3\016" +
    "\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\110\uffe3" +
    "\001\002\000\042\004\051\005\054\006\052\007\045\034" +
    "\035\050\036\077\041\100\034\101\032\102\057\110\040" +
    "\111\046\112\044\113\060\114\056\115\042\001\002\000" +
    "\004\110\uffe1\001\002\000\004\055\145\001\002\000\004" +
    "\056\155\001\002\000\104\002\uffe4\004\uffe4\005\uffe4\006" +
    "\uffe4\007\uffe4\034\uffe4\043\uffe4\044\uffe4\045\uffe4\046\uffe4" +
    "\050\uffe4\052\uffe4\053\uffe4\062\uffe4\063\uffe4\064\uffe4\065" +
    "\uffe4\070\uffe4\071\uffe4\072\uffe4\073\uffe4\074\uffe4\075\uffe4" +
    "\077\uffe4\100\uffe4\101\uffe4\102\uffe4\110\uffe4\111\uffe4\112" +
    "\uffe4\113\uffe4\114\uffe4\115\uffe4\001\002\000\004\002\001" +
    "\001\002\000\010\052\160\054\144\110\ufff0\001\002\000" +
    "\020\043\012\044\016\045\020\046\006\053\ufff8\063\021" +
    "\064\017\001\002\000\004\053\164\001\002\000\020\043" +
    "\012\044\016\045\020\046\006\053\ufff8\063\021\064\017" +
    "\001\002\000\004\053\ufff9\001\002\000\022\002\ufffc\043" +
    "\ufffc\044\ufffc\045\ufffc\046\ufffc\062\ufffc\063\ufffc\064\ufffc" +
    "\001\002\000\004\110\ufff1\001\002\000\004\110\ufff2\001" +
    "\002\000\022\002\ufff6\043\ufff6\044\ufff6\045\ufff6\046\ufff6" +
    "\062\ufff6\063\ufff6\064\ufff6\001\002\000\016\043\012\044" +
    "\016\045\020\046\006\047\172\063\021\001\002\000\004" +
    "\110\174\001\002\000\004\110\ufffa\001\002\000\004\110" +
    "\ufffb\001\002\000\004\050\175\001\002\000\016\043\012" +
    "\044\016\045\020\046\006\051\uffe8\063\021\001\002\000" +
    "\004\051\uffe9\001\002\000\004\051\204\001\002\000\004" +
    "\110\201\001\002\000\006\051\uffe6\057\202\001\002\000" +
    "\014\043\012\044\016\045\020\046\006\063\021\001\002" +
    "\000\004\051\uffe7\001\002\000\004\052\205\001\002\000" +
    "\052\004\222\005\225\043\012\044\016\045\020\046\006" +
    "\053\ufff4\063\021\064\017\065\210\070\206\071\223\072" +
    "\207\073\226\074\224\077\041\100\034\101\032\102\057" +
    "\110\220\001\002\000\060\004\051\005\054\006\052\007" +
    "\045\034\035\043\012\044\016\045\020\046\006\050\337" +
    "\052\336\063\021\064\017\077\041\100\034\101\032\102" +
    "\057\110\040\111\046\112\044\113\060\114\056\115\042" +
    "\001\002\000\004\056\334\001\002\000\042\004\051\005" +
    "\054\006\052\007\045\034\035\050\036\077\041\100\034" +
    "\101\032\102\057\110\040\111\046\112\044\113\060\114" +
    "\056\115\042\001\002\000\056\004\uffda\005\uffda\043\uffda" +
    "\044\uffda\045\uffda\046\uffda\052\uffda\053\uffda\063\uffda\064" +
    "\uffda\065\uffda\070\uffda\071\uffda\072\uffda\073\uffda\074\uffda" +
    "\075\uffda\077\uffda\100\uffda\101\uffda\102\uffda\110\uffda\001" +
    "\002\000\004\056\312\001\002\000\056\004\uffd6\005\uffd6" +
    "\043\uffd6\044\uffd6\045\uffd6\046\uffd6\052\uffd6\053\uffd6\063" +
    "\uffd6\064\uffd6\065\uffd6\070\uffd6\071\uffd6\072\uffd6\073\uffd6" +
    "\074\uffd6\075\uffd6\077\uffd6\100\uffd6\101\uffd6\102\uffd6\110" +
    "\uffd6\001\002\000\056\004\uffd5\005\uffd5\043\uffd5\044\uffd5" +
    "\045\uffd5\046\uffd5\052\uffd5\053\uffd5\063\uffd5\064\uffd5\065" +
    "\uffd5\070\uffd5\071\uffd5\072\uffd5\073\uffd5\074\uffd5\075\uffd5" +
    "\077\uffd5\100\uffd5\101\uffd5\102\uffd5\110\uffd5\001\002\000" +
    "\056\004\uffd8\005\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8" +
    "\052\uffd8\053\uffd8\063\uffd8\064\uffd8\065\uffd8\070\uffd8\071" +
    "\uffd8\072\uffd8\073\uffd8\074\uffd8\075\uffd8\077\uffd8\100\uffd8" +
    "\101\uffd8\102\uffd8\110\uffd8\001\002\000\056\004\uffd9\005" +
    "\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\052\uffd9\053\uffd9" +
    "\063\uffd9\064\uffd9\065\uffd9\070\uffd9\071\uffd9\072\uffd9\073" +
    "\uffd9\074\uffd9\075\uffd9\077\uffd9\100\uffd9\101\uffd9\102\uffd9" +
    "\110\uffd9\001\002\000\004\056\311\001\002\000\040\004" +
    "\241\005\242\013\243\014\252\015\245\016\250\017\253" +
    "\020\251\021\240\022\236\023\246\035\306\042\244\050" +
    "\uffce\054\151\001\002\000\056\004\uffdb\005\uffdb\043\uffdb" +
    "\044\uffdb\045\uffdb\046\uffdb\052\uffdb\053\uffdb\063\uffdb\064" +
    "\uffdb\065\uffdb\070\uffdb\071\uffdb\072\uffdb\073\uffdb\074\uffdb" +
    "\075\uffdb\077\uffdb\100\uffdb\101\uffdb\102\uffdb\110\uffdb\001" +
    "\002\000\004\110\305\001\002\000\004\056\304\001\002" +
    "\000\044\004\051\005\054\006\052\007\045\034\035\050" +
    "\036\056\302\077\041\100\034\101\032\102\057\110\040" +
    "\111\046\112\044\113\060\114\056\115\042\001\002\000" +
    "\004\110\300\001\002\000\042\004\051\005\054\006\052" +
    "\007\045\034\035\050\036\077\041\100\034\101\032\102" +
    "\057\110\040\111\046\112\044\113\060\114\056\115\042" +
    "\001\002\000\004\053\263\001\002\000\056\004\222\005" +
    "\225\043\012\044\016\045\020\046\006\052\ufff4\053\ufff4" +
    "\063\021\064\017\065\210\070\206\071\223\072\207\073" +
    "\226\074\224\075\ufff4\077\041\100\034\101\032\102\057" +
    "\110\220\001\002\000\056\004\uffd3\005\uffd3\043\uffd3\044" +
    "\uffd3\045\uffd3\046\uffd3\052\uffd3\053\uffd3\063\uffd3\064\uffd3" +
    "\065\uffd3\070\uffd3\071\uffd3\072\uffd3\073\uffd3\074\uffd3\075" +
    "\uffd3\077\uffd3\100\uffd3\101\uffd3\102\uffd3\110\uffd3\001\002" +
    "\000\012\051\uffc3\052\uffc3\056\uffc3\057\233\001\002\000" +
    "\010\004\222\005\225\110\234\001\002\000\034\004\241" +
    "\005\242\013\243\014\252\015\245\016\250\017\253\020" +
    "\251\021\240\022\236\023\246\042\244\054\151\001\002" +
    "\000\010\051\uffc4\052\uffc4\056\uffc4\001\002\000\042\004" +
    "\uffb4\005\uffb4\006\uffb4\007\uffb4\034\uffb4\050\uffb4\077\uffb4" +
    "\100\uffb4\101\uffb4\102\uffb4\110\uffb4\111\uffb4\112\uffb4\113" +
    "\uffb4\114\uffb4\115\uffb4\001\002\000\024\013\243\014\252" +
    "\015\245\016\250\017\253\020\251\021\240\022\236\023" +
    "\246\001\002\000\042\004\uffb5\005\uffb5\006\uffb5\007\uffb5" +
    "\034\uffb5\050\uffb5\077\uffb5\100\uffb5\101\uffb5\102\uffb5\110" +
    "\uffb5\111\uffb5\112\uffb5\113\uffb5\114\uffb5\115\uffb5\001\002" +
    "\000\012\051\uffbf\052\uffbf\056\uffbf\057\uffbf\001\002\000" +
    "\012\051\uffbe\052\uffbe\056\uffbe\057\uffbe\001\002\000\042" +
    "\004\uffbb\005\uffbb\006\uffbb\007\uffbb\034\uffbb\050\uffbb\077" +
    "\uffbb\100\uffbb\101\uffbb\102\uffbb\110\uffbb\111\uffbb\112\uffbb" +
    "\113\uffbb\114\uffbb\115\uffbb\001\002\000\004\110\255\001" +
    "\002\000\042\004\uffb9\005\uffb9\006\uffb9\007\uffb9\034\uffb9" +
    "\050\uffb9\077\uffb9\100\uffb9\101\uffb9\102\uffb9\110\uffb9\111" +
    "\uffb9\112\uffb9\113\uffb9\114\uffb9\115\uffb9\001\002\000\042" +
    "\004\uffb3\005\uffb3\006\uffb3\007\uffb3\034\uffb3\050\uffb3\077" +
    "\uffb3\100\uffb3\101\uffb3\102\uffb3\110\uffb3\111\uffb3\112\uffb3" +
    "\113\uffb3\114\uffb3\115\uffb3\001\002\000\042\004\051\005" +
    "\054\006\052\007\045\034\035\050\036\077\041\100\034" +
    "\101\032\102\057\110\040\111\046\112\044\113\060\114" +
    "\056\115\042\001\002\000\042\004\uffb8\005\uffb8\006\uffb8" +
    "\007\uffb8\034\uffb8\050\uffb8\077\uffb8\100\uffb8\101\uffb8\102" +
    "\uffb8\110\uffb8\111\uffb8\112\uffb8\113\uffb8\114\uffb8\115\uffb8" +
    "\001\002\000\042\004\uffb6\005\uffb6\006\uffb6\007\uffb6\034" +
    "\uffb6\050\uffb6\077\uffb6\100\uffb6\101\uffb6\102\uffb6\110\uffb6" +
    "\111\uffb6\112\uffb6\113\uffb6\114\uffb6\115\uffb6\001\002\000" +
    "\042\004\uffba\005\uffba\006\uffba\007\uffba\034\uffba\050\uffba" +
    "\077\uffba\100\uffba\101\uffba\102\uffba\110\uffba\111\uffba\112" +
    "\uffba\113\uffba\114\uffba\115\uffba\001\002\000\042\004\uffb7" +
    "\005\uffb7\006\uffb7\007\uffb7\034\uffb7\050\uffb7\077\uffb7\100" +
    "\uffb7\101\uffb7\102\uffb7\110\uffb7\111\uffb7\112\uffb7\113\uffb7" +
    "\114\uffb7\115\uffb7\001\002\000\062\004\103\005\106\006" +
    "\105\007\101\010\113\011\104\012\067\024\114\025\073" +
    "\026\111\027\110\030\071\031\112\032\070\033\074\036" +
    "\072\037\076\040\115\042\077\051\uffc2\052\uffc2\054\075" +
    "\056\uffc2\057\uffc2\001\002\000\024\013\243\014\252\015" +
    "\245\016\250\017\253\020\251\021\240\022\236\023\246" +
    "\001\002\000\042\004\051\005\054\006\052\007\045\034" +
    "\035\050\036\077\041\100\034\101\032\102\057\110\040" +
    "\111\046\112\044\113\060\114\056\115\042\001\002\000" +
    "\062\004\103\005\106\006\105\007\101\010\113\011\104" +
    "\012\067\024\114\025\073\026\111\027\110\030\071\031" +
    "\112\032\070\033\074\036\072\037\076\040\115\042\077" +
    "\051\uffc0\052\uffc0\054\075\056\uffc0\057\uffc0\001\002\000" +
    "\042\004\051\005\054\006\052\007\045\034\035\050\036" +
    "\077\041\100\034\101\032\102\057\110\040\111\046\112" +
    "\044\113\060\114\056\115\042\001\002\000\062\004\103" +
    "\005\106\006\105\007\101\010\113\011\104\012\067\024" +
    "\114\025\073\026\111\027\110\030\071\031\112\032\070" +
    "\033\074\036\072\037\076\040\115\042\077\051\uffc1\052" +
    "\uffc1\054\075\056\uffc1\057\uffc1\001\002\000\010\052\ufff5" +
    "\053\ufff5\075\ufff5\001\002\000\022\002\ufffe\043\ufffe\044" +
    "\ufffe\045\ufffe\046\ufffe\062\ufffe\063\ufffe\064\ufffe\001\002" +
    "\000\054\004\103\005\106\006\105\007\101\010\113\011" +
    "\104\012\067\024\114\025\073\026\111\027\110\030\071" +
    "\031\112\032\070\033\074\036\072\037\076\040\115\042" +
    "\077\053\265\054\075\001\002\000\004\075\uff7a\001\002" +
    "\000\004\075\267\001\002\000\044\004\051\005\054\006" +
    "\052\007\045\034\035\050\036\076\272\077\041\100\034" +
    "\101\032\102\057\110\040\111\046\112\044\113\060\114" +
    "\056\115\042\001\002\000\004\052\271\001\002\000\056" +
    "\004\uff7c\005\uff7c\043\uff7c\044\uff7c\045\uff7c\046\uff7c\052" +
    "\uff7c\053\uff7c\063\uff7c\064\uff7c\065\uff7c\070\uff7c\071\uff7c" +
    "\072\uff7c\073\uff7c\074\uff7c\075\uff7c\077\uff7c\100\uff7c\101" +
    "\uff7c\102\uff7c\110\uff7c\001\002\000\004\041\276\001\002" +
    "\000\054\004\103\005\106\006\105\007\101\010\113\011" +
    "\104\012\067\024\114\025\073\026\111\027\110\030\071" +
    "\031\112\032\070\033\074\036\072\037\076\040\115\041" +
    "\274\042\077\054\075\001\002\000\052\004\222\005\225" +
    "\043\012\044\016\045\020\046\006\063\021\064\017\065" +
    "\210\070\206\071\223\072\207\073\226\074\224\075\ufff4" +
    "\077\041\100\034\101\032\102\057\110\220\001\002\000" +
    "\004\075\uff7b\001\002\000\052\004\222\005\225\043\012" +
    "\044\016\045\020\046\006\052\ufff4\063\021\064\017\065" +
    "\210\070\206\071\223\072\207\073\226\074\224\077\041" +
    "\100\034\101\032\102\057\110\220\001\002\000\004\052" +
    "\uff79\001\002\000\012\051\uffbc\052\uffbc\056\uffbc\057\uffbc" +
    "\001\002\000\054\004\103\005\106\006\105\007\101\010" +
    "\113\011\104\012\067\024\114\025\073\026\111\027\110" +
    "\030\071\031\112\032\070\033\074\036\072\037\076\040" +
    "\115\042\077\054\075\056\303\001\002\000\056\004\uffc7" +
    "\005\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\052\uffc7\053" +
    "\uffc7\063\uffc7\064\uffc7\065\uffc7\070\uffc7\071\uffc7\072\uffc7" +
    "\073\uffc7\074\uffc7\075\uffc7\077\uffc7\100\uffc7\101\uffc7\102" +
    "\uffc7\110\uffc7\001\002\000\056\004\uffc6\005\uffc6\043\uffc6" +
    "\044\uffc6\045\uffc6\046\uffc6\052\uffc6\053\uffc6\063\uffc6\064" +
    "\uffc6\065\uffc6\070\uffc6\071\uffc6\072\uffc6\073\uffc6\074\uffc6" +
    "\075\uffc6\077\uffc6\100\uffc6\101\uffc6\102\uffc6\110\uffc6\001" +
    "\002\000\056\004\uffd2\005\uffd2\043\uffd2\044\uffd2\045\uffd2" +
    "\046\uffd2\052\uffd2\053\uffd2\063\uffd2\064\uffd2\065\uffd2\070" +
    "\uffd2\071\uffd2\072\uffd2\073\uffd2\074\uffd2\075\uffd2\077\uffd2" +
    "\100\uffd2\101\uffd2\102\uffd2\110\uffd2\001\002\000\012\051" +
    "\uffbd\052\uffbd\056\uffbd\057\uffbd\001\002\000\004\110\307" +
    "\001\002\000\004\056\310\001\002\000\056\004\uffc5\005" +
    "\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\052\uffc5\053\uffc5" +
    "\063\uffc5\064\uffc5\065\uffc5\070\uffc5\071\uffc5\072\uffc5\073" +
    "\uffc5\074\uffc5\075\uffc5\077\uffc5\100\uffc5\101\uffc5\102\uffc5" +
    "\110\uffc5\001\002\000\056\004\uffd7\005\uffd7\043\uffd7\044" +
    "\uffd7\045\uffd7\046\uffd7\052\uffd7\053\uffd7\063\uffd7\064\uffd7" +
    "\065\uffd7\070\uffd7\071\uffd7\072\uffd7\073\uffd7\074\uffd7\075" +
    "\uffd7\077\uffd7\100\uffd7\101\uffd7\102\uffd7\110\uffd7\001\002" +
    "\000\056\004\uffd4\005\uffd4\043\uffd4\044\uffd4\045\uffd4\046" +
    "\uffd4\052\uffd4\053\uffd4\063\uffd4\064\uffd4\065\uffd4\070\uffd4" +
    "\071\uffd4\072\uffd4\073\uffd4\074\uffd4\075\uffd4\077\uffd4\100" +
    "\uffd4\101\uffd4\102\uffd4\110\uffd4\001\002\000\054\004\103" +
    "\005\106\006\105\007\101\010\113\011\104\012\067\024" +
    "\114\025\073\026\111\027\110\030\071\031\112\032\070" +
    "\033\074\036\072\037\076\040\115\042\077\052\314\054" +
    "\075\001\002\000\052\004\222\005\225\043\012\044\016" +
    "\045\020\046\006\053\ufff4\063\021\064\017\065\210\070" +
    "\206\071\223\072\207\073\226\074\224\077\041\100\034" +
    "\101\032\102\057\110\220\001\002\000\004\053\316\001" +
    "\002\000\062\004\uff80\005\uff80\043\uff80\044\uff80\045\uff80" +
    "\046\uff80\052\uff80\053\uff80\063\uff80\064\uff80\065\uff80\066" +
    "\321\067\uff80\070\uff80\071\uff80\072\uff80\073\uff80\074\uff80" +
    "\075\uff80\077\uff80\100\uff80\101\uff80\102\uff80\110\uff80\001" +
    "\002\000\062\004\uff80\005\uff80\043\uff80\044\uff80\045\uff80" +
    "\046\uff80\052\uff80\053\uff80\063\uff80\064\uff80\065\uff80\066" +
    "\321\067\uff80\070\uff80\071\uff80\072\uff80\073\uff80\074\uff80" +
    "\075\uff80\077\uff80\100\uff80\101\uff80\102\uff80\110\uff80\001" +
    "\002\000\060\004\uff7d\005\uff7d\043\uff7d\044\uff7d\045\uff7d" +
    "\046\uff7d\052\uff7d\053\uff7d\063\uff7d\064\uff7d\065\uff7d\067" +
    "\327\070\uff7d\071\uff7d\072\uff7d\073\uff7d\074\uff7d\075\uff7d" +
    "\077\uff7d\100\uff7d\101\uff7d\102\uff7d\110\uff7d\001\002\000" +
    "\042\004\051\005\054\006\052\007\045\034\035\050\036" +
    "\077\041\100\034\101\032\102\057\110\040\111\046\112" +
    "\044\113\060\114\056\115\042\001\002\000\054\004\103" +
    "\005\106\006\105\007\101\010\113\011\104\012\067\024" +
    "\114\025\073\026\111\027\110\030\071\031\112\032\070" +
    "\033\074\036\072\037\076\040\115\042\077\052\323\054" +
    "\075\001\002\000\052\004\222\005\225\043\012\044\016" +
    "\045\020\046\006\053\ufff4\063\021\064\017\065\210\070" +
    "\206\071\223\072\207\073\226\074\224\077\041\100\034" +
    "\101\032\102\057\110\220\001\002\000\004\053\325\001" +
    "\002\000\062\004\uff7f\005\uff7f\043\uff7f\044\uff7f\045\uff7f" +
    "\046\uff7f\052\uff7f\053\uff7f\063\uff7f\064\uff7f\065\uff7f\066" +
    "\uff7f\067\uff7f\070\uff7f\071\uff7f\072\uff7f\073\uff7f\074\uff7f" +
    "\075\uff7f\077\uff7f\100\uff7f\101\uff7f\102\uff7f\110\uff7f\001" +
    "\002\000\056\004\uff82\005\uff82\043\uff82\044\uff82\045\uff82" +
    "\046\uff82\052\uff82\053\uff82\063\uff82\064\uff82\065\uff82\070" +
    "\uff82\071\uff82\072\uff82\073\uff82\074\uff82\075\uff82\077\uff82" +
    "\100\uff82\101\uff82\102\uff82\110\uff82\001\002\000\004\052" +
    "\330\001\002\000\052\004\222\005\225\043\012\044\016" +
    "\045\020\046\006\053\ufff4\063\021\064\017\065\210\070" +
    "\206\071\223\072\207\073\226\074\224\077\041\100\034" +
    "\101\032\102\057\110\220\001\002\000\004\053\332\001" +
    "\002\000\056\004\uff7e\005\uff7e\043\uff7e\044\uff7e\045\uff7e" +
    "\046\uff7e\052\uff7e\053\uff7e\063\uff7e\064\uff7e\065\uff7e\070" +
    "\uff7e\071\uff7e\072\uff7e\073\uff7e\074\uff7e\075\uff7e\077\uff7e" +
    "\100\uff7e\101\uff7e\102\uff7e\110\uff7e\001\002\000\060\004" +
    "\uff81\005\uff81\043\uff81\044\uff81\045\uff81\046\uff81\052\uff81" +
    "\053\uff81\063\uff81\064\uff81\065\uff81\067\uff81\070\uff81\071" +
    "\uff81\072\uff81\073\uff81\074\uff81\075\uff81\077\uff81\100\uff81" +
    "\101\uff81\102\uff81\110\uff81\001\002\000\056\004\uffd1\005" +
    "\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\052\uffd1\053\uffd1" +
    "\063\uffd1\064\uffd1\065\uffd1\070\uffd1\071\uffd1\072\uffd1\073" +
    "\uffd1\074\uffd1\075\uffd1\077\uffd1\100\uffd1\101\uffd1\102\uffd1" +
    "\110\uffd1\001\002\000\006\052\uff83\056\uff83\001\002\000" +
    "\052\004\222\005\225\043\012\044\016\045\020\046\006" +
    "\053\ufff4\063\021\064\017\065\210\070\206\071\223\072" +
    "\207\073\226\074\224\077\041\100\034\101\032\102\057" +
    "\110\220\001\002\000\056\004\051\005\054\006\052\007" +
    "\045\034\035\043\012\044\016\045\020\046\127\050\337" +
    "\063\021\064\017\077\041\100\034\101\032\102\057\110" +
    "\040\111\046\112\044\113\060\114\056\115\042\001\002" +
    "\000\042\004\051\005\054\006\052\007\045\034\035\050" +
    "\036\077\041\100\034\101\032\102\057\110\040\111\046" +
    "\112\044\113\060\114\056\115\042\001\002\000\004\052" +
    "\343\001\002\000\056\004\103\005\106\006\105\007\101" +
    "\010\113\011\104\012\067\024\114\025\073\026\111\027" +
    "\110\030\071\031\112\032\070\033\074\036\072\037\076" +
    "\040\115\042\077\052\uff84\054\075\056\uff84\001\002\000" +
    "\052\004\222\005\225\043\012\044\016\045\020\046\006" +
    "\053\ufff4\063\021\064\017\065\210\070\206\071\223\072" +
    "\207\073\226\074\224\077\041\100\034\101\032\102\057" +
    "\110\220\001\002\000\004\053\345\001\002\000\056\004" +
    "\uff88\005\uff88\043\uff88\044\uff88\045\uff88\046\uff88\052\uff88" +
    "\053\uff88\063\uff88\064\uff88\065\uff88\070\uff88\071\uff88\072" +
    "\uff88\073\uff88\074\uff88\075\uff88\077\uff88\100\uff88\101\uff88" +
    "\102\uff88\110\uff88\001\002\000\054\004\103\005\106\006" +
    "\105\007\101\010\113\011\104\012\067\024\114\025\073" +
    "\026\111\027\110\030\071\031\112\032\070\033\074\036" +
    "\072\037\076\040\115\042\077\054\075\056\347\001\002" +
    "\000\010\004\222\005\225\110\234\001\002\000\010\051" +
    "\uff85\052\uff85\056\uff85\001\002\000\010\051\133\054\144" +
    "\110\ufff3\001\002\000\004\051\353\001\002\000\010\051" +
    "\uff86\052\uff86\056\uff86\001\002\000\004\053\355\001\002" +
    "\000\056\004\051\005\054\006\052\007\045\034\035\043" +
    "\012\044\016\045\020\046\006\050\337\063\021\064\017" +
    "\077\041\100\034\101\032\102\057\110\040\111\046\112" +
    "\044\113\060\114\056\115\042\001\002\000\004\056\357" +
    "\001\002\000\056\004\uff87\005\uff87\043\uff87\044\uff87\045" +
    "\uff87\046\uff87\052\uff87\053\uff87\063\uff87\064\uff87\065\uff87" +
    "\070\uff87\071\uff87\072\uff87\073\uff87\074\uff87\075\uff87\077" +
    "\uff87\100\uff87\101\uff87\102\uff87\110\uff87\001\002\000\006" +
    "\060\361\110\ufffa\001\002\000\004\050\362\001\002\000" +
    "\004\046\363\001\002\000\004\054\364\001\002\000\004" +
    "\055\365\001\002\000\004\054\366\001\002\000\004\055" +
    "\367\001\002\000\004\061\370\001\002\000\004\051\371" +
    "\001\002\000\004\052\372\001\002\000\052\004\222\005" +
    "\225\043\012\044\016\045\020\046\006\053\ufff4\063\021" +
    "\064\017\065\210\070\206\071\223\072\207\073\226\074" +
    "\224\077\041\100\034\101\032\102\057\110\220\001\002" +
    "\000\004\053\374\001\002\000\022\002\ufff7\043\ufff7\044" +
    "\ufff7\045\ufff7\046\ufff7\062\ufff7\063\ufff7\064\ufff7\001\002" +
    "\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\373\000\016\003\006\005\010\006\014\011\007\050" +
    "\013\051\003\001\001\000\016\003\006\005\010\006\014" +
    "\011\007\050\374\051\003\001\001\000\010\004\170\005" +
    "\010\006\172\001\001\000\002\001\001\000\012\005\010" +
    "\006\014\011\007\051\166\001\001\000\002\001\001\000" +
    "\006\052\165\053\164\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\153\001\001\000" +
    "\002\001\001\000\006\005\010\006\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\023\001\001\000" +
    "\004\013\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\017\036\020\060\026\042\027\046\030\032\031" +
    "\054\032\052\034\047\001\001\000\002\001\001\000\004" +
    "\012\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\005\127\017\036\020\060\026\130\027\046\030\032\031" +
    "\054\032\052\034\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\033" +
    "\106\035\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\017\036\020" +
    "\060\026\125\027\046\030\032\031\054\032\052\034\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\017\036\020\060\021\064\026\063\027\046\030\032" +
    "\031\054\032\052\034\047\001\001\000\002\001\001\000" +
    "\006\033\106\035\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\017\036\020\060\026\123\027\046\030\032\031" +
    "\054\032\052\034\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\017" +
    "\036\020\060\021\121\026\063\027\046\030\032\031\054" +
    "\032\052\034\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\017\036" +
    "\020\060\026\120\027\046\030\032\031\054\032\052\034" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\017" +
    "\036\020\060\026\115\027\046\030\032\031\054\032\052" +
    "\034\047\001\001\000\006\033\106\035\077\001\001\000" +
    "\022\017\036\020\060\026\117\027\046\030\032\031\054" +
    "\032\052\034\047\001\001\000\006\033\106\035\077\001" +
    "\001\000\006\033\106\035\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\033\106\035\077\001\001\000" +
    "\002\001\001\000\006\033\106\035\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\033\106\035\077\001" +
    "\001\000\002\001\001\000\022\017\036\020\060\026\133" +
    "\027\046\030\032\031\054\032\052\034\047\001\001\000" +
    "\006\033\106\035\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\017\036\020\060\026\137\027\046\030" +
    "\032\031\054\032\052\034\047\001\001\000\006\033\106" +
    "\035\077\001\001\000\006\052\142\053\141\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\017\036\020\060" +
    "\026\145\027\046\030\032\031\054\032\052\034\047\001" +
    "\001\000\004\053\151\001\001\000\006\033\106\035\077" +
    "\001\001\000\004\052\147\001\001\000\002\001\001\000" +
    "\022\017\036\020\060\026\145\027\046\030\032\031\054" +
    "\032\052\034\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\052\142\053\141\001\001\000\012\005\010\006" +
    "\014\011\161\054\160\001\001\000\002\001\001\000\012" +
    "\005\010\006\014\011\161\054\162\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\004\170\005\010\006\172\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\005\010\006\177\007\176\010" +
    "\175\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\005\010\006\177\010" +
    "\202\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\002\226\005\010\006\014\011\213\014\231\015\227\016" +
    "\220\017\216\020\060\022\212\023\230\024\211\036\210" +
    "\041\215\045\214\001\001\000\034\005\010\006\014\011" +
    "\337\017\036\020\060\026\341\027\046\030\032\031\054" +
    "\032\052\034\047\037\340\040\334\001\001\000\002\001" +
    "\001\000\022\017\036\020\060\026\312\027\046\030\032" +
    "\031\054\032\052\034\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\025" +
    "\246\052\236\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\017\036\020\060\026\300\027" +
    "\046\030\032\031\054\032\052\034\047\001\001\000\002" +
    "\001\001\000\022\017\036\020\060\026\263\027\046\030" +
    "\032\031\054\032\052\034\047\001\001\000\002\001\001" +
    "\000\040\002\261\005\010\006\014\011\213\014\231\015" +
    "\227\016\220\017\216\020\060\022\212\023\230\024\211" +
    "\036\210\041\215\045\214\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\014\231\024\234\001\001\000\006" +
    "\025\246\052\236\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\257\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\017\036" +
    "\020\060\026\253\027\046\030\032\031\054\032\052\034" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\033\106\035\077\001" +
    "\001\000\004\025\255\001\001\000\022\017\036\020\060" +
    "\026\256\027\046\030\032\031\054\032\052\034\047\001" +
    "\001\000\006\033\106\035\077\001\001\000\022\017\036" +
    "\020\060\026\260\027\046\030\032\031\054\032\052\034" +
    "\047\001\001\000\006\033\106\035\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\033\106\035\077\001" +
    "\001\000\004\046\265\001\001\000\004\047\267\001\001" +
    "\000\022\017\036\020\060\026\272\027\046\030\032\031" +
    "\054\032\052\034\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\033\106\035\077\001" +
    "\001\000\040\002\274\005\010\006\014\011\213\014\231" +
    "\015\227\016\220\017\216\020\060\022\212\023\230\024" +
    "\211\036\210\041\215\045\214\001\001\000\002\001\001" +
    "\000\040\002\276\005\010\006\014\011\213\014\231\015" +
    "\227\016\220\017\216\020\060\022\212\023\230\024\211" +
    "\036\210\041\215\045\214\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\033\106\035\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\033\106\035" +
    "\077\001\001\000\040\002\314\005\010\006\014\011\213" +
    "\014\231\015\227\016\220\017\216\020\060\022\212\023" +
    "\230\024\211\036\210\041\215\045\214\001\001\000\002" +
    "\001\001\000\006\042\317\043\316\001\001\000\006\042" +
    "\332\043\316\001\001\000\004\044\325\001\001\000\022" +
    "\017\036\020\060\026\321\027\046\030\032\031\054\032" +
    "\052\034\047\001\001\000\006\033\106\035\077\001\001" +
    "\000\040\002\323\005\010\006\014\011\213\014\231\015" +
    "\227\016\220\017\216\020\060\022\212\023\230\024\211" +
    "\036\210\041\215\045\214\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\002\330\005\010\006\014\011\213\014\231\015\227\016" +
    "\220\017\216\020\060\022\212\023\230\024\211\036\210" +
    "\041\215\045\214\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\002\353\005\010\006\014\011\213\014\231\015" +
    "\227\016\220\017\216\020\060\022\212\023\230\024\211" +
    "\036\210\041\215\045\214\001\001\000\032\005\350\006" +
    "\014\011\337\017\036\020\060\026\130\027\046\030\032" +
    "\031\054\032\052\034\047\040\351\001\001\000\022\017" +
    "\036\020\060\026\345\027\046\030\032\031\054\032\052" +
    "\034\047\001\001\000\002\001\001\000\006\033\106\035" +
    "\077\001\001\000\040\002\343\005\010\006\014\011\213" +
    "\014\231\015\227\016\220\017\216\020\060\022\212\023" +
    "\230\024\211\036\210\041\215\045\214\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\033\106\035\077\001" +
    "\001\000\006\014\231\024\347\001\001\000\002\001\001" +
    "\000\006\052\165\053\164\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\005\010\006\014" +
    "\011\337\017\036\020\060\026\341\027\046\030\032\031" +
    "\054\032\052\034\047\037\355\040\334\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\002\372\005\010" +
    "\006\014\011\213\014\231\015\227\016\220\017\216\020" +
    "\060\022\212\023\230\024\211\036\210\041\215\045\214" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 
    ComplexSymbol s = (ComplexSymbol) getScanner().next_token();
    return s;

    }


    /**
    * Assignatura 21780 - Compiladors
    * Estudis: Grau en Enginyeria Informàtica 
    * Itinerari: Intel·ligència Artificial i Computacio
    *
    * Equipo: Arturo, Dani y Marta
    */
    private String errores = "";
    public String getErrores() {
        return errores;
    }
    /**
     * Error cuando no es posible una recuperacion de errores.
    **/ 
    @Override
    public void unrecovered_syntax_error(Symbol cur_token) { 
        String causa = "" + cur_token.value;
        if (cur_token.sym == ParserSym.EOF) {
            causa = "No se ha encontrado metodo main. Sintaxis: \n"+
                "f void inicio(string[]argumentos){ # codigo # }\n";
        }
        errores += "No se ha podido recuperar del ultimo error. \nCausa: " + causa;
        done_parsing();
    }  

    /**
     * Error sintactico.
    **/ 
    @Override
    public void syntax_error(Symbol cur_token){ 
        report_error("Error sintactico: ", cur_token);
    } 

    @Override
    public void report_error(String message, Object info) {
        if (cur_token.sym == ParserSym.EOF) {
            return;
        }
        String err = message + "No se esperaba este componente\n: " +cur_token.value+".";
        if (info instanceof ComplexSymbol token) {
            List expected = expected_token_ids();
            String tokens = "";
            for (Object t : expected){
                tokens += ParserSym.terminalNames[(int)t] + ", ";
            }
            if (!tokens.isEmpty()) {
                tokens = "Se esperaba algun lexema de los siguientes tipos: " + tokens.substring(0, tokens.length() - 2) + ".\n";
            }
            String loc;
            if (token.xleft.getLine() == token.xright.getLine()) {
                loc = "En la linea " + token.xleft.getLine() + " entre las columnas " + token.xleft.getColumn() + " y " + token.xright.getColumn();
            } else {
                loc = "Desde la linea " + token.xleft.getLine() + " y columna " + token.xleft.getColumn() + " hasta la linea " + token.xright.getLine() + " y columna " + token.xright.getColumn();
            }
            err = message + loc + ". \n" + tokens + "Se ha encontrado '" + token.value + "' de tipo " + ParserSym.terminalNames[token.sym] + ".\n";  
        } 
        errores += err;
    }

    @Override
    public void report_fatal_error(String message, Object info) throws Exception {
        report_error("Error fatal: " + message, info);
        done_parsing();
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= SCRIPT EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolScript start_val = (SymbolScript)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // SCRIPT ::= SCRIPT_ELEMENTO SCRIPT 
            {
              SymbolScript RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolScriptElemento et1 = (SymbolScriptElemento)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolScript et2 = (SymbolScript)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolScript(et1, et2, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SCRIPT",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SCRIPT ::= MAIN 
            {
              SymbolScript RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolMain et = (SymbolMain)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolScript(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SCRIPT",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SCRIPT_ELEMENTO ::= KW_METHOD TIPO_RETORNO ID LPAREN PARAMS RPAREN LKEY BODY RKEY 
            {
              SymbolScriptElemento RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).xright;
		Object et1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xright;
		SymbolTipoRetorno et2 = (SymbolTipoRetorno)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		Location et3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location et3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		String et3 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location et4xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location et4xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		SymbolParams et4 = (SymbolParams)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location et5xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et5xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolBody et5 = (SymbolBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolScriptElemento(et2, et3, et4, et5, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SCRIPT_ELEMENTO",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SCRIPT_ELEMENTO ::= DECS 
            {
              SymbolScriptElemento RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolDecs et = (SymbolDecs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolScriptElemento(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SCRIPT_ELEMENTO",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SCRIPT_ELEMENTO ::= KW_TUPLE ID LKEY MIEMBROS_TUPLA RKEY 
            {
              SymbolScriptElemento RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object et1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String et2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location et3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolMiembrosTupla et3 = (SymbolMiembrosTupla)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolScriptElemento(et2, et3, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SCRIPT_ELEMENTO",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // TIPO_RETORNO ::= TIPO 
            {
              SymbolTipoRetorno RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolTipo et = (SymbolTipo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolTipoRetorno(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_RETORNO",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TIPO_RETORNO ::= KW_VOID 
            {
              SymbolTipoRetorno RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolTipoRetorno(etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_RETORNO",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MIEMBROS_TUPLA ::= DECS MIEMBROS_TUPLA 
            {
              SymbolMiembrosTupla RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolDecs et1 = (SymbolDecs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolMiembrosTupla et2 = (SymbolMiembrosTupla)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new SymbolMiembrosTupla(et1,et2, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MIEMBROS_TUPLA",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MIEMBROS_TUPLA ::= 
            {
              SymbolMiembrosTupla RESULT =null;
		  RESULT = new SymbolMiembrosTupla(((ComplexSymbol) cur_token).xleft, ((ComplexSymbol) cur_token).xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MIEMBROS_TUPLA",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MAIN ::= KW_METHOD KW_VOID KW_MAIN LPAREN KW_CHAR LBRACKET RBRACKET LBRACKET RBRACKET KW_ARGS RPAREN LKEY BODY RKEY 
            {
              SymbolMain RESULT =null;
		Location posxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).xleft;
		Location posxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).xright;
		Object pos = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		Location nombrexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).xleft;
		Location nombrexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).xright;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location argsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location argsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object args = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolBody et = (SymbolBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolMain(nombre, args, l, r, et, posxleft, posxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MAIN ::= MAIN SCRIPT_ELEMENTO 
            {
              SymbolMain RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolMain et1 = (SymbolMain)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolScriptElemento et2 = (SymbolScriptElemento)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolMain(et1,et2, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BODY ::= METODO_ELEMENTO BODY 
            {
              SymbolBody RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolMetodoElemento et1 = (SymbolMetodoElemento)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolBody et2 = (SymbolBody)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBody(et1, et2, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BODY",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BODY ::= 
            {
              SymbolBody RESULT =null;
		 RESULT = new SymbolBody(((ComplexSymbol) cur_token).xleft, ((ComplexSymbol) cur_token).xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BODY",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TIPO ::= TIPO_PRIMITIVO 
            {
              SymbolTipo RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolTipoPrimitivo t = (SymbolTipoPrimitivo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolTipo(t, txleft, txright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TIPO ::= TIPO_PRIMITIVO DIMENSIONES 
            {
              SymbolTipo RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolTipoPrimitivo t = (SymbolTipoPrimitivo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolDimensiones d = (SymbolDimensiones)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolTipo(t, d, txleft, txright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TIPO ::= TIPO_PRIMITIVO DIMENSIONES_VACIAS 
            {
              SymbolTipo RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolTipoPrimitivo t = (SymbolTipoPrimitivo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolDimensiones d = (SymbolDimensiones)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolTipo(t, d, txleft, txright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TIPO ::= KW_TUPLE ID 
            {
              SymbolTipo RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolTipo(i, txleft, txright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TIPO ::= KW_TUPLE ID DIMENSIONES 
            {
              SymbolTipo RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolDimensiones d = (SymbolDimensiones)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolTipo(i, d, txleft, txright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TIPO ::= KW_TUPLE ID DIMENSIONES_VACIAS 
            {
              SymbolTipo RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolDimensiones d = (SymbolDimensiones)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolTipo(i, d, txleft, txright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TIPO_PRIMITIVO ::= KW_BOOL 
            {
              SymbolTipoPrimitivo RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolTipoPrimitivo(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_PRIMITIVO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TIPO_PRIMITIVO ::= KW_INT 
            {
              SymbolTipoPrimitivo RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolTipoPrimitivo(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_PRIMITIVO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TIPO_PRIMITIVO ::= KW_DOUBLE 
            {
              SymbolTipoPrimitivo RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolTipoPrimitivo(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_PRIMITIVO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TIPO_PRIMITIVO ::= KW_CHAR 
            {
              SymbolTipoPrimitivo RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolTipoPrimitivo(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_PRIMITIVO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PARAMS ::= PARAMSLISTA 
            {
              SymbolParams RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolParamsLista et = (SymbolParamsLista)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolParams(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PARAMS ::= 
            {
              SymbolParams RESULT =null;
		 RESULT = new SymbolParams(((ComplexSymbol) cur_token).xleft, ((ComplexSymbol) cur_token).xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PARAMSLISTA ::= TIPO ID COMMA PARAMSLISTA 
            {
              SymbolParamsLista RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		SymbolTipo et1 = (SymbolTipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location sigxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sigxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolParamsLista sig = (SymbolParamsLista)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolParamsLista(et1, id, sig, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMSLISTA",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PARAMSLISTA ::= TIPO ID 
            {
              SymbolParamsLista RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolTipo et = (SymbolTipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolParamsLista(et, id, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMSLISTA",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECS ::= KW_CONST TIPO DEC_ASIG_LISTA ENDINSTR 
            {
              SymbolDecs RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object et1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolTipo et2 = (SymbolTipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location et3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolDecAsigLista et3 = (SymbolDecAsigLista)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolDecs(true,et2,et3, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECS ::= TIPO DEC_ASIG_LISTA ENDINSTR 
            {
              SymbolDecs RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolTipo et1 = (SymbolTipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolDecAsigLista et2 = (SymbolDecAsigLista)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolDecs(false, et1,et2, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DIMENSIONES ::= LBRACKET OPERAND RBRACKET DIMENSIONES 
            {
              SymbolDimensiones RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolOperand et1 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolDimensiones et2 = (SymbolDimensiones)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolDimensiones(et1, et2, l, r, lxleft, lxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DIMENSIONES",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DIMENSIONES ::= LBRACKET OPERAND RBRACKET 
            {
              SymbolDimensiones RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolOperand et1 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolDimensiones(et1, l, r, lxleft, lxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DIMENSIONES",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DIMENSIONES_VACIAS ::= LBRACKET RBRACKET DIMENSIONES_VACIAS 
            {
              SymbolDimensiones RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolDimensiones et2 = (SymbolDimensiones)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolDimensiones(null, et2, l, r, lxleft, lxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DIMENSIONES_VACIAS",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DIMENSIONES_VACIAS ::= LBRACKET RBRACKET 
            {
              SymbolDimensiones RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolDimensiones(null, l, r, lxleft, lxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DIMENSIONES_VACIAS",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DEC_ASIG_LISTA ::= ID ASIG_BASICO COMMA DEC_ASIG_LISTA 
            {
              SymbolDecAsigLista RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String et1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolAsigBasico et2 = (SymbolAsigBasico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location et3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location et3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolDecAsigLista et3 = (SymbolDecAsigLista)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolDecAsigLista(et1,et2,et3, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEC_ASIG_LISTA",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DEC_ASIG_LISTA ::= ID ASIG_BASICO 
            {
              SymbolDecAsigLista RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String et1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolAsigBasico et2 = (SymbolAsigBasico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolDecAsigLista(et1,et2, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEC_ASIG_LISTA",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ASIG_BASICO ::= AS_ASSIGN OPERAND 
            {
              SymbolAsigBasico RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolOperand et = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsigBasico(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG_BASICO",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ASIG_BASICO ::= 
            {
              SymbolAsigBasico RESULT =null;
		 RESULT = new SymbolAsigBasico(((ComplexSymbol) cur_token).xleft, ((ComplexSymbol) cur_token).xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG_BASICO",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // METODO_ELEMENTO ::= INSTR 
            {
              SymbolMetodoElemento RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolInstr et = (SymbolInstr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolMetodoElemento(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METODO_ELEMENTO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // METODO_ELEMENTO ::= LOOP 
            {
              SymbolMetodoElemento RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolLoop et = (SymbolLoop)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolMetodoElemento(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METODO_ELEMENTO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // METODO_ELEMENTO ::= IF 
            {
              SymbolMetodoElemento RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolIf et = (SymbolIf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolMetodoElemento(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METODO_ELEMENTO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // METODO_ELEMENTO ::= SWITCH 
            {
              SymbolMetodoElemento RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolSwitch et = (SymbolSwitch)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolMetodoElemento(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METODO_ELEMENTO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INSTR ::= FCALL ENDINSTR 
            {
              SymbolInstr RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolFCall et = (SymbolFCall)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolInstr(et,etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTR",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // INSTR ::= RETURN 
            {
              SymbolInstr RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolReturn et = (SymbolReturn)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolInstr(et,etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTR",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // INSTR ::= DECS 
            {
              SymbolInstr RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolDecs et = (SymbolDecs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolInstr(et,etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTR",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // INSTR ::= ASIGS ENDINSTR 
            {
              SymbolInstr RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolAsigs et = (SymbolAsigs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolInstr(et,etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTR",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // INSTR ::= SWAP 
            {
              SymbolInstr RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolSwap et = (SymbolSwap)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolInstr(et,etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTR",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // INSTR ::= KW_CONTINUE ENDINSTR 
            {
              SymbolInstr RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolInstr(true,etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTR",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // INSTR ::= KW_BREAK ENDINSTR 
            {
              SymbolInstr RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolInstr(false,etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTR",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FCALL ::= METODO_NOMBRE LPAREN OPERANDS_LISTA RPAREN 
            {
              SymbolFCall RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		SymbolMetodoNombre et1 = (SymbolMetodoNombre)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolOperandsLista et2 = (SymbolOperandsLista)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolFCall(et1, et2, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FCALL",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FCALL ::= METODO_NOMBRE LPAREN RPAREN 
            {
              SymbolFCall RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolMetodoNombre et1 = (SymbolMetodoNombre)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new SymbolFCall(et1, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FCALL",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // METODO_NOMBRE ::= ID 
            {
              SymbolMetodoNombre RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String et = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolMetodoNombre(null, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METODO_NOMBRE",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // METODO_NOMBRE ::= ENTER 
            {
              SymbolMetodoNombre RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolMetodoNombre(ParserSym.ENTER, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METODO_NOMBRE",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // METODO_NOMBRE ::= SHOW 
            {
              SymbolMetodoNombre RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolMetodoNombre(ParserSym.SHOW, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METODO_NOMBRE",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // METODO_NOMBRE ::= INTO 
            {
              SymbolMetodoNombre RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolMetodoNombre(ParserSym.INTO, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METODO_NOMBRE",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // METODO_NOMBRE ::= FROM 
            {
              SymbolMetodoNombre RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolMetodoNombre(ParserSym.FROM, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METODO_NOMBRE",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPERANDS_LISTA ::= OPERAND COMMA OPERANDS_LISTA 
            {
              SymbolOperandsLista RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolOperand et = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location olxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location olxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolOperandsLista ol = (SymbolOperandsLista)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOperandsLista(et, ol, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERANDS_LISTA",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPERANDS_LISTA ::= OPERAND 
            {
              SymbolOperandsLista RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolOperand et = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOperandsLista(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERANDS_LISTA",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // RETURN ::= KW_RETURN ENDINSTR 
            {
              SymbolReturn RESULT =null;
		Location posxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location posxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object pos = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolReturn(null, posxleft, posxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // RETURN ::= KW_RETURN OPERAND ENDINSTR 
            {
              SymbolReturn RESULT =null;
		Location posxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location posxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object pos = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolOperand et = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolReturn(et, posxleft, posxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SWAP ::= ID OP_SWAP ID ENDINSTR 
            {
              SymbolSwap RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String et1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String et2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolSwap(et1, et2, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWAP",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ASIGS ::= ASIG COMMA ASIGS 
            {
              SymbolAsigs RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolAsig et1 = (SymbolAsig)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolAsigs et2 = (SymbolAsigs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsigs(et1, et2, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGS",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ASIGS ::= ASIG 
            {
              SymbolAsigs RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolAsig et = (SymbolAsig)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsigs(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGS",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ASIG ::= ID ASIG_OP OPERAND 
            {
              SymbolAsig RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String et = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location aopxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location aopxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolAsigOp aop = (SymbolAsigOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolOperand val = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsig(et, aop, val, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ASIG ::= ID DIMENSIONES ASIG_OP OPERAND 
            {
              SymbolAsig RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String et1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location dimxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location dimxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolDimensiones dim = (SymbolDimensiones)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location aopxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location aopxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolAsigOp aop = (SymbolAsigOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolOperand val = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsig(et1, dim, aop, val, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ASIG ::= ID OP_MEMBER ID ASIG_OP OPERAND 
            {
              SymbolAsig RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String et1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String et2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location aopxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location aopxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolAsigOp aop = (SymbolAsigOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolOperand val = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsig(et1, et2, aop, val, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ASIG ::= ID OP_INC 
            {
              SymbolAsig RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String et1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsig(true, ParserSym.OP_INC, et1, et2, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ASIG ::= ID OP_DEC 
            {
              SymbolAsig RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String et1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsig(true, ParserSym.OP_DEC, et1, et2, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ASIG ::= OP_INC ID 
            {
              SymbolAsig RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object et1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String et2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsig(false, ParserSym.OP_INC, et2, et1, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ASIG ::= OP_DEC ID 
            {
              SymbolAsig RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object et1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String et2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsig(false, ParserSym.OP_DEC, et2, et1, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ASIG_OP ::= AS_ASSIGN 
            {
              SymbolAsigOp RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsigOp(ParserSym.AS_ASSIGN, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG_OP",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ASIG_OP ::= AS_ADDA 
            {
              SymbolAsigOp RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsigOp(ParserSym.AS_ADDA, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG_OP",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ASIG_OP ::= AS_SUBA 
            {
              SymbolAsigOp RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsigOp(ParserSym.AS_SUBA, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG_OP",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ASIG_OP ::= AS_MULA 
            {
              SymbolAsigOp RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsigOp(ParserSym.AS_MULA, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG_OP",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ASIG_OP ::= AS_DIVA 
            {
              SymbolAsigOp RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsigOp(ParserSym.AS_DIVA, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG_OP",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ASIG_OP ::= AS_POTA 
            {
              SymbolAsigOp RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsigOp(ParserSym.AS_POTA, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG_OP",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ASIG_OP ::= AS_MODA 
            {
              SymbolAsigOp RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsigOp(ParserSym.AS_MODA, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG_OP",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ASIG_OP ::= AS_ANDA 
            {
              SymbolAsigOp RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsigOp(ParserSym.AS_ANDA, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG_OP",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ASIG_OP ::= AS_ORA 
            {
              SymbolAsigOp RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAsigOp(ParserSym.AS_ORA, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG_OP",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPERAND ::= ATOMIC_EXPRESSION 
            {
              SymbolOperand RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolAtomicExpression et = (SymbolAtomicExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOperand(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPERAND ::= FCALL 
            {
              SymbolOperand RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolFCall et = (SymbolFCall)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOperand(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OPERAND ::= LPAREN OPERAND RPAREN 
            {
              SymbolOperand RESULT =null;
		Location posxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location posxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object pos = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolOperand et = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolOperand(et, posxleft, posxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OPERAND ::= UNARY_EXPRESSION 
            {
              SymbolOperand RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolUnaryExpression et = (SymbolUnaryExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOperand(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OPERAND ::= BINARY_EXPRESSION 
            {
              SymbolOperand RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolBinaryExpression et = (SymbolBinaryExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOperand(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OPERAND ::= CONDITIONAL_EXPRESSION 
            {
              SymbolOperand RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolConditionalExpression et = (SymbolConditionalExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOperand(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OPERAND ::= OPERAND LBRACKET OPERAND RBRACKET 
            {
              SymbolOperand RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		SymbolOperand et1 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolOperand et2 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOperand(et1, l, et2, r, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OPERAND ::= OPERAND OP_MEMBER ID 
            {
              SymbolOperand RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolOperand et1 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String et2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOperand(et1, et2, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OPERAND ::= LPAREN TIPO_PRIMITIVO RPAREN OPERAND 
            {
              SymbolOperand RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolTipoPrimitivo t = (SymbolTipoPrimitivo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object et2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolOperand op = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOperand(t, op, et, et2, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OPERAND ::= LPAREN KW_CHAR LBRACKET RBRACKET RPAREN OPERAND 
            {
              SymbolOperand RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object et2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolOperand op = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOperand(null, op, et, et2, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // UNARY_EXPRESSION ::= L_UNARY_OPERATOR OPERAND 
            {
              SymbolUnaryExpression RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolLUnaryOperator et1 = (SymbolLUnaryOperator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolOperand et2 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolUnaryExpression(et1, et2, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNARY_EXPRESSION",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // UNARY_EXPRESSION ::= OPERAND R_UNARY_OPERATOR 
            {
              SymbolUnaryExpression RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolOperand et1 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolRUnaryOperator et2 = (SymbolRUnaryOperator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolUnaryExpression(et1, et2, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNARY_EXPRESSION",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // L_UNARY_OPERATOR ::= OP_NOT 
            {
              SymbolLUnaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolLUnaryOperator(ParserSym.OP_NOT, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("L_UNARY_OPERATOR",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // L_UNARY_OPERATOR ::= OP_INC 
            {
              SymbolLUnaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolLUnaryOperator(ParserSym.OP_INC, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("L_UNARY_OPERATOR",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // L_UNARY_OPERATOR ::= OP_DEC 
            {
              SymbolLUnaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolLUnaryOperator(ParserSym.OP_DEC, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("L_UNARY_OPERATOR",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // L_UNARY_OPERATOR ::= OP_ADD 
            {
              SymbolLUnaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolLUnaryOperator(ParserSym.OP_ADD, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("L_UNARY_OPERATOR",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // L_UNARY_OPERATOR ::= OP_SUB 
            {
              SymbolLUnaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolLUnaryOperator(ParserSym.OP_SUB, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("L_UNARY_OPERATOR",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // R_UNARY_OPERATOR ::= OP_PCT 
            {
              SymbolRUnaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolRUnaryOperator(ParserSym.OP_PCT, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R_UNARY_OPERATOR",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // R_UNARY_OPERATOR ::= OP_INC 
            {
              SymbolRUnaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolRUnaryOperator(ParserSym.OP_INC, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R_UNARY_OPERATOR",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // R_UNARY_OPERATOR ::= OP_DEC 
            {
              SymbolRUnaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolRUnaryOperator(ParserSym.OP_DEC, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R_UNARY_OPERATOR",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // BINARY_EXPRESSION ::= OPERAND BINARY_OPERATOR OPERAND 
            {
              SymbolBinaryExpression RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolOperand et1 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolBinaryOperator et2 = (SymbolBinaryOperator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location et3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location et3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolOperand et3 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryExpression(et1, et2, et3, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_EXPRESSION",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CONDITIONAL_EXPRESSION ::= OPERAND OP_COND OPERAND ARROW OPERAND 
            {
              SymbolConditionalExpression RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		SymbolOperand et1 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolOperand et2 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location et3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location et3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolOperand et3 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolConditionalExpression(et1, et2, et3, et1xleft, et1xright);; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDITIONAL_EXPRESSION",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ATOMIC_EXPRESSION ::= ID 
            {
              SymbolAtomicExpression RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String et = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAtomicExpression(true, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATOMIC_EXPRESSION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ATOMIC_EXPRESSION ::= STRING 
            {
              SymbolAtomicExpression RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String et = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAtomicExpression(false, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATOMIC_EXPRESSION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ATOMIC_EXPRESSION ::= PROP 
            {
              SymbolAtomicExpression RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Boolean et = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAtomicExpression(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATOMIC_EXPRESSION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ATOMIC_EXPRESSION ::= ENT 
            {
              SymbolAtomicExpression RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer et = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAtomicExpression(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATOMIC_EXPRESSION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ATOMIC_EXPRESSION ::= REAL 
            {
              SymbolAtomicExpression RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Double et = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAtomicExpression(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATOMIC_EXPRESSION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ATOMIC_EXPRESSION ::= CAR 
            {
              SymbolAtomicExpression RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Character et = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolAtomicExpression(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATOMIC_EXPRESSION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // BINARY_OPERATOR ::= OP_ADD 
            {
              SymbolBinaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_ADD, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // BINARY_OPERATOR ::= OP_SUB 
            {
              SymbolBinaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_SUB, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // BINARY_OPERATOR ::= OP_MUL 
            {
              SymbolBinaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_MUL, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // BINARY_OPERATOR ::= OP_DIV 
            {
              SymbolBinaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_DIV, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // BINARY_OPERATOR ::= OP_MOD 
            {
              SymbolBinaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_MOD, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // BINARY_OPERATOR ::= OP_POT 
            {
              SymbolBinaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_POT, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // BINARY_OPERATOR ::= OP_EQ 
            {
              SymbolBinaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_EQ, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // BINARY_OPERATOR ::= OP_BEQ 
            {
              SymbolBinaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_BEQ, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // BINARY_OPERATOR ::= OP_BT 
            {
              SymbolBinaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_BT, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // BINARY_OPERATOR ::= OP_LEQ 
            {
              SymbolBinaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_LEQ, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // BINARY_OPERATOR ::= OP_LT 
            {
              SymbolBinaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_LT, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // BINARY_OPERATOR ::= OP_NEQ 
            {
              SymbolBinaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_NEQ, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // BINARY_OPERATOR ::= OP_AND 
            {
              SymbolBinaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_AND, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // BINARY_OPERATOR ::= OP_OR 
            {
              SymbolBinaryOperator RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolBinaryOperator(ParserSym.OP_OR, et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_OPERATOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // LOOP ::= KW_LOOP LOOP_COND LKEY BODY RKEY 
            {
              SymbolLoop RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object et1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		SymbolLoopCond et2 = (SymbolLoopCond)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location et3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolBody et3 = (SymbolBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolLoop(et2, et3, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOP",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // LOOP ::= KW_LOOP LKEY BODY RKEY LOOP_COND ENDINSTR 
            {
              SymbolLoop RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Object et1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		SymbolBody et2 = (SymbolBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location et3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolLoopCond et3 = (SymbolLoopCond)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolLoop(et2, et3, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOP",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // PAREN_LOOP_COND ::= LPAREN PAREN_LOOP_COND RPAREN 
            {
              SymbolLoopCond RESULT =null;
		Location lcxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location lcxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolLoopCond lc = (SymbolLoopCond)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = lc; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PAREN_LOOP_COND",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // PAREN_LOOP_COND ::= DECS OPERAND ENDINSTR ASIGS 
            {
              SymbolLoopCond RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		SymbolDecs et1 = (SymbolDecs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolOperand et2 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location et3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location et3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolAsigs et3 = (SymbolAsigs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolLoopCond(et1, et2, et3, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PAREN_LOOP_COND",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // LOOP_COND ::= OPERAND 
            {
              SymbolLoopCond RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolOperand et = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolLoopCond(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOP_COND",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // LOOP_COND ::= PAREN_LOOP_COND 
            {
              SymbolLoopCond RESULT =null;
		Location lcxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location lcxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolLoopCond lc = (SymbolLoopCond)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lc; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOP_COND",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // IF ::= KW_IF OPERAND LKEY BODY RKEY ELIFS ELSE 
            {
              SymbolIf RESULT =null;
		Location et0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location et0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		Object et0 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		SymbolOperand et1 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		SymbolBody et2 = (SymbolBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location et3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolElifs et3 = (SymbolElifs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location et4xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location et4xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolElse et4 = (SymbolElse)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolIf(et1, et2, et3, et4, et0xleft, et0xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ELIFS ::= ELIF ELIFS 
            {
              SymbolElifs RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolElif et1 = (SymbolElif)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolElifs et2 = (SymbolElifs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolElifs(et1, et2, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELIFS",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ELIFS ::= 
            {
              SymbolElifs RESULT =null;
		 RESULT = new SymbolElifs(((ComplexSymbol) cur_token).xleft, ((ComplexSymbol) cur_token).xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELIFS",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ELIF ::= KW_ELIF OPERAND LKEY BODY RKEY 
            {
              SymbolElif RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		SymbolOperand et1 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolBody et2 = (SymbolBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolElif(et1, et2, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELIF",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ELSE ::= KW_ELSE LKEY BODY RKEY 
            {
              SymbolElse RESULT =null;
		Location posxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location posxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object pos = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolBody et = (SymbolBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolElse(et, posxleft, posxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ELSE ::= 
            {
              SymbolElse RESULT =null;
		 RESULT = new SymbolElse(((ComplexSymbol) cur_token).xleft, ((ComplexSymbol) cur_token).xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // SWITCH ::= KW_SWITCH OPERAND RKEY CASO PRED LKEY 
            {
              SymbolSwitch RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		SymbolOperand et1 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolCaso et2 = (SymbolCaso)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location et3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location et3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolPred et3 = (SymbolPred)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolSwitch(et1, et2, et3, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCH",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // CASO ::= CASO KW_CASE OPERAND ARROW BODY 
            {
              SymbolCaso RESULT =null;
		Location et1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location et1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		SymbolCaso et1 = (SymbolCaso)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location et2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location et2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolOperand et2 = (SymbolOperand)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location et3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location et3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolBody et3 = (SymbolBody)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolCaso(et1, et2, et3, et1xleft, et1xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASO",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // CASO ::= 
            {
              SymbolCaso RESULT =null;
		 RESULT = new SymbolCaso(((ComplexSymbol) cur_token).xleft, ((ComplexSymbol) cur_token).xright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASO",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // PRED ::= KW_CASE KW_DEFAULT ARROW BODY 
            {
              SymbolPred RESULT =null;
		Location etxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location etxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolBody et = (SymbolBody)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolPred(et, etxleft, etxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRED",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
