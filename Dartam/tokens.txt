KW_TUPLE: tupla
ID: matriz3
ID: A
SYM_COMMA: ,
ID: B
SYM_COMMA: ,
ID: resultado
SYM_ENDINSTR: ;
KW_TUPLE: tupla
ID: matriz3
SYM_LKEY: {
KW_CONST: inmut
TYPE_INT: ent
ID: filas
OP_ASIG: :
VAL_DECIMAL: 3
SYM_COMMA: ,
ID: columnas
OP_ASIG: :
VAL_DECIMAL: 3
SYM_ENDINSTR: ;
TYPE_INT: ent
SYM_LBRACKET: [
VAL_DECIMAL: 3
SYM_RBRACKET: ]
SYM_LBRACKET: [
VAL_DECIMAL: 3
SYM_RBRACKET: ]
ID: datos
SYM_ENDINSTR: ;
SYM_RKEY: }
KW_METHOD: f
TYPE_VOID: vacio
KW_MAIN: inicio
SYM_LPAREN: (
TYPE_STRING: string
SYM_LBRACKET: [
SYM_RBRACKET: ]
KW_ARGS: argumentos
SYM_RPAREN: )
SYM_LKEY: {
ID: inicializarMatriz
SYM_LPAREN: (
ID: A
SYM_COMMA: ,
VAL_DECIMAL: 3
SYM_RPAREN: )
SYM_ENDINSTR: ;
ID: inicializarMatriz
SYM_LPAREN: (
ID: B
SYM_COMMA: ,
VAL_DECIMAL: 2
SYM_RPAREN: )
SYM_ENDINSTR: ;
ID: multiplicarMatrices
SYM_LPAREN: (
ID: A
SYM_COMMA: ,
ID: B
SYM_COMMA: ,
ID: resultado
SYM_RPAREN: )
SYM_ENDINSTR: ;
SYM_RKEY: }
KW_METHOD: f
TYPE_VOID: vacio
ID: inicializarMatriz
SYM_LPAREN: (
KW_TUPLE: tupla
ID: matriz3
ID: m
SYM_COMMA: ,
TYPE_INT: ent
ID: modo
SYM_RPAREN: )
SYM_LKEY: {
KW_WHILE: loop
TYPE_INT: ent
ID: i
OP_ASIG: :
VAL_DECIMAL: 0
SYM_ENDINSTR: ;
ID: i
OP_MENOR: <
ID: m
SYM_PUNTO: .
ID: filas
SYM_ENDINSTR: ;
ID: i
OP_INC: ++
SYM_ENDINSTR: ;
SYM_LKEY: {
TYPE_INT: ent
SYM_LBRACKET: [
ID: m
SYM_PUNTO: .
ID: filas
SYM_RBRACKET: ]
ID: aux
OP_ASIG: :
ID: m
SYM_PUNTO: .
ID: datos
SYM_LBRACKET: [
ID: i
SYM_RBRACKET: ]
SYM_ENDINSTR: ;
KW_WHILE: loop
TYPE_INT: ent
ID: j
OP_ASIG: :
VAL_DECIMAL: 0
SYM_ENDINSTR: ;
ID: j
OP_MENOR: <
ID: m
SYM_PUNTO: .
ID: columnas
SYM_ENDINSTR: ;
ID: j
OP_INC: ++
SYM_ENDINSTR: ;
SYM_LKEY: {
ID: aux
SYM_LBRACKET: [
ID: j
SYM_RBRACKET: ]
OP_ASIG: :
ID: i
OP_SUM: +
ID: j
OP_MOD: \
ID: c
SYM_ENDINSTR: ;
SYM_RKEY: }
SYM_RKEY: }
SYM_RKEY: }
KW_METHOD: f
TYPE_VOID: vacio
ID: multiplicarMatrices
SYM_LPAREN: (
KW_TUPLE: tupla
ID: matriz3
ID: A
SYM_COMMA: ,
KW_TUPLE: tupla
ID: matriz3
ID: B
SYM_COMMA: ,
KW_TUPLE: tupla
ID: matriz3
ID: resultado
SYM_RPAREN: )
SYM_LKEY: {
SYM_RKEY: }
