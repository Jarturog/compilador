KW_METHOD: f
TYPE_VOID: vacio
KW_MAIN: inicio
SYM_LPAREN: (
TYPE_STRING: string
SYM_LBRACKET: [
SYM_RBRACKET: ]
KW_ARGS: argumentos
SYM_RPAREN: )
SYM_LKEY: {
TYPE_INT: ent
ID: a
OP_ASIG: :
VAL_DECIMAL: 16
SYM_COMMA: ,
ID: b
OP_ASIG: :
VAL_DECIMAL: 20
SYM_ENDINSTR: ;
TYPE_INT: ent
ID: c
OP_ASIG: :
ID: mcd
SYM_LPAREN: (
ID: a
SYM_COMMA: ,
ID: b
SYM_RPAREN: )
SYM_ENDINSTR: ;
SYM_RKEY: }
KW_METHOD: f
TYPE_INT: ent
ID: mcd
SYM_LPAREN: (
TYPE_INT: ent
ID: a0
SYM_COMMA: ,
TYPE_INT: ent
ID: b0
SYM_RPAREN: )
SYM_LKEY: {
TYPE_INT: ent
ID: a
SYM_COMMA: ,
ID: b
SYM_ENDINSTR: ;
ID: a
OP_ASIG: :
ID: a0
SYM_ENDINSTR: ;
ID: b
OP_ASIG: :
ID: b0
SYM_ENDINSTR: ;
KW_WHILE: loop
SYM_LPAREN: (
ID: a
OP_DIFERENT: /=
ID: b
SYM_RPAREN: )
SYM_LKEY: {
KW_IF: si
SYM_LPAREN: (
ID: a
OP_MAYOR: >
ID: b
SYM_RPAREN: )
SYM_LKEY: {
ID: a
OP_RES_ASSIGNMENT: -:
ID: b
SYM_ENDINSTR: ;
SYM_RKEY: }
KW_ELSE: no
SYM_LKEY: {
ID: b
OP_RES_ASSIGNMENT: -:
ID: a
SYM_ENDINSTR: ;
SYM_RKEY: }
SYM_RKEY: }
KW_RETURN: pop
ID: a
SYM_ENDINSTR: ;
SYM_RKEY: }
