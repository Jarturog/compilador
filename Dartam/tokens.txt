KW_METHOD: f
TYPE_VOID: vacio
KW_MAIN: inicio
SYM_LPAREN: (
TYPE_STRING: string
SYM_LBRACKET: [
SYM_RBRACKET: ]
KW_ARGS: argumentos
SYM_RPAREN: )
SYM_LKEY: {
SYM_RKEY: }
KW_METHOD: f
TYPE_VOID: vacio
ID: dowhile
SYM_LPAREN: (
SYM_RPAREN: )
SYM_LKEY: {
KW_WHILE: loop
SYM_LKEY: {
KW_BREAK: parar
SYM_ENDINSTR: ;
KW_CONTINUE: continuar
SYM_ENDINSTR: ;
SYM_RKEY: }
VAL_PROP: cierto
SYM_ENDINSTR: ;
SYM_RKEY: }
KW_METHOD: f
TYPE_VOID: vacio
ID: while
SYM_LPAREN: (
SYM_RPAREN: )
SYM_LKEY: {
KW_WHILE: loop
VAL_PROP: cierto
SYM_LKEY: {
KW_BREAK: parar
SYM_ENDINSTR: ;
KW_CONTINUE: continuar
SYM_ENDINSTR: ;
SYM_RKEY: }
SYM_RKEY: }
KW_METHOD: f
TYPE_VOID: vacio
ID: dofor
SYM_LPAREN: (
SYM_RPAREN: )
SYM_LKEY: {
KW_WHILE: loop
SYM_LKEY: {
KW_BREAK: parar
SYM_ENDINSTR: ;
KW_CONTINUE: continuar
SYM_ENDINSTR: ;
SYM_RKEY: }
SYM_LPAREN: (
SYM_LPAREN: (
TYPE_INT: ent
ID: b
OP_ASIG: :
VAL_DECIMAL: 2
SYM_ENDINSTR: ;
SYM_LPAREN: (
VAL_PROP: cierto
SYM_RPAREN: )
SYM_ENDINSTR: ;
ID: b
OP_INC: ++
SYM_RPAREN: )
SYM_RPAREN: )
SYM_ENDINSTR: ;
SYM_RKEY: }
KW_METHOD: f
TYPE_VOID: vacio
ID: for
SYM_LPAREN: (
SYM_RPAREN: )
SYM_LKEY: {
KW_WHILE: loop
TYPE_INT: ent
ID: b
OP_ASIG: :
VAL_DECIMAL: 2
SYM_ENDINSTR: ;
VAL_PROP: cierto
SYM_ENDINSTR: ;
ID: b
OP_INC: ++
SYM_LKEY: {
KW_BREAK: parar
SYM_ENDINSTR: ;
KW_CONTINUE: continuar
SYM_ENDINSTR: ;
SYM_RKEY: }
SYM_RKEY: }
