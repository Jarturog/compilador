tupla matriz3 A, B, resultado; // Definir matrices

tupla matriz3 {
	inmut ent filas: 3, columnas: 3;
	ent [3][3] datos;
}

f vacio inicio(string[] argumentos) {

    // Inicializar matrices A y B
    inicializarMatriz(A, 3);
    inicializarMatriz(B, 2);
    
    // Multiplicar matrices A y B
    multiplicarMatrices(A, B, resultado);
    
    // Mostrar resultado
    //mostrarMatriz(resultado);
}

f vacio inicializarMatriz(tupla matriz3 m, ent modo) {
	loop ent i: 0; i < m.filas; i++; {
		ent [m.filas] aux: m.datos[i];
		loop ent j: 0; j < m.columnas; j++; {
			aux[j]: i+j\c;
		}
	}
}

f vacio multiplicarMatrices(tupla matriz3 A, tupla matriz3 B, tupla matriz3 resultado) {
    // Verificar si las matrices son multiplicables
    si A.columnas /= B.filas {
		
        pop;
    }

    // Inicializar la matriz resultado con ceros
    inicializarMatriz(resultado, 1);

    // Realizar la multiplicaciÃ³n de matrices
    loop ent i: 0; i < A.filas; i+:1; {
        loop ent j: 0; j < B.columnas; ++j; {
            loop ent k: 0; k < A.columnas; k: k + 1; {
				ent [A.columnas] auxC: resultado.datos[i];
				ent [A.columnas] auxA: A.datos[i];
				ent [B.columnas] auxB: B.datos[k];
                //auxC[j]: auxC[j] + auxA[k] * auxB[j];
            }
        }
    }
}

