0000102A Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 06/02/2024 3:49:12

00000000                             1  ; ==============================================================================
00000000                             2  ; TITLE       : calc3
00000000                             3  ; COMPILED BY : jartu
00000000                             4  ; COMPILER BY : Juan Arturo Abaurrea Calafell
00000000                             5  ;               Dani Salanova Dmitriyev
00000000                             6  ;               Marta González Juan
00000000                             7  ; ==============================================================================
00000000                             8  
00001000                             9              ORG         $1000       ; Origen
00001000                            10  
00001000= 00000010                  11  a           DC.L 16                 ; INT
00001004= 00000014                  12  b           DC.L 20                 ; INT
00001008= 00                        13  t_3         DC.B 0                  ; BOOLEAN
00001009= 00                        14              DC.B 0                  ; Los strings y chars acaban en 0
0000100A                            15              DS.W 0                  ; No pueden haber variables en zonas de memoria impar
0000100A= 00000001                  16  t_4         DC.L 1                  ; INT
0000100E                            17  t_2         DS.L 1                  ; INT
00001012                            18  t_5         DS.L 1                  ; INT
00001016                            19  c1          DS.L 1                  ; INT
0000101A                            20  b0          DS.L 1                  ; INT
0000101E                            21  a0          DS.L 1                  ; INT
00001022                            22  a_1         DS.L 1                  ; INT
00001026                            23  b_1         DS.L 1                  ; INT
0000102A                            24  CALC3                               ; Etiqueta inicial (main)
0000102A  4EB9 00001034             25              JSR         e_inicio    ; Se ejecuta el main
00001030  FFFF FFFF                 26              SIMHALT                 ; Fin de la ejecución
00001034                            27  
00001034                            28  ; --------- e_inicio: skip          
00001034                            29                                      
00001034                            30  ; --------- pmb e_inicio            
00001034                            31  ; --------- a = 16                  
00001034  7010                      32  e_inicio:   MOVE.L      #16, D0     ; D0 = #16
00001036  21C0 1000                 33              MOVE.L      D0, a       ; a = D0
0000103A                            34  ; --------- b = 20                  
0000103A  7014                      35              MOVE.L      #20, D0     ; D0 = #20
0000103C  21C0 1004                 36              MOVE.L      D0, b       ; b = D0
00001040                            37  ; --------- param_s a               
00001040  2F38 1000                 38              MOVE.L      a, -(SP)    ; PUSH INTO STACK a
00001044                            39  ; --------- param_s b               
00001044  2F38 1004                 40              MOVE.L      b, -(SP)    ; PUSH INTO STACK b
00001048                            41  ; --------- call e_mcd1, t_2        
00001048  598F                      42              SUBA.L      #4, SP      ; SP = SP + 4
0000104A  4EB9 00001060             43              JSR         e_mcd1      ; JUMP TO SUBROUTINE e_mcd1
00001050  21DF 100E                 44              MOVE.L      (SP)+, t_2  ; t_2 = POP FROM STACK
00001054  508F                      45              ADDA.L      #8, SP      ; SP = SP + 8
00001056                            46  ; --------- c1 = t_2                
00001056  2038 100E                 47              MOVE.L      t_2, D0     ; D0 = t_2
0000105A  21C0 1016                 48              MOVE.L      D0, c1      ; c1 = D0
0000105E                            49  ; --------- rtn e_inicio            
0000105E  4E75                      50              RTS                     ; RETURN TO SUBROUTINE e_inicio
00001060                            51  
00001060                            52  
00001060                            53  
00001060                            54  
00001060                            55  ; --------- e_mcd1: skip            
00001060                            56                                      
00001060                            57  ; --------- pmb e_mcd1              
00001060  21EF 0008 101A            58  e_mcd1:     MOVE.L      8(SP), b0   ; b0 = POP FROM STACK
00001066  206F 000C                 59              MOVE.L      12(SP), a0  ; a0 = POP FROM STACK
0000106A                            60  ; --------- a_1 = a0                
0000106A  2008                      61              MOVE.L      a0, D0      ; D0 = a0
0000106C  21C0 1022                 62              MOVE.L      D0, a_1     ; a_1 = D0
00001070                            63  ; --------- b_1 = b0                
00001070  2038 101A                 64              MOVE.L      b0, D0      ; D0 = b0
00001074  21C0 1026                 65              MOVE.L      D0, b_1     ; b_1 = D0
00001078                            66  ; --------- e: skip                 
00001078                            67                                      
00001078                            68  ; --------- if a_1 /= b_1 goto e_3  
00001078  2038 1022                 69  .e:         MOVE.L      a_1, D0     ; D0 = a_1
0000107C  B0B8 1026                 70              CMP.L       b_1, D0     ; UPDATE FLAGS WITH D0 - b_1
00001080  6600 0012                 71              BNE         .e_3        ; IF Z FLAG = 0 GOTO .e_3
00001084                            72  ; --------- t_3 = 0                 
00001084  4280                      73              CLR.L       D0          ; CLEAR D0
00001086  103C 0000                 74              MOVE.B      #0, D0      ; D0 = #0
0000108A  11C0 1008                 75              MOVE.B      D0, t_3     ; t_3 = D0
0000108E                            76  ; --------- goto e_4                
0000108E  4EF9 0000109E             77              JMP         .e_4        ; goto .e_4
00001094                            78  ; --------- e_3: skip               
00001094                            79                                      
00001094                            80  ; --------- t_3 = -1                
00001094  4280                      81  .e_3:       CLR.L       D0          ; CLEAR D0
00001096  103C 00FF                 82              MOVE.B      #-1, D0     ; D0 = #-1
0000109A  11C0 1008                 83              MOVE.B      D0, t_3     ; t_3 = D0
0000109E                            84  ; --------- e_4: skip               
0000109E                            85                                      
0000109E                            86  ; --------- if t_3 == 0 goto e_1    
0000109E  4280                      87  .e_4:       CLR.L       D0          ; CLEAR D0
000010A0  1038 1008                 88              MOVE.B      t_3, D0     ; D0 = t_3
000010A4  B03C 0000                 89              CMP.B       #0, D0      ; UPDATE FLAGS WITH D0 - #0
000010A8  6700 0022                 90              BEQ         .e_1        ; IF Z FLAG = 1 GOTO .e_1
000010AC                            91  ; --------- t_4 = 1                 
000010AC  7001                      92              MOVE.L      #1, D0      ; D0 = #1
000010AE  21C0 100A                 93              MOVE.L      D0, t_4     ; t_4 = D0
000010B2                            94  ; --------- t_5 = a_1 + t_4         
000010B2  2038 1022                 95              MOVE.L      a_1, D0     ; D0 = a_1
000010B6  2238 100A                 96              MOVE.L      t_4, D1     ; D1 = t_4
000010BA  D280                      97              ADD.L       D0, D1      ; D1 = D1 + D0
000010BC  21C1 1012                 98              MOVE.L      D1, t_5     ; t_5 = D1
000010C0                            99  ; --------- a_1 = t_5               
000010C0  2038 1012                100              MOVE.L      t_5, D0     ; D0 = t_5
000010C4  21C0 1022                101              MOVE.L      D0, a_1     ; a_1 = D0
000010C8                           102  ; --------- goto e                  
000010C8  4EF8 1078                103              JMP         .e          ; goto .e
000010CC                           104  ; --------- e_1: skip               
000010CC                           105                                      
000010CC                           106  ; --------- rtn e_mcd1, a_1         
000010CC  2F78 1022 0004           107  .e_1:       MOVE.L      a_1, 4(SP)  ; PUSH INTO STACK a_1
000010D2  4E75                     108              RTS                     ; RETURN TO SUBROUTINE e_mcd1
000010D4                           109  
000010D4                           110  
000010D4                           111              END CALC3               ; Fin del programa

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A                   1000
A0                  101E
A_1                 1022
B                   1004
B0                  101A
B_1                 1026
C1                  1016
CALC3               102A
E_INICIO            1034
E_MCD1              1060
E_MCD1:E            1078
E_MCD1:E_1          10CC
E_MCD1:E_3          1094
E_MCD1:E_4          109E
T_2                 100E
T_3                 1008
T_4                 100A
T_5                 1012
