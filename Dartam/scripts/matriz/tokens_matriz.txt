KW_TUPLE: tupla
ID: matriz3
ID: A
SYM_COMMA: ,
ID: B
SYM_COMMA: ,
ID: resultado
SYM_ENDINSTR: ;
KW_TUPLE: tupla
ID: matriz3
SYM_LKEY: {
KW_CONST: inmut
TYPE_INT: ent
ID: filas
OP_ASIG: :
VAL_DECIMAL: 3
SYM_COMMA: ,
ID: columnas
OP_ASIG: :
VAL_DECIMAL: 3
SYM_ENDINSTR: ;
TYPE_INT: ent
SYM_LBRACKET: [
VAL_DECIMAL: 3
SYM_RBRACKET: ]
SYM_LBRACKET: [
VAL_DECIMAL: 3
SYM_RBRACKET: ]
ID: datos
SYM_ENDINSTR: ;
SYM_RKEY: }
KW_METHOD: f
TYPE_VOID: vacio
KW_MAIN: inicio
SYM_LPAREN: (
TYPE_CHAR: car
SYM_LBRACKET: [
SYM_RBRACKET: ]
SYM_LBRACKET: [
SYM_RBRACKET: ]
KW_ARGS: argumentos
SYM_RPAREN: )
SYM_LKEY: {
KW_TUPLE: tupla
ID: matriz3
ID: A
SYM_ENDINSTR: ;
ID: inicializarMatriz
SYM_LPAREN: (
ID: A
SYM_COMMA: ,
VAL_DECIMAL: 3
SYM_RPAREN: )
SYM_ENDINSTR: ;
ID: inicializarMatriz
SYM_LPAREN: (
ID: B
SYM_COMMA: ,
VAL_DECIMAL: 2
SYM_RPAREN: )
SYM_ENDINSTR: ;
KW_TUPLE: tupla
ID: matriz3
ID: resultado
OP_ASIG: :
ID: multiplicarMatrices
SYM_LPAREN: (
ID: A
SYM_COMMA: ,
ID: B
SYM_RPAREN: )
SYM_ENDINSTR: ;
ID: mostrarMatriz
SYM_LPAREN: (
ID: resultado
SYM_RPAREN: )
SYM_ENDINSTR: ;
SYM_RKEY: }
KW_METHOD: f
TYPE_VOID: vacio
ID: inicializarMatriz
SYM_LPAREN: (
KW_TUPLE: tupla
ID: matriz3
ID: m
SYM_COMMA: ,
TYPE_INT: ent
ID: modo
SYM_RPAREN: )
SYM_LKEY: {
KW_CONST: inmut
TYPE_INT: ent
ID: c
OP_ASIG: :
ID: modo
SYM_ENDINSTR: ;
KW_WHILE: loop
TYPE_INT: ent
ID: i
OP_ASIG: :
VAL_DECIMAL: 0
SYM_ENDINSTR: ;
ID: i
OP_MENOR: <
ID: m
SYM_PUNTO: .
ID: filas
SYM_ENDINSTR: ;
ID: i
OP_INC: ++
SYM_LKEY: {
KW_WHILE: loop
TYPE_INT: ent
ID: j
OP_ASIG: :
VAL_DECIMAL: 0
SYM_ENDINSTR: ;
ID: j
OP_MENOR: <
ID: m
SYM_PUNTO: .
ID: columnas
SYM_ENDINSTR: ;
ID: j
OP_INC: ++
SYM_LKEY: {
TYPE_INT: ent
SYM_LBRACKET: [
SYM_RBRACKET: ]
SYM_LBRACKET: [
SYM_RBRACKET: ]
ID: aux
OP_ASIG: :
ID: m
SYM_PUNTO: .
ID: datos
SYM_ENDINSTR: ;
ID: aux
SYM_LBRACKET: [
ID: i
SYM_RBRACKET: ]
SYM_LBRACKET: [
ID: j
SYM_RBRACKET: ]
OP_ASIG: :
SYM_LPAREN: (
ID: i
OP_SUM: +
ID: j
SYM_RPAREN: )
OP_MOD: \
ID: c
SYM_ENDINSTR: ;
SYM_RKEY: }
SYM_RKEY: }
SYM_RKEY: }
KW_METHOD: f
KW_TUPLE: tupla
ID: matriz3
ID: multiplicarMatrices
SYM_LPAREN: (
KW_TUPLE: tupla
ID: matriz3
ID: A
SYM_COMMA: ,
KW_TUPLE: tupla
ID: matriz3
ID: B
SYM_RPAREN: )
SYM_LKEY: {
KW_TUPLE: tupla
ID: matriz3
ID: C
SYM_ENDINSTR: ;
KW_IF: si
OP_NEG: Â¬
SYM_LPAREN: (
ID: A
SYM_PUNTO: .
ID: columnas
OP_EQ: =
ID: B
SYM_PUNTO: .
ID: filas
SYM_RPAREN: )
SYM_LKEY: {
SHOW: show
SYM_LPAREN: (
VAL_CADENA: "No se pueden multiplicar estas matrices."
SYM_RPAREN: )
SYM_ENDINSTR: ;
KW_RETURN: pop
ID: C
SYM_ENDINSTR: ;
SYM_RKEY: }
ID: inicializarMatriz
SYM_LPAREN: (
ID: C
SYM_COMMA: ,
VAL_DECIMAL: 0
SYM_RPAREN: )
SYM_ENDINSTR: ;
KW_WHILE: loop
SYM_LPAREN: (
TYPE_INT: ent
ID: i
OP_ASIG: :
VAL_DECIMAL: 0
SYM_ENDINSTR: ;
ID: i
OP_MENOR: <
ID: A
SYM_PUNTO: .
ID: filas
SYM_ENDINSTR: ;
ID: i
OP_INC: ++
SYM_RPAREN: )
SYM_LKEY: {
KW_WHILE: loop
SYM_LPAREN: (
SYM_LPAREN: (
TYPE_INT: ent
ID: j
OP_ASIG: :
VAL_DECIMAL: 0
SYM_ENDINSTR: ;
ID: j
OP_MENOR: <
ID: B
SYM_PUNTO: .
ID: columnas
SYM_ENDINSTR: ;
ID: j
OP_INC: ++
SYM_RPAREN: )
SYM_RPAREN: )
SYM_LKEY: {
KW_WHILE: loop
SYM_LPAREN: (
TYPE_INT: ent
ID: k
OP_ASIG: :
VAL_DECIMAL: 0
SYM_ENDINSTR: ;
SYM_LPAREN: (
ID: k
OP_MENOR: <
ID: A
SYM_PUNTO: .
ID: columnas
SYM_RPAREN: )
SYM_ENDINSTR: ;
ID: k
OP_INC: ++
SYM_RPAREN: )
SYM_LKEY: {
TYPE_INT: ent
SYM_LBRACKET: [
SYM_RBRACKET: ]
SYM_LBRACKET: [
SYM_RBRACKET: ]
ID: auxA
OP_ASIG: :
ID: A
SYM_PUNTO: .
ID: datos
SYM_ENDINSTR: ;
TYPE_INT: ent
SYM_LBRACKET: [
SYM_RBRACKET: ]
SYM_LBRACKET: [
SYM_RBRACKET: ]
ID: auxB
OP_ASIG: :
ID: B
SYM_PUNTO: .
ID: datos
SYM_ENDINSTR: ;
TYPE_INT: ent
SYM_LBRACKET: [
SYM_RBRACKET: ]
SYM_LBRACKET: [
SYM_RBRACKET: ]
ID: auxC
OP_ASIG: :
ID: C
SYM_PUNTO: .
ID: datos
SYM_ENDINSTR: ;
ID: auxC
SYM_LBRACKET: [
ID: i
SYM_RBRACKET: ]
SYM_LBRACKET: [
ID: j
SYM_RBRACKET: ]
OP_ASIG: :
ID: auxC
SYM_LBRACKET: [
ID: i
SYM_RBRACKET: ]
SYM_LBRACKET: [
ID: j
SYM_RBRACKET: ]
OP_SUM: +
ID: auxA
SYM_LBRACKET: [
ID: i
SYM_RBRACKET: ]
SYM_LBRACKET: [
ID: k
SYM_RBRACKET: ]
OP_MUL: *
ID: auxB
SYM_LBRACKET: [
ID: k
SYM_RBRACKET: ]
SYM_LBRACKET: [
ID: j
SYM_RBRACKET: ]
SYM_ENDINSTR: ;
SYM_RKEY: }
SYM_RKEY: }
SYM_RKEY: }
KW_RETURN: pop
ID: C
SYM_ENDINSTR: ;
SYM_RKEY: }
KW_METHOD: f
TYPE_VOID: vacio
ID: mostrarMatriz
SYM_LPAREN: (
KW_TUPLE: tupla
ID: matriz3
ID: m
SYM_RPAREN: )
SYM_LKEY: {
KW_WHILE: loop
TYPE_INT: ent
ID: i
OP_ASIG: :
VAL_DECIMAL: 0
SYM_ENDINSTR: ;
ID: i
OP_MENOR: <
ID: m
SYM_PUNTO: .
ID: filas
SYM_ENDINSTR: ;
ID: i
OP_INC: ++
SYM_LKEY: {
KW_WHILE: loop
TYPE_INT: ent
ID: j
OP_ASIG: :
VAL_DECIMAL: 0
SYM_ENDINSTR: ;
ID: j
OP_MENOR: <
ID: m
SYM_PUNTO: .
ID: columnas
SYM_ENDINSTR: ;
ID: j
OP_INC: ++
SYM_LKEY: {
TYPE_INT: ent
SYM_LBRACKET: [
SYM_RBRACKET: ]
SYM_LBRACKET: [
SYM_RBRACKET: ]
ID: aux
OP_ASIG: :
ID: m
SYM_PUNTO: .
ID: datos
SYM_ENDINSTR: ;
SHOW: show
SYM_LPAREN: (
SYM_LPAREN: (
TYPE_CHAR: car
SYM_RPAREN: )
ID: aux
SYM_LBRACKET: [
ID: i
SYM_RBRACKET: ]
SYM_LBRACKET: [
ID: j
SYM_RBRACKET: ]
OP_SUM: +
VAL_CADENA: " "
SYM_RPAREN: )
SYM_ENDINSTR: ;
SYM_RKEY: }
SHOW: show
SYM_LPAREN: (
VAL_CADENA: "\n"
SYM_RPAREN: )
SYM_ENDINSTR: ;
SYM_RKEY: }
SYM_RKEY: }
