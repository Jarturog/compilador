00001054 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 06/02/2024 23:35:16

00000000                             1  ; ==============================================================================
00000000                             2  ; TITLE       : persona
00000000                             3  ; COMPILED BY : jartu
00000000                             4  ; COMPILER BY : Juan Arturo Abaurrea Calafell
00000000                             5  ;               Dani Salanova Dmitriyev
00000000                             6  ;               Marta González Juan
00000000                             7  ; ==============================================================================
00000000                             8  
00001000                             9              ORG         $1000       ; Origen
00001000                            10  
00001000                            11  persona:    DS.L 1                  ; Inicializando el miembro id de la tupla persona
00001004                            12              DS.L 1                  ; Inicializando el miembro let de la tupla persona
00001008= 68 6F 6C 61               13  t           DC.B 'hola'             ; STRING
0000100C= 00                        14              DC.B 0                  ; Los strings y chars acaban en 0
0000100E                            15              DS.W 0                  ; No pueden haber variables en zonas de memoria impar
0000100E= 6D 75 6E 64 6F            16  t_1         DC.B 'mundo'            ; STRING
00001013= 00                        17              DC.B 0                  ; Los strings y chars acaban en 0
00001014                            18              DS.W 0                  ; No pueden haber variables en zonas de memoria impar
00001014= 00000000                  19  t_2         DC.L 0                  ; INT
00001018= 00000004                  20  t_3         DC.L 4                  ; INT
0000101C                            21  p           DS.L 1                  ; POINTER TO ARRAY, TUPLE OR STRING
00001020                            22  aux         DS.L 1                  ; POINTER TO ARRAY, TUPLE OR STRING
00001024                            23  idpersona   DS.L 1                  ; INT
00001028                            24  let         DS.L 1                  ; CHAR
0000102C                            25  
0000102C                            26  ; --------- SUBROUTINES             
0000102C  226F 0004                 27  e_show      MOVEA.L     4(SP), A1   ; A1 = POP FROM STACK
00001030  700D                      28              MOVE.L      #13, D0     ; Task 13 of TRAP 15: Display the NULL terminated string pointed to by (A1) with CR, LF
00001032  4E4F                      29              TRAP        #15         ; Interruption generated
00001034  4E75                      30              RTS                     ; RETURN TO SUBROUTINE ...
00001036  41F8 1000                 31  initpersona LEA.L       persona, A0 ; load persona into A0
0000103A  226F 0004                 32              MOVEA.L     4(SP), A1   ; load instance into A1
0000103E  7002                      33              MOVE.L      #2, D0      
00001040  B0BC 00000000             34  nextlongwordpersona CMP.L       #0, D0 
00001046  6700 000A                 35              BEQ         endinitpersona 
0000104A  22D8                      36              MOVE.L      (A0)+, (A1)+ ; copy 4 bytes
0000104C  5380                      37              SUB.L       #1, D0      
0000104E  4EF8 1040                 38              JMP         nextlongwordpersona 
00001052                            39  endinitpersona                      ; end of loop
00001052  4E75                      40              RTS                     
00001054                            41  
00001054                            42  
00001054                            43  ; --------- INITIALIZATION          
00001054                            44  persona0                            ; Etiqueta inicial (main)
00001054                            45  
00001054  7020                      46              MOVE.L      #32, D0     ; Task 32 of TRAP 15: Hardware/Simulator
00001056  123C 0005                 47              MOVE.B      #5, D1      ; Enable exception processing (for input/output)
0000105A  4E4F                      48              TRAP        #15         ; Interruption generated
0000105C  4EB9 00001066             49              JSR         e_inicio    ; Se ejecuta el main
00001062  FFFF FFFF                 50              SIMHALT                 ; Fin de la ejecución
00001066                            51  
00001066                            52  ; --------- e_inicio: skip          
00001066                            53                                      
00001066                            54  ; --------- pmb e_inicio            
00001066                            55  ; --------- t = hola                
00001066                            56  ; --------- aux = t                 
00001066  41F8 1008                 57  e_inicio:   LEA.L       t, A0       ; A0 = t
0000106A  21C8 1020                 58              MOVE.L      A0, aux     ; aux = A0
0000106E                            59  ; --------- param_s aux             
0000106E  2038 1020                 60              MOVE.L      aux, D0     ; D0 = aux
00001072  2F00                      61              MOVE.L      D0, -(SP)   ; PUSH INTO STACK D0
00001074                            62  ; --------- call e_show             
00001074  4EB8 102C                 63              JSR         e_show      ; JUMP TO SUBROUTINE e_show
00001078  588F                      64              ADDA.L      #4, SP      ; SP = SP + 4
0000107A                            65  ; --------- t_1 = mundo             
0000107A                            66  ; --------- param_s t_1             
0000107A  41F8 100E                 67              LEA.L       t_1, A0     ; A0 = t_1
0000107E  2F08                      68              MOVE.L      A0, -(SP)   ; PUSH INTO STACK A0
00001080                            69  ; --------- call e_show             
00001080  4EB8 102C                 70              JSR         e_show      ; JUMP TO SUBROUTINE e_show
00001084  588F                      71              ADDA.L      #4, SP      ; SP = SP + 4
00001086                            72  ; --------- rtn e_inicio            
00001086  4E75                      73              RTS                     ; RETURN TO SUBROUTINE e_inicio
00001088                            74  
00001088                            75  
00001088                            76  
00001088                            77  
00001088                            78  ; --------- e_nuevapersona: skip    
00001088                            79                                      
00001088                            80  ; --------- pmb e_nuevapersona      
00001088  202F 0004                 81  e_nuevapersona: MOVE.L      4(SP), D0 ; D0 = POP FROM STACK
0000108C  21C0 1028                 82              MOVE.L      D0, let     ; let = D0
00001090  202F 0008                 83              MOVE.L      8(SP), D0   ; D0 = POP FROM STACK
00001094  21C0 1024                 84              MOVE.L      D0, idpersona ; idpersona = D0
00001098  202F 000C                 85              MOVE.L      12(SP), D0  ; D0 = POP FROM STACK
0000109C  21C0 101C                 86              MOVE.L      D0, p       ; p = D0
000010A0                            87  ; --------- t_2 = 0                 
000010A0  7000                      88              MOVE.L      #0, D0      ; D0 = #0
000010A2  21C0 1014                 89              MOVE.L      D0, t_2     ; t_2 = D0
000010A6                            90  ; --------- p[t_2] = idpersona      
000010A6  2038 1024                 91              MOVE.L      idpersona, D0 ; D0 = idpersona
000010AA  2238 1014                 92              MOVE.L      t_2, D1     ; D1 = t_2
000010AE  2078 101C                 93              MOVEA.L     p, A0       ; A0 = p
000010B2  D1C1                      94              ADDA.L      D1, A0      ; A0 = A0 + D1
000010B4  2080                      95              MOVE.L      D0, (A0)    ; (A0) = D0
000010B6                            96  ; --------- t_3 = 4                 
000010B6  7004                      97              MOVE.L      #4, D0      ; D0 = #4
000010B8  21C0 1018                 98              MOVE.L      D0, t_3     ; t_3 = D0
000010BC                            99  ; --------- p[t_3] = let            
000010BC  2038 1028                100              MOVE.L      let, D0     ; D0 = let
000010C0  2238 1018                101              MOVE.L      t_3, D1     ; D1 = t_3
000010C4  2078 101C                102              MOVEA.L     p, A0       ; A0 = p
000010C8  D1C1                     103              ADDA.L      D1, A0      ; A0 = A0 + D1
000010CA  2080                     104              MOVE.L      D0, (A0)    ; (A0) = D0
000010CC                           105  ; --------- rtn e_nuevapersona      
000010CC  4E75                     106              RTS                     ; RETURN TO SUBROUTINE e_nuevapersona
000010CE                           107  
000010CE                           108  
000010CE                           109              END persona0            ; Fin del programa

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
AUX                 1020
ENDINITPERSONA      1052
E_INICIO            1066
E_NUEVAPERSONA      1088
E_SHOW              102C
IDPERSONA           1024
INITPERSONA         1036
LET                 1028
NEXTLONGWORDPERSONA  1040
P                   101C
PERSONA             1000
PERSONA0            1054
T                   1008
T_1                 100E
T_2                 1014
T_3                 1018
