KW_METHOD: f
TYPE_VOID: vacio
KW_MAIN: inicio
SYM_LPAREN: (
TYPE_CHAR: car
SYM_LBRACKET: [
SYM_RBRACKET: ]
SYM_LBRACKET: [
SYM_RBRACKET: ]
KW_ARGS: argumentos
SYM_RPAREN: )
SYM_LKEY: {
TYPE_INT: ent
SYM_LBRACKET: [
VAL_DECIMAL: 4
SYM_RBRACKET: ]
ID: v
SYM_ENDINSTR: ;
ID: v
SYM_LBRACKET: [
VAL_DECIMAL: 0
SYM_RBRACKET: ]
OP_ASIG: :
VAL_DECIMAL: 1
SYM_ENDINSTR: ;
ID: v
SYM_LBRACKET: [
VAL_DECIMAL: 1
SYM_RBRACKET: ]
OP_ASIG: :
VAL_DECIMAL: 2
SYM_ENDINSTR: ;
ID: v
SYM_LBRACKET: [
VAL_DECIMAL: 2
SYM_RBRACKET: ]
OP_ASIG: :
VAL_DECIMAL: 3
SYM_ENDINSTR: ;
ID: v
SYM_LBRACKET: [
VAL_DECIMAL: 3
SYM_RBRACKET: ]
OP_ASIG: :
VAL_DECIMAL: 4
SYM_ENDINSTR: ;
ID: invertir
SYM_LPAREN: (
ID: v
SYM_RPAREN: )
SYM_ENDINSTR: ;
SYM_RKEY: }
KW_METHOD: f
TYPE_VOID: vacio
ID: invertir
SYM_LPAREN: (
TYPE_INT: ent
SYM_LBRACKET: [
SYM_RBRACKET: ]
ID: v
SYM_RPAREN: )
SYM_LKEY: {
TYPE_INT: ent
ID: i
SYM_ENDINSTR: ;
TYPE_INT: ent
ID: j
SYM_ENDINSTR: ;
TYPE_INT: ent
ID: aux
SYM_ENDINSTR: ;
ID: i
OP_ASIG: :
VAL_DECIMAL: 0
SYM_ENDINSTR: ;
ID: j
OP_ASIG: :
VAL_DECIMAL: 3
SYM_ENDINSTR: ;
KW_WHILE: loop
ID: i
OP_MENOR: <
ID: j
SYM_LKEY: {
ID: aux
OP_ASIG: :
ID: v
SYM_LBRACKET: [
ID: i
SYM_RBRACKET: ]
SYM_ENDINSTR: ;
ID: v
SYM_LBRACKET: [
ID: i
SYM_RBRACKET: ]
OP_ASIG: :
ID: v
SYM_LBRACKET: [
ID: j
SYM_RBRACKET: ]
SYM_ENDINSTR: ;
ID: v
SYM_LBRACKET: [
ID: j
SYM_RBRACKET: ]
OP_ASIG: :
ID: aux
SYM_ENDINSTR: ;
ID: i
OP_ASIG: :
ID: i
OP_SUM: +
VAL_DECIMAL: 1
SYM_ENDINSTR: ;
ID: j
OP_ASIG: :
ID: j
OP_RES: -
VAL_DECIMAL: 1
SYM_ENDINSTR: ;
SYM_RKEY: }
SYM_RKEY: }
