0000108A Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 06/02/2024 5:16:58

00000000                             1  ; ==============================================================================
00000000                             2  ; TITLE       : mcd
00000000                             3  ; COMPILED BY : jartu
00000000                             4  ; COMPILER BY : Juan Arturo Abaurrea Calafell
00000000                             5  ;               Dani Salanova Dmitriyev
00000000                             6  ;               Marta González Juan
00000000                             7  ; ==============================================================================
00000000                             8  
00001000                             9              ORG         $1000       ; Origen
00001000                            10  
00001000= 00000010                  11  t           DC.L 16                 ; INT
00001004= 00000014                  12  t_1         DC.L 20                 ; INT
00001008= 00                        13  t_5         DC.B 0                  ; BOOLEAN
00001009= 00                        14              DC.B 0                  ; Los strings y chars acaban en 0
0000100A                            15              DS.W 0                  ; No pueden haber variables en zonas de memoria impar
0000100A= 00                        16  t_6         DC.B 0                  ; BOOLEAN
0000100B= 00                        17              DC.B 0                  ; Los strings y chars acaban en 0
0000100C                            18              DS.W 0                  ; No pueden haber variables en zonas de memoria impar
0000100C= 00                        19  t_9         DC.B 0                  ; BOOLEAN
0000100D= 00                        20              DC.B 0                  ; Los strings y chars acaban en 0
0000100E                            21              DS.W 0                  ; No pueden haber variables en zonas de memoria impar
0000100E= 00                        22  t_13        DC.B 0                  ; BOOLEAN
0000100F= 00                        23              DC.B 0                  ; Los strings y chars acaban en 0
00001010                            24              DS.W 0                  ; No pueden haber variables en zonas de memoria impar
00001010= 00000000                  25  t_14        DC.L 0                  ; INT
00001014= 00000000                  26  t_16        DC.L 0                  ; INT
00001018= 00                        27  t_17        DC.B 0                  ; BOOLEAN
00001019= 00                        28              DC.B 0                  ; Los strings y chars acaban en 0
0000101A                            29              DS.W 0                  ; No pueden haber variables en zonas de memoria impar
0000101A                            30  num1_1      DS.L 1                  ; INT
0000101E                            31  num2_1      DS.L 1                  ; INT
00001022                            32  b0          DS.L 1                  ; INT
00001026                            33  a_1         DS.L 1                  ; INT
0000102A                            34  b_2         DS.L 1                  ; INT
0000102E                            35  a_3         DS.L 1                  ; INT
00001032                            36  b_1         DS.L 1                  ; INT
00001036                            37  a_2         DS.L 1                  ; INT
0000103A                            38  b_3         DS.L 1                  ; INT
0000103E                            39  num1        DS.L 1                  ; INT
00001042                            40  num2        DS.L 1                  ; INT
00001046                            41  a           DS.L 1                  ; INT
0000104A                            42  b           DS.L 1                  ; INT
0000104E                            43  resultado   DS.L 1                  ; INT
00001052                            44  t_2         DS.L 1                  ; INT
00001056                            45  t_4         DS.L 1                  ; INT
0000105A                            46  t_3         DS.L 1                  ; INT
0000105E                            47  t_8         DS.L 1                  ; INT
00001062                            48  t_7         DS.L 1                  ; INT
00001066                            49  c1          DS.L 1                  ; INT
0000106A                            50  a0          DS.L 1                  ; INT
0000106E                            51  c2          DS.L 1                  ; INT
00001072                            52  c3          DS.L 1                  ; INT
00001076                            53  resultado_1 DS.L 1                  ; INT
0000107A                            54  t_15        DS.L 1                  ; INT
0000107E                            55  t_12        DS.L 1                  ; INT
00001082                            56  t_10        DS.L 1                  ; INT
00001086                            57  t_11        DS.L 1                  ; INT
0000108A                            58  MCD                                 ; Etiqueta inicial (main)
0000108A  4EB9 00001094             59              JSR         e_inicio    ; Se ejecuta el main
00001090  FFFF FFFF                 60              SIMHALT                 ; Fin de la ejecución
00001094                            61  
00001094                            62  ; --------- e_inicio: skip          
00001094                            63                                      
00001094                            64  ; --------- pmb e_inicio            
00001094                            65  ; --------- t = 16                  
00001094  7010                      66  e_inicio:   MOVE.L      #16, D0     ; D0 = #16
00001096  21C0 1000                 67              MOVE.L      D0, t       ; t = D0
0000109A                            68  ; --------- a = t                   
0000109A  2038 1000                 69              MOVE.L      t, D0       ; D0 = t
0000109E  21C0 1046                 70              MOVE.L      D0, a       ; a = D0
000010A2                            71  ; --------- t_1 = 20                
000010A2  7014                      72              MOVE.L      #20, D0     ; D0 = #20
000010A4  21C0 1004                 73              MOVE.L      D0, t_1     ; t_1 = D0
000010A8                            74  ; --------- b = t_1                 
000010A8  2038 1004                 75              MOVE.L      t_1, D0     ; D0 = t_1
000010AC  21C0 104A                 76              MOVE.L      D0, b       ; b = D0
000010B0                            77  ; --------- param_s a               
000010B0  2F38 1046                 78              MOVE.L      a, -(SP)    ; PUSH INTO STACK a
000010B4                            79  ; --------- param_s b               
000010B4  2F38 104A                 80              MOVE.L      b, -(SP)    ; PUSH INTO STACK b
000010B8                            81  ; --------- call e_mcd1, t_2        
000010B8  598F                      82              SUBA.L      #4, SP      ; SP = SP + 4
000010BA  4EB9 0000110C             83              JSR         e_mcd1      ; JUMP TO SUBROUTINE e_mcd1
000010C0  21DF 1052                 84              MOVE.L      (SP)+, t_2  ; t_2 = POP FROM STACK
000010C4  508F                      85              ADDA.L      #8, SP      ; SP = SP + 8
000010C6                            86  ; --------- c1 = t_2                
000010C6  2038 1052                 87              MOVE.L      t_2, D0     ; D0 = t_2
000010CA  21C0 1066                 88              MOVE.L      D0, c1      ; c1 = D0
000010CE                            89  ; --------- param_s a               
000010CE  2F38 1046                 90              MOVE.L      a, -(SP)    ; PUSH INTO STACK a
000010D2                            91  ; --------- param_s b               
000010D2  2F38 104A                 92              MOVE.L      b, -(SP)    ; PUSH INTO STACK b
000010D6                            93  ; --------- call e_mcd2, t_3        
000010D6  598F                      94              SUBA.L      #4, SP      ; SP = SP + 4
000010D8  4EB9 0000128C             95              JSR         e_mcd2      ; JUMP TO SUBROUTINE e_mcd2
000010DE  21DF 105A                 96              MOVE.L      (SP)+, t_3  ; t_3 = POP FROM STACK
000010E2  508F                      97              ADDA.L      #8, SP      ; SP = SP + 8
000010E4                            98  ; --------- c2 = t_3                
000010E4  2038 105A                 99              MOVE.L      t_3, D0     ; D0 = t_3
000010E8  21C0 106E                100              MOVE.L      D0, c2      ; c2 = D0
000010EC                           101  ; --------- param_s a               
000010EC  2F38 1046                102              MOVE.L      a, -(SP)    ; PUSH INTO STACK a
000010F0                           103  ; --------- param_s b               
000010F0  2F38 104A                104              MOVE.L      b, -(SP)    ; PUSH INTO STACK b
000010F4                           105  ; --------- call e_mcm, t_4         
000010F4  598F                     106              SUBA.L      #4, SP      ; SP = SP + 4
000010F6  4EB9 000011CA            107              JSR         e_mcm       ; JUMP TO SUBROUTINE e_mcm
000010FC  21DF 1056                108              MOVE.L      (SP)+, t_4  ; t_4 = POP FROM STACK
00001100  508F                     109              ADDA.L      #8, SP      ; SP = SP + 8
00001102                           110  ; --------- c3 = t_4                
00001102  2038 1056                111              MOVE.L      t_4, D0     ; D0 = t_4
00001106  21C0 1072                112              MOVE.L      D0, c3      ; c3 = D0
0000110A                           113  ; --------- rtn e_inicio            
0000110A  4E75                     114              RTS                     ; RETURN TO SUBROUTINE e_inicio
0000110C                           115  
0000110C                           116  
0000110C                           117  
0000110C                           118  
0000110C                           119  ; --------- e_mcd1: skip            
0000110C                           120                                      
0000110C                           121  ; --------- pmb e_mcd1              
0000110C  21EF 0008 1022           122  e_mcd1:     MOVE.L      8(SP), b0   ; b0 = POP FROM STACK
00001112  206F 000C                123              MOVE.L      12(SP), a0  ; a0 = POP FROM STACK
00001116                           124  ; --------- a_1 = a0                
00001116  2008                     125              MOVE.L      a0, D0      ; D0 = a0
00001118  21C0 1026                126              MOVE.L      D0, a_1     ; a_1 = D0
0000111C                           127  ; --------- b_1 = b0                
0000111C  2038 1022                128              MOVE.L      b0, D0      ; D0 = b0
00001120  21C0 1032                129              MOVE.L      D0, b_1     ; b_1 = D0
00001124                           130  ; --------- e: skip                 
00001124                           131                                      
00001124                           132  ; --------- if a_1 /= b_1 goto e_3  
00001124  2038 1026                133  .e:         MOVE.L      a_1, D0     ; D0 = a_1
00001128  B0B8 1032                134              CMP.L       b_1, D0     ; UPDATE FLAGS WITH D0 - b_1
0000112C  6600 0012                135              BNE         .e_3        ; IF Z FLAG = 0 GOTO .e_3
00001130                           136  ; --------- t_5 = 0                 
00001130  4280                     137              CLR.L       D0          ; CLEAR D0
00001132  103C 0000                138              MOVE.B      #0, D0      ; D0 = #0
00001136  11C0 1008                139              MOVE.B      D0, t_5     ; t_5 = D0
0000113A                           140  ; --------- goto e_4                
0000113A  4EF9 0000114A            141              JMP         .e_4        ; goto .e_4
00001140                           142  ; --------- e_3: skip               
00001140                           143                                      
00001140                           144  ; --------- t_5 = -1                
00001140  4280                     145  .e_3:       CLR.L       D0          ; CLEAR D0
00001142  103C 00FF                146              MOVE.B      #-1, D0     ; D0 = #-1
00001146  11C0 1008                147              MOVE.B      D0, t_5     ; t_5 = D0
0000114A                           148  ; --------- e_4: skip               
0000114A                           149                                      
0000114A                           150  ; --------- if t_5 == 0 goto e_1    
0000114A  4280                     151  .e_4:       CLR.L       D0          ; CLEAR D0
0000114C  1038 1008                152              MOVE.B      t_5, D0     ; D0 = t_5
00001150  B03C 0000                153              CMP.B       #0, D0      ; UPDATE FLAGS WITH D0 - #0
00001154  6700 006C                154              BEQ         .e_1        ; IF Z FLAG = 1 GOTO .e_1
00001158                           155  ; --------- if a_1 > b_1 goto e_5   
00001158  2038 1026                156              MOVE.L      a_1, D0     ; D0 = a_1
0000115C  B0B8 1032                157              CMP.L       b_1, D0     ; UPDATE FLAGS WITH D0 - b_1
00001160  6E00 0012                158              BGT         .e_5        ; IF ((N XOR V) OR Z) FLAGS = 0 GOTO .e_5
00001164                           159  ; --------- t_6 = 0                 
00001164  4280                     160              CLR.L       D0          ; CLEAR D0
00001166  103C 0000                161              MOVE.B      #0, D0      ; D0 = #0
0000116A  11C0 100A                162              MOVE.B      D0, t_6     ; t_6 = D0
0000116E                           163  ; --------- goto e_6                
0000116E  4EF9 0000117E            164              JMP         .e_6        ; goto .e_6
00001174                           165  ; --------- e_5: skip               
00001174                           166                                      
00001174                           167  ; --------- t_6 = -1                
00001174  4280                     168  .e_5:       CLR.L       D0          ; CLEAR D0
00001176  103C 00FF                169              MOVE.B      #-1, D0     ; D0 = #-1
0000117A  11C0 100A                170              MOVE.B      D0, t_6     ; t_6 = D0
0000117E                           171  ; --------- e_6: skip               
0000117E                           172                                      
0000117E                           173  ; --------- if t_6 == 0 goto e_8    
0000117E  4280                     174  .e_6:       CLR.L       D0          ; CLEAR D0
00001180  1038 100A                175              MOVE.B      t_6, D0     ; D0 = t_6
00001184  B03C 0000                176              CMP.B       #0, D0      ; UPDATE FLAGS WITH D0 - #0
00001188  6700 001E                177              BEQ         .e_8        ; IF Z FLAG = 1 GOTO .e_8
0000118C                           178  ; --------- t_7 = a_1 - b_1         
0000118C  2038 1026                179              MOVE.L      a_1, D0     ; D0 = a_1
00001190  2238 1032                180              MOVE.L      b_1, D1     ; D1 = b_1
00001194  9081                     181              SUB.L       D1, D0      ; D0 = D0 - D1
00001196  21C0 1062                182              MOVE.L      D0, t_7     ; t_7 = D0
0000119A                           183  ; --------- a_1 = t_7               
0000119A  2038 1062                184              MOVE.L      t_7, D0     ; D0 = t_7
0000119E  21C0 1026                185              MOVE.L      D0, a_1     ; a_1 = D0
000011A2                           186  ; --------- goto e_7                
000011A2  4EF9 000011BE            187              JMP         .e_7        ; goto .e_7
000011A8                           188  ; --------- e_8: skip               
000011A8                           189                                      
000011A8                           190  ; --------- t_8 = b_1 - a_1         
000011A8  2038 1032                191  .e_8:       MOVE.L      b_1, D0     ; D0 = b_1
000011AC  2238 1026                192              MOVE.L      a_1, D1     ; D1 = a_1
000011B0  9081                     193              SUB.L       D1, D0      ; D0 = D0 - D1
000011B2  21C0 105E                194              MOVE.L      D0, t_8     ; t_8 = D0
000011B6                           195  ; --------- b_1 = t_8               
000011B6  2038 105E                196              MOVE.L      t_8, D0     ; D0 = t_8
000011BA  21C0 1032                197              MOVE.L      D0, b_1     ; b_1 = D0
000011BE                           198  ; --------- e_7: skip               
000011BE                           199                                      
000011BE                           200  ; --------- e_2: skip               
000011BE                           201  .e_7:                               
000011BE                           202  ; --------- goto e                  
000011BE  4EF8 1124                203  .e_2:       JMP         .e          ; goto .e
000011C2                           204  ; --------- e_1: skip               
000011C2                           205                                      
000011C2                           206  ; --------- rtn e_mcd1, a_1         
000011C2  2F78 1026 0004           207  .e_1:       MOVE.L      a_1, 4(SP)  ; PUSH INTO STACK a_1
000011C8  4E75                     208              RTS                     ; RETURN TO SUBROUTINE e_mcd1
000011CA                           209  
000011CA                           210  
000011CA                           211  ; --------- e_mcm: skip             
000011CA                           212                                      
000011CA                           213  ; --------- pmb e_mcm               
000011CA  21EF 0008 1042           214  e_mcm:      MOVE.L      8(SP), num2 ; num2 = POP FROM STACK
000011D0  21EF 000C 103E           215              MOVE.L      12(SP), num1 ; num1 = POP FROM STACK
000011D6                           216  ; --------- if num1 > num2 goto e_9  
000011D6  2038 103E                217              MOVE.L      num1, D0    ; D0 = num1
000011DA  B0B8 1042                218              CMP.L       num2, D0    ; UPDATE FLAGS WITH D0 - num2
000011DE  6E00 0012                219              BGT         .e_9        ; IF ((N XOR V) OR Z) FLAGS = 0 GOTO .e_9
000011E2                           220  ; --------- t_9 = 0                 
000011E2  4280                     221              CLR.L       D0          ; CLEAR D0
000011E4  103C 0000                222              MOVE.B      #0, D0      ; D0 = #0
000011E8  11C0 100C                223              MOVE.B      D0, t_9     ; t_9 = D0
000011EC                           224  ; --------- goto e_10               
000011EC  4EF9 000011FC            225              JMP         .e_10       ; goto .e_10
000011F2                           226  ; --------- e_9: skip               
000011F2                           227                                      
000011F2                           228  ; --------- t_9 = -1                
000011F2  4280                     229  .e_9:       CLR.L       D0          ; CLEAR D0
000011F4  103C 00FF                230              MOVE.B      #-1, D0     ; D0 = #-1
000011F8  11C0 100C                231              MOVE.B      D0, t_9     ; t_9 = D0
000011FC                           232  ; --------- e_10: skip              
000011FC                           233                                      
000011FC                           234  ; --------- if t_9 == 0 goto e_12   
000011FC  4280                     235  .e_10:      CLR.L       D0          ; CLEAR D0
000011FE  1038 100C                236              MOVE.B      t_9, D0     ; D0 = t_9
00001202  B03C 0000                237              CMP.B       #0, D0      ; UPDATE FLAGS WITH D0 - #0
00001206  6700 0018                238              BEQ         .e_12       ; IF Z FLAG = 1 GOTO .e_12
0000120A                           239  ; --------- a_2 = num1              
0000120A  2038 103E                240              MOVE.L      num1, D0    ; D0 = num1
0000120E  21C0 1036                241              MOVE.L      D0, a_2     ; a_2 = D0
00001212                           242  ; --------- b_2 = num2              
00001212  2038 1042                243              MOVE.L      num2, D0    ; D0 = num2
00001216  21C0 102A                244              MOVE.L      D0, b_2     ; b_2 = D0
0000121A                           245  ; --------- goto e_11               
0000121A  4EF9 00001230            246              JMP         .e_11       ; goto .e_11
00001220                           247  ; --------- e_12: skip              
00001220                           248                                      
00001220                           249  ; --------- a_2 = num2              
00001220  2038 1042                250  .e_12:      MOVE.L      num2, D0    ; D0 = num2
00001224  21C0 1036                251              MOVE.L      D0, a_2     ; a_2 = D0
00001228                           252  ; --------- b_2 = num1              
00001228  2038 103E                253              MOVE.L      num1, D0    ; D0 = num1
0000122C  21C0 102A                254              MOVE.L      D0, b_2     ; b_2 = D0
00001230                           255  ; --------- e_11: skip              
00001230                           256                                      
00001230                           257  ; --------- param_s num1            
00001230  2F38 103E                258  .e_11:      MOVE.L      num1, -(SP) ; PUSH INTO STACK num1
00001234                           259  ; --------- param_s num2            
00001234  2F38 1042                260              MOVE.L      num2, -(SP) ; PUSH INTO STACK num2
00001238                           261  ; --------- call e_mcd2, t_10       
00001238  598F                     262              SUBA.L      #4, SP      ; SP = SP + 4
0000123A  4EB9 0000128C            263              JSR         e_mcd2      ; JUMP TO SUBROUTINE e_mcd2
00001240  21DF 1082                264              MOVE.L      (SP)+, t_10 ; t_10 = POP FROM STACK
00001244  508F                     265              ADDA.L      #8, SP      ; SP = SP + 8
00001246                           266  ; --------- t_11 = a_2 / t_10       
00001246  2038 1036                267              MOVE.L      a_2, D0     ; D0 = a_2
0000124A  2238 1082                268              MOVE.L      t_10, D1    ; D1 = t_10
0000124E  81C1                     269              DIVS.W      D1, D0      ; D0.h = D0 % D1. D0.l = D0 / D1
00001250  C0BC 0000FFFF            270              AND.L       #$0000FFFF, D0 ; Mask
00001256  21C0 1086                271              MOVE.L      D0, t_11    ; t_11 = D0
0000125A                           272  ; --------- t_12 = t_11 * b_2       
0000125A                           273  ;           A*B = A1A0*B1B0 = A0*B0 + A1*B1 * 2^16  
0000125A  2038 1086                274              MOVE.L      t_11, D0    ; D0 = t_11
0000125E  2238 102A                275              MOVE.L      b_2, D1     ; D1 = b_2
00001262  3400                     276              MOVE.W      D0, D2      ; D2.L = D1.L
00001264  3601                     277              MOVE.W      D1, D3      ; D1.L = D3.L
00001266  E080                     278              ASR.L       #8, D0      ; FIRST 8 BITS OF D0 MOVED RIGHT
00001268  E080                     279              ASR.L       #8, D0      ; D0.L = old D0.H
0000126A  E081                     280              ASR.L       #8, D1      ; FIRST 8 BITS OF D1 MOVED RIGHT
0000126C  E081                     281              ASR.L       #8, D1      ; D1.L = old D1.H
0000126E  C1C1                     282              MULS.W      D1, D0      ; D0 = D0 * D1
00001270  C7C2                     283              MULS.W      D2, D3      ; D3 = D2 * D3
00001272  E180                     284              ASL.L       #8, D0      ; FIRST 8 BITS OF D0 MOVED LEFT
00001274  E180                     285              ASL.L       #8, D0      ; D0.H = old D0.L
00001276  D083                     286              ADD.L       D3, D0      ; D0 = D0 + D3
00001278  21C0 107E                287              MOVE.L      D0, t_12    ; t_12 = D0
0000127C                           288  ; --------- resultado = t_12        
0000127C  2038 107E                289              MOVE.L      t_12, D0    ; D0 = t_12
00001280  21C0 104E                290              MOVE.L      D0, resultado ; resultado = D0
00001284                           291  ; --------- rtn e_mcm, resultado    
00001284  2F78 104E 0004           292              MOVE.L      resultado, 4(SP) ; PUSH INTO STACK resultado
0000128A  4E75                     293              RTS                     ; RETURN TO SUBROUTINE e_mcm
0000128C                           294  
0000128C                           295  
0000128C                           296  ; --------- e_mcd2: skip            
0000128C                           297                                      
0000128C                           298  ; --------- pmb e_mcd2              
0000128C  21EF 0008 101E           299  e_mcd2:     MOVE.L      8(SP), num2_1 ; num2_1 = POP FROM STACK
00001292  21EF 000C 101A           300              MOVE.L      12(SP), num1_1 ; num1_1 = POP FROM STACK
00001298                           301  ; --------- if num1_1 > num2_1 goto e_13  
00001298  2038 101A                302              MOVE.L      num1_1, D0  ; D0 = num1_1
0000129C  B0B8 101E                303              CMP.L       num2_1, D0  ; UPDATE FLAGS WITH D0 - num2_1
000012A0  6E00 0012                304              BGT         .e_13       ; IF ((N XOR V) OR Z) FLAGS = 0 GOTO .e_13
000012A4                           305  ; --------- t_13 = 0                
000012A4  4280                     306              CLR.L       D0          ; CLEAR D0
000012A6  103C 0000                307              MOVE.B      #0, D0      ; D0 = #0
000012AA  11C0 100E                308              MOVE.B      D0, t_13    ; t_13 = D0
000012AE                           309  ; --------- goto e_14               
000012AE  4EF9 000012BE            310              JMP         .e_14       ; goto .e_14
000012B4                           311  ; --------- e_13: skip              
000012B4                           312                                      
000012B4                           313  ; --------- t_13 = -1               
000012B4  4280                     314  .e_13:      CLR.L       D0          ; CLEAR D0
000012B6  103C 00FF                315              MOVE.B      #-1, D0     ; D0 = #-1
000012BA  11C0 100E                316              MOVE.B      D0, t_13    ; t_13 = D0
000012BE                           317  ; --------- e_14: skip              
000012BE                           318                                      
000012BE                           319  ; --------- if t_13 == 0 goto e_16  
000012BE  4280                     320  .e_14:      CLR.L       D0          ; CLEAR D0
000012C0  1038 100E                321              MOVE.B      t_13, D0    ; D0 = t_13
000012C4  B03C 0000                322              CMP.B       #0, D0      ; UPDATE FLAGS WITH D0 - #0
000012C8  6700 0018                323              BEQ         .e_16       ; IF Z FLAG = 1 GOTO .e_16
000012CC                           324  ; --------- a_3 = num1_1            
000012CC  2038 101A                325              MOVE.L      num1_1, D0  ; D0 = num1_1
000012D0  21C0 102E                326              MOVE.L      D0, a_3     ; a_3 = D0
000012D4                           327  ; --------- b_3 = num2_1            
000012D4  2038 101E                328              MOVE.L      num2_1, D0  ; D0 = num2_1
000012D8  21C0 103A                329              MOVE.L      D0, b_3     ; b_3 = D0
000012DC                           330  ; --------- goto e_15               
000012DC  4EF9 000012F2            331              JMP         .e_15       ; goto .e_15
000012E2                           332  ; --------- e_16: skip              
000012E2                           333                                      
000012E2                           334  ; --------- a_3 = num2_1            
000012E2  2038 101E                335  .e_16:      MOVE.L      num2_1, D0  ; D0 = num2_1
000012E6  21C0 102E                336              MOVE.L      D0, a_3     ; a_3 = D0
000012EA                           337  ; --------- b_3 = num1_1            
000012EA  2038 101A                338              MOVE.L      num1_1, D0  ; D0 = num1_1
000012EE  21C0 103A                339              MOVE.L      D0, b_3     ; b_3 = D0
000012F2                           340  ; --------- e_15: skip              
000012F2                           341                                      
000012F2                           342  ; --------- t_14 = 0                
000012F2  7000                     343  .e_15:      MOVE.L      #0, D0      ; D0 = #0
000012F4  21C0 1010                344              MOVE.L      D0, t_14    ; t_14 = D0
000012F8                           345  ; --------- resultado_1 = t_14      
000012F8  2038 1010                346              MOVE.L      t_14, D0    ; D0 = t_14
000012FC  21C0 1076                347              MOVE.L      D0, resultado_1 ; resultado_1 = D0
00001300                           348  ; --------- e_17: skip              
00001300                           349                                      
00001300                           350  ; --------- resultado_1 = b_3       
00001300  2038 103A                351  .e_17:      MOVE.L      b_3, D0     ; D0 = b_3
00001304  21C0 1076                352              MOVE.L      D0, resultado_1 ; resultado_1 = D0
00001308                           353  ; --------- t_15 = a_3 mod b_3      
00001308  2038 102E                354              MOVE.L      a_3, D0     ; D0 = a_3
0000130C  2238 103A                355              MOVE.L      b_3, D1     ; D1 = b_3
00001310  81C1                     356              DIVS.W      D1, D0      ; D0.h = D0 % D1. D0.l = D0 / D1
00001312  E088                     357              LSR.L       #8, D0      ; D0.l = D0.h
00001314  E088                     358              LSR.L       #8, D0      ; D0.l = D0.h
00001316  21C0 107A                359              MOVE.L      D0, t_15    ; t_15 = D0
0000131A                           360  ; --------- b_3 = t_15              
0000131A  2038 107A                361              MOVE.L      t_15, D0    ; D0 = t_15
0000131E  21C0 103A                362              MOVE.L      D0, b_3     ; b_3 = D0
00001322                           363  ; --------- a_3 = resultado_1       
00001322  2038 1076                364              MOVE.L      resultado_1, D0 ; D0 = resultado_1
00001326  21C0 102E                365              MOVE.L      D0, a_3     ; a_3 = D0
0000132A                           366  ; --------- e_19: skip              
0000132A                           367                                      
0000132A                           368  ; --------- t_16 = 0                
0000132A  7000                     369  .e_19:      MOVE.L      #0, D0      ; D0 = #0
0000132C  21C0 1014                370              MOVE.L      D0, t_16    ; t_16 = D0
00001330                           371  ; --------- if b_3 /= t_16 goto e_20  
00001330  2038 103A                372              MOVE.L      b_3, D0     ; D0 = b_3
00001334  B0B8 1014                373              CMP.L       t_16, D0    ; UPDATE FLAGS WITH D0 - t_16
00001338  6600 0012                374              BNE         .e_20       ; IF Z FLAG = 0 GOTO .e_20
0000133C                           375  ; --------- t_17 = 0                
0000133C  4280                     376              CLR.L       D0          ; CLEAR D0
0000133E  103C 0000                377              MOVE.B      #0, D0      ; D0 = #0
00001342  11C0 1018                378              MOVE.B      D0, t_17    ; t_17 = D0
00001346                           379  ; --------- goto e_21               
00001346  4EF9 00001356            380              JMP         .e_21       ; goto .e_21
0000134C                           381  ; --------- e_20: skip              
0000134C                           382                                      
0000134C                           383  ; --------- t_17 = -1               
0000134C  4280                     384  .e_20:      CLR.L       D0          ; CLEAR D0
0000134E  103C 00FF                385              MOVE.B      #-1, D0     ; D0 = #-1
00001352  11C0 1018                386              MOVE.B      D0, t_17    ; t_17 = D0
00001356                           387  ; --------- e_21: skip              
00001356                           388                                      
00001356                           389  ; --------- if t_17 == 0 goto e_18  
00001356  4280                     390  .e_21:      CLR.L       D0          ; CLEAR D0
00001358  1038 1018                391              MOVE.B      t_17, D0    ; D0 = t_17
0000135C  B03C 0000                392              CMP.B       #0, D0      ; UPDATE FLAGS WITH D0 - #0
00001360  6700 0006                393              BEQ         .e_18       ; IF Z FLAG = 1 GOTO .e_18
00001364                           394  ; --------- goto e_17               
00001364  4EF8 1300                395              JMP         .e_17       ; goto .e_17
00001368                           396  ; --------- e_18: skip              
00001368                           397                                      
00001368                           398  ; --------- rtn e_mcd2, resultado_1  
00001368  2F78 1076 0004           399  .e_18:      MOVE.L      resultado_1, 4(SP) ; PUSH INTO STACK resultado_1
0000136E  4E75                     400              RTS                     ; RETURN TO SUBROUTINE e_mcd2
00001370                           401  
00001370                           402  
00001370                           403              END MCD                 ; Fin del programa

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A                   1046
A0                  106A
A_1                 1026
A_2                 1036
A_3                 102E
B                   104A
B0                  1022
B_1                 1032
B_2                 102A
B_3                 103A
C1                  1066
C2                  106E
C3                  1072
E_INICIO            1094
E_MCD1              110C
E_MCD1:E            1124
E_MCD1:E_1          11C2
E_MCD1:E_2          11BE
E_MCD1:E_3          1140
E_MCD1:E_4          114A
E_MCD1:E_5          1174
E_MCD1:E_6          117E
E_MCD1:E_7          11BE
E_MCD1:E_8          11A8
E_MCD2              128C
E_MCD2:E_13         12B4
E_MCD2:E_14         12BE
E_MCD2:E_15         12F2
E_MCD2:E_16         12E2
E_MCD2:E_17         1300
E_MCD2:E_18         1368
E_MCD2:E_19         132A
E_MCD2:E_20         134C
E_MCD2:E_21         1356
E_MCM               11CA
E_MCM:E_10          11FC
E_MCM:E_11          1230
E_MCM:E_12          1220
E_MCM:E_9           11F2
MCD                 108A
NUM1                103E
NUM1_1              101A
NUM2                1042
NUM2_1              101E
RESULTADO           104E
RESULTADO_1         1076
T                   1000
T_1                 1004
T_10                1082
T_11                1086
T_12                107E
T_13                100E
T_14                1010
T_15                107A
T_16                1014
T_17                1018
T_2                 1052
T_3                 105A
T_4                 1056
T_5                 1008
T_6                 100A
T_7                 1062
T_8                 105E
T_9                 100C
