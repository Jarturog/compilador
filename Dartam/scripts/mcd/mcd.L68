0000107E Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 06/02/2024 5:18:21

00000000                             1  ; ==============================================================================
00000000                             2  ; TITLE       : mcd
00000000                             3  ; COMPILED BY : jartu
00000000                             4  ; COMPILER BY : Juan Arturo Abaurrea Calafell
00000000                             5  ;               Dani Salanova Dmitriyev
00000000                             6  ;               Marta González Juan
00000000                             7  ; ==============================================================================
00000000                             8  
00001000                             9              ORG         $1000       ; Origen
00001000                            10  
00001000= 00000010                  11  a           DC.L 16                 ; INT
00001004= 00000014                  12  b           DC.L 20                 ; INT
00001008= 00                        13  t_5         DC.B 0                  ; BOOLEAN
00001009= 00                        14              DC.B 0                  ; Los strings y chars acaban en 0
0000100A                            15              DS.W 0                  ; No pueden haber variables en zonas de memoria impar
0000100A= 00                        16  t_6         DC.B 0                  ; BOOLEAN
0000100B= 00                        17              DC.B 0                  ; Los strings y chars acaban en 0
0000100C                            18              DS.W 0                  ; No pueden haber variables en zonas de memoria impar
0000100C= 00                        19  t_9         DC.B 0                  ; BOOLEAN
0000100D= 00                        20              DC.B 0                  ; Los strings y chars acaban en 0
0000100E                            21              DS.W 0                  ; No pueden haber variables en zonas de memoria impar
0000100E= 00                        22  t_13        DC.B 0                  ; BOOLEAN
0000100F= 00                        23              DC.B 0                  ; Los strings y chars acaban en 0
00001010                            24              DS.W 0                  ; No pueden haber variables en zonas de memoria impar
00001010= 00000000                  25  resultado_1 DC.L 0                  ; INT
00001014= 00000000                  26  t_16        DC.L 0                  ; INT
00001018= 00                        27  t_17        DC.B 0                  ; BOOLEAN
00001019= 00                        28              DC.B 0                  ; Los strings y chars acaban en 0
0000101A                            29              DS.W 0                  ; No pueden haber variables en zonas de memoria impar
0000101A                            30  num1_1      DS.L 1                  ; INT
0000101E                            31  num2_1      DS.L 1                  ; INT
00001022                            32  b0          DS.L 1                  ; INT
00001026                            33  a_1         DS.L 1                  ; INT
0000102A                            34  b_2         DS.L 1                  ; INT
0000102E                            35  a_3         DS.L 1                  ; INT
00001032                            36  b_1         DS.L 1                  ; INT
00001036                            37  a_2         DS.L 1                  ; INT
0000103A                            38  b_3         DS.L 1                  ; INT
0000103E                            39  num1        DS.L 1                  ; INT
00001042                            40  num2        DS.L 1                  ; INT
00001046                            41  resultado   DS.L 1                  ; INT
0000104A                            42  t_2         DS.L 1                  ; INT
0000104E                            43  t_4         DS.L 1                  ; INT
00001052                            44  t_3         DS.L 1                  ; INT
00001056                            45  t_8         DS.L 1                  ; INT
0000105A                            46  t_7         DS.L 1                  ; INT
0000105E                            47  c1          DS.L 1                  ; INT
00001062                            48  a0          DS.L 1                  ; INT
00001066                            49  c2          DS.L 1                  ; INT
0000106A                            50  c3          DS.L 1                  ; INT
0000106E                            51  t_15        DS.L 1                  ; INT
00001072                            52  t_12        DS.L 1                  ; INT
00001076                            53  t_10        DS.L 1                  ; INT
0000107A                            54  t_11        DS.L 1                  ; INT
0000107E                            55  MCD                                 ; Etiqueta inicial (main)
0000107E  4EB9 00001088             56              JSR         e_inicio    ; Se ejecuta el main
00001084  FFFF FFFF                 57              SIMHALT                 ; Fin de la ejecución
00001088                            58  
00001088                            59  ; --------- e_inicio: skip          
00001088                            60                                      
00001088                            61  ; --------- pmb e_inicio            
00001088                            62  ; --------- a = 16                  
00001088  7010                      63  e_inicio:   MOVE.L      #16, D0     ; D0 = #16
0000108A  21C0 1000                 64              MOVE.L      D0, a       ; a = D0
0000108E                            65  ; --------- b = 20                  
0000108E  7014                      66              MOVE.L      #20, D0     ; D0 = #20
00001090  21C0 1004                 67              MOVE.L      D0, b       ; b = D0
00001094                            68  ; --------- param_s a               
00001094  2F38 1000                 69              MOVE.L      a, -(SP)    ; PUSH INTO STACK a
00001098                            70  ; --------- param_s b               
00001098  2F38 1004                 71              MOVE.L      b, -(SP)    ; PUSH INTO STACK b
0000109C                            72  ; --------- call e_mcd1, t_2        
0000109C  598F                      73              SUBA.L      #4, SP      ; SP = SP + 4
0000109E  4EB9 000010F0             74              JSR         e_mcd1      ; JUMP TO SUBROUTINE e_mcd1
000010A4  21DF 104A                 75              MOVE.L      (SP)+, t_2  ; t_2 = POP FROM STACK
000010A8  508F                      76              ADDA.L      #8, SP      ; SP = SP + 8
000010AA                            77  ; --------- c1 = t_2                
000010AA  2038 104A                 78              MOVE.L      t_2, D0     ; D0 = t_2
000010AE  21C0 105E                 79              MOVE.L      D0, c1      ; c1 = D0
000010B2                            80  ; --------- param_s a               
000010B2  2F38 1000                 81              MOVE.L      a, -(SP)    ; PUSH INTO STACK a
000010B6                            82  ; --------- param_s b               
000010B6  2F38 1004                 83              MOVE.L      b, -(SP)    ; PUSH INTO STACK b
000010BA                            84  ; --------- call e_mcd2, t_3        
000010BA  598F                      85              SUBA.L      #4, SP      ; SP = SP + 4
000010BC  4EB9 00001270             86              JSR         e_mcd2      ; JUMP TO SUBROUTINE e_mcd2
000010C2  21DF 1052                 87              MOVE.L      (SP)+, t_3  ; t_3 = POP FROM STACK
000010C6  508F                      88              ADDA.L      #8, SP      ; SP = SP + 8
000010C8                            89  ; --------- c2 = t_3                
000010C8  2038 1052                 90              MOVE.L      t_3, D0     ; D0 = t_3
000010CC  21C0 1066                 91              MOVE.L      D0, c2      ; c2 = D0
000010D0                            92  ; --------- param_s a               
000010D0  2F38 1000                 93              MOVE.L      a, -(SP)    ; PUSH INTO STACK a
000010D4                            94  ; --------- param_s b               
000010D4  2F38 1004                 95              MOVE.L      b, -(SP)    ; PUSH INTO STACK b
000010D8                            96  ; --------- call e_mcm, t_4         
000010D8  598F                      97              SUBA.L      #4, SP      ; SP = SP + 4
000010DA  4EB9 000011AE             98              JSR         e_mcm       ; JUMP TO SUBROUTINE e_mcm
000010E0  21DF 104E                 99              MOVE.L      (SP)+, t_4  ; t_4 = POP FROM STACK
000010E4  508F                     100              ADDA.L      #8, SP      ; SP = SP + 8
000010E6                           101  ; --------- c3 = t_4                
000010E6  2038 104E                102              MOVE.L      t_4, D0     ; D0 = t_4
000010EA  21C0 106A                103              MOVE.L      D0, c3      ; c3 = D0
000010EE                           104  ; --------- rtn e_inicio            
000010EE  4E75                     105              RTS                     ; RETURN TO SUBROUTINE e_inicio
000010F0                           106  
000010F0                           107  
000010F0                           108  
000010F0                           109  
000010F0                           110  ; --------- e_mcd1: skip            
000010F0                           111                                      
000010F0                           112  ; --------- pmb e_mcd1              
000010F0  21EF 0008 1022           113  e_mcd1:     MOVE.L      8(SP), b0   ; b0 = POP FROM STACK
000010F6  206F 000C                114              MOVE.L      12(SP), a0  ; a0 = POP FROM STACK
000010FA                           115  ; --------- a_1 = a0                
000010FA  2008                     116              MOVE.L      a0, D0      ; D0 = a0
000010FC  21C0 1026                117              MOVE.L      D0, a_1     ; a_1 = D0
00001100                           118  ; --------- b_1 = b0                
00001100  2038 1022                119              MOVE.L      b0, D0      ; D0 = b0
00001104  21C0 1032                120              MOVE.L      D0, b_1     ; b_1 = D0
00001108                           121  ; --------- e: skip                 
00001108                           122                                      
00001108                           123  ; --------- if a_1 /= b_1 goto e_3  
00001108  2038 1026                124  .e:         MOVE.L      a_1, D0     ; D0 = a_1
0000110C  B0B8 1032                125              CMP.L       b_1, D0     ; UPDATE FLAGS WITH D0 - b_1
00001110  6600 0012                126              BNE         .e_3        ; IF Z FLAG = 0 GOTO .e_3
00001114                           127  ; --------- t_5 = 0                 
00001114  4280                     128              CLR.L       D0          ; CLEAR D0
00001116  103C 0000                129              MOVE.B      #0, D0      ; D0 = #0
0000111A  11C0 1008                130              MOVE.B      D0, t_5     ; t_5 = D0
0000111E                           131  ; --------- goto e_4                
0000111E  4EF9 0000112E            132              JMP         .e_4        ; goto .e_4
00001124                           133  ; --------- e_3: skip               
00001124                           134                                      
00001124                           135  ; --------- t_5 = -1                
00001124  4280                     136  .e_3:       CLR.L       D0          ; CLEAR D0
00001126  103C 00FF                137              MOVE.B      #-1, D0     ; D0 = #-1
0000112A  11C0 1008                138              MOVE.B      D0, t_5     ; t_5 = D0
0000112E                           139  ; --------- e_4: skip               
0000112E                           140                                      
0000112E                           141  ; --------- if t_5 == 0 goto e_1    
0000112E  4280                     142  .e_4:       CLR.L       D0          ; CLEAR D0
00001130  1038 1008                143              MOVE.B      t_5, D0     ; D0 = t_5
00001134  B03C 0000                144              CMP.B       #0, D0      ; UPDATE FLAGS WITH D0 - #0
00001138  6700 006C                145              BEQ         .e_1        ; IF Z FLAG = 1 GOTO .e_1
0000113C                           146  ; --------- if a_1 > b_1 goto e_5   
0000113C  2038 1026                147              MOVE.L      a_1, D0     ; D0 = a_1
00001140  B0B8 1032                148              CMP.L       b_1, D0     ; UPDATE FLAGS WITH D0 - b_1
00001144  6E00 0012                149              BGT         .e_5        ; IF ((N XOR V) OR Z) FLAGS = 0 GOTO .e_5
00001148                           150  ; --------- t_6 = 0                 
00001148  4280                     151              CLR.L       D0          ; CLEAR D0
0000114A  103C 0000                152              MOVE.B      #0, D0      ; D0 = #0
0000114E  11C0 100A                153              MOVE.B      D0, t_6     ; t_6 = D0
00001152                           154  ; --------- goto e_6                
00001152  4EF9 00001162            155              JMP         .e_6        ; goto .e_6
00001158                           156  ; --------- e_5: skip               
00001158                           157                                      
00001158                           158  ; --------- t_6 = -1                
00001158  4280                     159  .e_5:       CLR.L       D0          ; CLEAR D0
0000115A  103C 00FF                160              MOVE.B      #-1, D0     ; D0 = #-1
0000115E  11C0 100A                161              MOVE.B      D0, t_6     ; t_6 = D0
00001162                           162  ; --------- e_6: skip               
00001162                           163                                      
00001162                           164  ; --------- if t_6 == 0 goto e_8    
00001162  4280                     165  .e_6:       CLR.L       D0          ; CLEAR D0
00001164  1038 100A                166              MOVE.B      t_6, D0     ; D0 = t_6
00001168  B03C 0000                167              CMP.B       #0, D0      ; UPDATE FLAGS WITH D0 - #0
0000116C  6700 001E                168              BEQ         .e_8        ; IF Z FLAG = 1 GOTO .e_8
00001170                           169  ; --------- t_7 = a_1 - b_1         
00001170  2038 1026                170              MOVE.L      a_1, D0     ; D0 = a_1
00001174  2238 1032                171              MOVE.L      b_1, D1     ; D1 = b_1
00001178  9081                     172              SUB.L       D1, D0      ; D0 = D0 - D1
0000117A  21C0 105A                173              MOVE.L      D0, t_7     ; t_7 = D0
0000117E                           174  ; --------- a_1 = t_7               
0000117E  2038 105A                175              MOVE.L      t_7, D0     ; D0 = t_7
00001182  21C0 1026                176              MOVE.L      D0, a_1     ; a_1 = D0
00001186                           177  ; --------- goto e_7                
00001186  4EF9 000011A2            178              JMP         .e_7        ; goto .e_7
0000118C                           179  ; --------- e_8: skip               
0000118C                           180                                      
0000118C                           181  ; --------- t_8 = b_1 - a_1         
0000118C  2038 1032                182  .e_8:       MOVE.L      b_1, D0     ; D0 = b_1
00001190  2238 1026                183              MOVE.L      a_1, D1     ; D1 = a_1
00001194  9081                     184              SUB.L       D1, D0      ; D0 = D0 - D1
00001196  21C0 1056                185              MOVE.L      D0, t_8     ; t_8 = D0
0000119A                           186  ; --------- b_1 = t_8               
0000119A  2038 1056                187              MOVE.L      t_8, D0     ; D0 = t_8
0000119E  21C0 1032                188              MOVE.L      D0, b_1     ; b_1 = D0
000011A2                           189  ; --------- e_7: skip               
000011A2                           190                                      
000011A2                           191  ; --------- goto e                  
000011A2  4EF8 1108                192  .e_7:       JMP         .e          ; goto .e
000011A6                           193  ; --------- e_1: skip               
000011A6                           194                                      
000011A6                           195  ; --------- rtn e_mcd1, a_1         
000011A6  2F78 1026 0004           196  .e_1:       MOVE.L      a_1, 4(SP)  ; PUSH INTO STACK a_1
000011AC  4E75                     197              RTS                     ; RETURN TO SUBROUTINE e_mcd1
000011AE                           198  
000011AE                           199  
000011AE                           200  ; --------- e_mcm: skip             
000011AE                           201                                      
000011AE                           202  ; --------- pmb e_mcm               
000011AE  21EF 0008 1042           203  e_mcm:      MOVE.L      8(SP), num2 ; num2 = POP FROM STACK
000011B4  21EF 000C 103E           204              MOVE.L      12(SP), num1 ; num1 = POP FROM STACK
000011BA                           205  ; --------- if num1 > num2 goto e_9  
000011BA  2038 103E                206              MOVE.L      num1, D0    ; D0 = num1
000011BE  B0B8 1042                207              CMP.L       num2, D0    ; UPDATE FLAGS WITH D0 - num2
000011C2  6E00 0012                208              BGT         .e_9        ; IF ((N XOR V) OR Z) FLAGS = 0 GOTO .e_9
000011C6                           209  ; --------- t_9 = 0                 
000011C6  4280                     210              CLR.L       D0          ; CLEAR D0
000011C8  103C 0000                211              MOVE.B      #0, D0      ; D0 = #0
000011CC  11C0 100C                212              MOVE.B      D0, t_9     ; t_9 = D0
000011D0                           213  ; --------- goto e_10               
000011D0  4EF9 000011E0            214              JMP         .e_10       ; goto .e_10
000011D6                           215  ; --------- e_9: skip               
000011D6                           216                                      
000011D6                           217  ; --------- t_9 = -1                
000011D6  4280                     218  .e_9:       CLR.L       D0          ; CLEAR D0
000011D8  103C 00FF                219              MOVE.B      #-1, D0     ; D0 = #-1
000011DC  11C0 100C                220              MOVE.B      D0, t_9     ; t_9 = D0
000011E0                           221  ; --------- e_10: skip              
000011E0                           222                                      
000011E0                           223  ; --------- if t_9 == 0 goto e_12   
000011E0  4280                     224  .e_10:      CLR.L       D0          ; CLEAR D0
000011E2  1038 100C                225              MOVE.B      t_9, D0     ; D0 = t_9
000011E6  B03C 0000                226              CMP.B       #0, D0      ; UPDATE FLAGS WITH D0 - #0
000011EA  6700 0018                227              BEQ         .e_12       ; IF Z FLAG = 1 GOTO .e_12
000011EE                           228  ; --------- a_2 = num1              
000011EE  2038 103E                229              MOVE.L      num1, D0    ; D0 = num1
000011F2  21C0 1036                230              MOVE.L      D0, a_2     ; a_2 = D0
000011F6                           231  ; --------- b_2 = num2              
000011F6  2038 1042                232              MOVE.L      num2, D0    ; D0 = num2
000011FA  21C0 102A                233              MOVE.L      D0, b_2     ; b_2 = D0
000011FE                           234  ; --------- goto e_11               
000011FE  4EF9 00001214            235              JMP         .e_11       ; goto .e_11
00001204                           236  ; --------- e_12: skip              
00001204                           237                                      
00001204                           238  ; --------- a_2 = num2              
00001204  2038 1042                239  .e_12:      MOVE.L      num2, D0    ; D0 = num2
00001208  21C0 1036                240              MOVE.L      D0, a_2     ; a_2 = D0
0000120C                           241  ; --------- b_2 = num1              
0000120C  2038 103E                242              MOVE.L      num1, D0    ; D0 = num1
00001210  21C0 102A                243              MOVE.L      D0, b_2     ; b_2 = D0
00001214                           244  ; --------- e_11: skip              
00001214                           245                                      
00001214                           246  ; --------- param_s num1            
00001214  2F38 103E                247  .e_11:      MOVE.L      num1, -(SP) ; PUSH INTO STACK num1
00001218                           248  ; --------- param_s num2            
00001218  2F38 1042                249              MOVE.L      num2, -(SP) ; PUSH INTO STACK num2
0000121C                           250  ; --------- call e_mcd2, t_10       
0000121C  598F                     251              SUBA.L      #4, SP      ; SP = SP + 4
0000121E  4EB9 00001270            252              JSR         e_mcd2      ; JUMP TO SUBROUTINE e_mcd2
00001224  21DF 1076                253              MOVE.L      (SP)+, t_10 ; t_10 = POP FROM STACK
00001228  508F                     254              ADDA.L      #8, SP      ; SP = SP + 8
0000122A                           255  ; --------- t_11 = a_2 / t_10       
0000122A  2038 1036                256              MOVE.L      a_2, D0     ; D0 = a_2
0000122E  2238 1076                257              MOVE.L      t_10, D1    ; D1 = t_10
00001232  81C1                     258              DIVS.W      D1, D0      ; D0.h = D0 % D1. D0.l = D0 / D1
00001234  C0BC 0000FFFF            259              AND.L       #$0000FFFF, D0 ; Mask
0000123A  21C0 107A                260              MOVE.L      D0, t_11    ; t_11 = D0
0000123E                           261  ; --------- t_12 = t_11 * b_2       
0000123E                           262  ;           A*B = A1A0*B1B0 = A0*B0 + A1*B1 * 2^16  
0000123E  2038 107A                263              MOVE.L      t_11, D0    ; D0 = t_11
00001242  2238 102A                264              MOVE.L      b_2, D1     ; D1 = b_2
00001246  3400                     265              MOVE.W      D0, D2      ; D2.L = D1.L
00001248  3601                     266              MOVE.W      D1, D3      ; D1.L = D3.L
0000124A  E080                     267              ASR.L       #8, D0      ; FIRST 8 BITS OF D0 MOVED RIGHT
0000124C  E080                     268              ASR.L       #8, D0      ; D0.L = old D0.H
0000124E  E081                     269              ASR.L       #8, D1      ; FIRST 8 BITS OF D1 MOVED RIGHT
00001250  E081                     270              ASR.L       #8, D1      ; D1.L = old D1.H
00001252  C1C1                     271              MULS.W      D1, D0      ; D0 = D0 * D1
00001254  C7C2                     272              MULS.W      D2, D3      ; D3 = D2 * D3
00001256  E180                     273              ASL.L       #8, D0      ; FIRST 8 BITS OF D0 MOVED LEFT
00001258  E180                     274              ASL.L       #8, D0      ; D0.H = old D0.L
0000125A  D083                     275              ADD.L       D3, D0      ; D0 = D0 + D3
0000125C  21C0 1072                276              MOVE.L      D0, t_12    ; t_12 = D0
00001260                           277  ; --------- resultado = t_12        
00001260  2038 1072                278              MOVE.L      t_12, D0    ; D0 = t_12
00001264  21C0 1046                279              MOVE.L      D0, resultado ; resultado = D0
00001268                           280  ; --------- rtn e_mcm, resultado    
00001268  2F78 1046 0004           281              MOVE.L      resultado, 4(SP) ; PUSH INTO STACK resultado
0000126E  4E75                     282              RTS                     ; RETURN TO SUBROUTINE e_mcm
00001270                           283  
00001270                           284  
00001270                           285  ; --------- e_mcd2: skip            
00001270                           286                                      
00001270                           287  ; --------- pmb e_mcd2              
00001270  21EF 0008 101E           288  e_mcd2:     MOVE.L      8(SP), num2_1 ; num2_1 = POP FROM STACK
00001276  21EF 000C 101A           289              MOVE.L      12(SP), num1_1 ; num1_1 = POP FROM STACK
0000127C                           290  ; --------- if num1_1 > num2_1 goto e_13  
0000127C  2038 101A                291              MOVE.L      num1_1, D0  ; D0 = num1_1
00001280  B0B8 101E                292              CMP.L       num2_1, D0  ; UPDATE FLAGS WITH D0 - num2_1
00001284  6E00 0012                293              BGT         .e_13       ; IF ((N XOR V) OR Z) FLAGS = 0 GOTO .e_13
00001288                           294  ; --------- t_13 = 0                
00001288  4280                     295              CLR.L       D0          ; CLEAR D0
0000128A  103C 0000                296              MOVE.B      #0, D0      ; D0 = #0
0000128E  11C0 100E                297              MOVE.B      D0, t_13    ; t_13 = D0
00001292                           298  ; --------- goto e_14               
00001292  4EF9 000012A2            299              JMP         .e_14       ; goto .e_14
00001298                           300  ; --------- e_13: skip              
00001298                           301                                      
00001298                           302  ; --------- t_13 = -1               
00001298  4280                     303  .e_13:      CLR.L       D0          ; CLEAR D0
0000129A  103C 00FF                304              MOVE.B      #-1, D0     ; D0 = #-1
0000129E  11C0 100E                305              MOVE.B      D0, t_13    ; t_13 = D0
000012A2                           306  ; --------- e_14: skip              
000012A2                           307                                      
000012A2                           308  ; --------- if t_13 == 0 goto e_16  
000012A2  4280                     309  .e_14:      CLR.L       D0          ; CLEAR D0
000012A4  1038 100E                310              MOVE.B      t_13, D0    ; D0 = t_13
000012A8  B03C 0000                311              CMP.B       #0, D0      ; UPDATE FLAGS WITH D0 - #0
000012AC  6700 0018                312              BEQ         .e_16       ; IF Z FLAG = 1 GOTO .e_16
000012B0                           313  ; --------- a_3 = num1_1            
000012B0  2038 101A                314              MOVE.L      num1_1, D0  ; D0 = num1_1
000012B4  21C0 102E                315              MOVE.L      D0, a_3     ; a_3 = D0
000012B8                           316  ; --------- b_3 = num2_1            
000012B8  2038 101E                317              MOVE.L      num2_1, D0  ; D0 = num2_1
000012BC  21C0 103A                318              MOVE.L      D0, b_3     ; b_3 = D0
000012C0                           319  ; --------- goto e_15               
000012C0  4EF9 000012D6            320              JMP         .e_15       ; goto .e_15
000012C6                           321  ; --------- e_16: skip              
000012C6                           322                                      
000012C6                           323  ; --------- a_3 = num2_1            
000012C6  2038 101E                324  .e_16:      MOVE.L      num2_1, D0  ; D0 = num2_1
000012CA  21C0 102E                325              MOVE.L      D0, a_3     ; a_3 = D0
000012CE                           326  ; --------- b_3 = num1_1            
000012CE  2038 101A                327              MOVE.L      num1_1, D0  ; D0 = num1_1
000012D2  21C0 103A                328              MOVE.L      D0, b_3     ; b_3 = D0
000012D6                           329  ; --------- e_15: skip              
000012D6                           330                                      
000012D6                           331  ; --------- resultado_1 = 0         
000012D6  7000                     332  .e_15:      MOVE.L      #0, D0      ; D0 = #0
000012D8  21C0 1010                333              MOVE.L      D0, resultado_1 ; resultado_1 = D0
000012DC                           334  ; --------- e_17: skip              
000012DC                           335                                      
000012DC                           336  ; --------- resultado_1 = b_3       
000012DC  2038 103A                337  .e_17:      MOVE.L      b_3, D0     ; D0 = b_3
000012E0  21C0 1010                338              MOVE.L      D0, resultado_1 ; resultado_1 = D0
000012E4                           339  ; --------- t_15 = a_3 mod b_3      
000012E4  2038 102E                340              MOVE.L      a_3, D0     ; D0 = a_3
000012E8  2238 103A                341              MOVE.L      b_3, D1     ; D1 = b_3
000012EC  81C1                     342              DIVS.W      D1, D0      ; D0.h = D0 % D1. D0.l = D0 / D1
000012EE  E088                     343              LSR.L       #8, D0      ; D0.l = D0.h
000012F0  E088                     344              LSR.L       #8, D0      ; D0.l = D0.h
000012F2  21C0 106E                345              MOVE.L      D0, t_15    ; t_15 = D0
000012F6                           346  ; --------- b_3 = t_15              
000012F6  2038 106E                347              MOVE.L      t_15, D0    ; D0 = t_15
000012FA  21C0 103A                348              MOVE.L      D0, b_3     ; b_3 = D0
000012FE                           349  ; --------- a_3 = resultado_1       
000012FE  2038 1010                350              MOVE.L      resultado_1, D0 ; D0 = resultado_1
00001302  21C0 102E                351              MOVE.L      D0, a_3     ; a_3 = D0
00001306                           352  ; --------- t_16 = 0                
00001306  7000                     353              MOVE.L      #0, D0      ; D0 = #0
00001308  21C0 1014                354              MOVE.L      D0, t_16    ; t_16 = D0
0000130C                           355  ; --------- if b_3 /= t_16 goto e_20  
0000130C  2038 103A                356              MOVE.L      b_3, D0     ; D0 = b_3
00001310  B0B8 1014                357              CMP.L       t_16, D0    ; UPDATE FLAGS WITH D0 - t_16
00001314  6600 0012                358              BNE         .e_20       ; IF Z FLAG = 0 GOTO .e_20
00001318                           359  ; --------- t_17 = 0                
00001318  4280                     360              CLR.L       D0          ; CLEAR D0
0000131A  103C 0000                361              MOVE.B      #0, D0      ; D0 = #0
0000131E  11C0 1018                362              MOVE.B      D0, t_17    ; t_17 = D0
00001322                           363  ; --------- goto e_21               
00001322  4EF9 00001332            364              JMP         .e_21       ; goto .e_21
00001328                           365  ; --------- e_20: skip              
00001328                           366                                      
00001328                           367  ; --------- t_17 = -1               
00001328  4280                     368  .e_20:      CLR.L       D0          ; CLEAR D0
0000132A  103C 00FF                369              MOVE.B      #-1, D0     ; D0 = #-1
0000132E  11C0 1018                370              MOVE.B      D0, t_17    ; t_17 = D0
00001332                           371  ; --------- e_21: skip              
00001332                           372                                      
00001332                           373  ; --------- if t_17 == 0 goto e_18  
00001332  4280                     374  .e_21:      CLR.L       D0          ; CLEAR D0
00001334  1038 1018                375              MOVE.B      t_17, D0    ; D0 = t_17
00001338  B03C 0000                376              CMP.B       #0, D0      ; UPDATE FLAGS WITH D0 - #0
0000133C  6700 0006                377              BEQ         .e_18       ; IF Z FLAG = 1 GOTO .e_18
00001340                           378  ; --------- goto e_17               
00001340  4EF8 12DC                379              JMP         .e_17       ; goto .e_17
00001344                           380  ; --------- e_18: skip              
00001344                           381                                      
00001344                           382  ; --------- rtn e_mcd2, resultado_1  
00001344  2F78 1010 0004           383  .e_18:      MOVE.L      resultado_1, 4(SP) ; PUSH INTO STACK resultado_1
0000134A  4E75                     384              RTS                     ; RETURN TO SUBROUTINE e_mcd2
0000134C                           385  
0000134C                           386  
0000134C                           387              END MCD                 ; Fin del programa

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A                   1000
A0                  1062
A_1                 1026
A_2                 1036
A_3                 102E
B                   1004
B0                  1022
B_1                 1032
B_2                 102A
B_3                 103A
C1                  105E
C2                  1066
C3                  106A
E_INICIO            1088
E_MCD1              10F0
E_MCD1:E            1108
E_MCD1:E_1          11A6
E_MCD1:E_3          1124
E_MCD1:E_4          112E
E_MCD1:E_5          1158
E_MCD1:E_6          1162
E_MCD1:E_7          11A2
E_MCD1:E_8          118C
E_MCD2              1270
E_MCD2:E_13         1298
E_MCD2:E_14         12A2
E_MCD2:E_15         12D6
E_MCD2:E_16         12C6
E_MCD2:E_17         12DC
E_MCD2:E_18         1344
E_MCD2:E_20         1328
E_MCD2:E_21         1332
E_MCM               11AE
E_MCM:E_10          11E0
E_MCM:E_11          1214
E_MCM:E_12          1204
E_MCM:E_9           11D6
MCD                 107E
NUM1                103E
NUM1_1              101A
NUM2                1042
NUM2_1              101E
RESULTADO           1046
RESULTADO_1         1010
T_10                1076
T_11                107A
T_12                1072
T_13                100E
T_15                106E
T_16                1014
T_17                1018
T_2                 104A
T_3                 1052
T_4                 104E
T_5                 1008
T_6                 100A
T_7                 105A
T_8                 1056
T_9                 100C
