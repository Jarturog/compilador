KW_METHOD: f
TYPE_VOID: vacio
KW_MAIN: inicio
SYM_LPAREN: (
SYM_RPAREN: )
SYM_LKEY: {
TYPE_INT: ent
ID: a
OP_ASIG: :
VAL_DECIMAL: 16
SYM_COMMA: ,
ID: b
OP_ASIG: :
VAL_DECIMAL: 20
SYM_ENDINSTR: ;
KW_CONST: inmut
TYPE_INT: ent
ID: c1
OP_ASIG: :
ID: mcd1
SYM_LPAREN: (
ID: a
SYM_COMMA: ,
ID: b
SYM_RPAREN: )
SYM_COMMA: ,
ID: c2
OP_ASIG: :
ID: mcd2
SYM_LPAREN: (
ID: a
SYM_COMMA: ,
ID: b
SYM_RPAREN: )
SYM_ENDINSTR: ;
SYM_RKEY: }
KW_METHOD: f
TYPE_INT: ent
ID: mcd1
SYM_LPAREN: (
TYPE_INT: ent
ID: a0
SYM_COMMA: ,
TYPE_INT: ent
ID: b0
SYM_RPAREN: )
SYM_LKEY: {
TYPE_INT: ent
ID: a
SYM_COMMA: ,
ID: b
SYM_ENDINSTR: ;
ID: a
OP_ASIG: :
ID: a0
SYM_ENDINSTR: ;
ID: b
OP_ASIG: :
ID: b0
SYM_ENDINSTR: ;
KW_WHILE: loop
SYM_LPAREN: (
ID: a
OP_DIFERENT: /=
ID: b
SYM_RPAREN: )
SYM_LKEY: {
KW_IF: si
SYM_LPAREN: (
ID: a
OP_MAYOR: >
ID: b
SYM_RPAREN: )
SYM_LKEY: {
ID: a
OP_RES_ASSIGNMENT: -:
ID: b
SYM_ENDINSTR: ;
SYM_RKEY: }
KW_ELSE: no
SYM_LKEY: {
ID: b
OP_RES_ASSIGNMENT: -:
ID: a
SYM_ENDINSTR: ;
SYM_RKEY: }
SYM_RKEY: }
KW_RETURN: pop
ID: a
SYM_ENDINSTR: ;
SYM_RKEY: }
KW_METHOD: f
TYPE_INT: ent
ID: mcm
SYM_LPAREN: (
TYPE_INT: ent
ID: num1
SYM_COMMA: ,
TYPE_INT: ent
ID: num2
SYM_RPAREN: )
SYM_LKEY: {
TYPE_INT: ent
ID: a
SYM_COMMA: ,
ID: b
SYM_ENDINSTR: ;
KW_IF: si
ID: num1
OP_MAYOR: >
ID: num2
SYM_LKEY: {
ID: a
OP_ASIG: :
ID: num1
SYM_COMMA: ,
ID: b
OP_ASIG: :
ID: num2
SYM_ENDINSTR: ;
SYM_RKEY: }
KW_ELSE: no
SYM_LKEY: {
ID: a
OP_ASIG: :
ID: num2
SYM_COMMA: ,
ID: b
OP_ASIG: :
ID: num1
SYM_ENDINSTR: ;
SYM_RKEY: }
TYPE_INT: ent
ID: resultado
OP_ASIG: :
SYM_LPAREN: (
ID: a
OP_DIV: /
ID: mcd2
SYM_LPAREN: (
ID: num1
SYM_COMMA: ,
ID: num2
SYM_RPAREN: )
SYM_RPAREN: )
OP_MUL: *
ID: b
SYM_ENDINSTR: ;
KW_RETURN: pop
ID: resultado
SYM_ENDINSTR: ;
SYM_RKEY: }
KW_METHOD: f
TYPE_INT: ent
ID: mcd2
SYM_LPAREN: (
TYPE_INT: ent
ID: num1
SYM_COMMA: ,
TYPE_INT: ent
ID: num2
SYM_RPAREN: )
SYM_LKEY: {
TYPE_INT: ent
ID: a
SYM_COMMA: ,
ID: b
SYM_ENDINSTR: ;
KW_IF: si
ID: num1
OP_MAYOR: >
ID: num2
SYM_LKEY: {
ID: a
OP_ASIG: :
ID: num1
SYM_COMMA: ,
ID: b
OP_ASIG: :
ID: num2
SYM_ENDINSTR: ;
SYM_RKEY: }
KW_ELSE: no
SYM_LKEY: {
ID: a
OP_ASIG: :
ID: num2
SYM_COMMA: ,
ID: b
OP_ASIG: :
ID: num1
SYM_ENDINSTR: ;
SYM_RKEY: }
TYPE_INT: ent
ID: resultado
OP_ASIG: :
VAL_DECIMAL: 0
SYM_ENDINSTR: ;
KW_WHILE: loop
SYM_LKEY: {
ID: resultado
OP_ASIG: :
ID: b
SYM_ENDINSTR: ;
ID: b
OP_ASIG: :
ID: a
OP_MOD: \
ID: b
SYM_ENDINSTR: ;
ID: a
OP_ASIG: :
ID: resultado
SYM_ENDINSTR: ;
SYM_RKEY: }
ID: b
OP_DIFERENT: /=
VAL_DECIMAL: 0
SYM_ENDINSTR: ;
KW_RETURN: pop
ID: resultado
SYM_ENDINSTR: ;
SYM_RKEY: }
