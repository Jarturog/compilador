0000115C Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 07/02/2024 15:21:48

00000000                             1  ; ==============================================================================
00000000                             2  ; TITLE       : p
00000000                             3  ; COMPILED BY : jartu
00000000                             4  ; COMPILER BY : Juan Arturo Abaurrea Calafell
00000000                             5  ;               Dani Salanova Dmitriyev
00000000                             6  ;               Marta González Juan
00000000                             7  ; ==============================================================================
00000000                             8  
00001000                             9              ORG         $1000       ; Origen
00001000                            10  
00001000= 00000002                  11  t           DC.L 2                  ; INT
00001004= 00000003                  12  t_1         DC.L 3                  ; INT
00001008= 00000000                  13  t_5         DC.L 0                  ; INT
0000100C= 00000000                  14  t_6         DC.L 0                  ; INT
00001010= 00000000                  15  t_7         DC.L 0                  ; BOOLEAN
00001014= 00000002                  16  t_8         DC.L 2                  ; INT
00001018= 00000001                  17  t_10        DC.L 1                  ; INT
0000101C= 00000000                  18  t_11        DC.L 0                  ; BOOLEAN
00001020= 00000002                  19  t_13        DC.L 2                  ; INT
00001024= 00000002                  20  t_15        DC.L 2                  ; INT
00001028                            21  a           DS.L 1                  ; INT
0000102C                            22  t_2         DS.L 1                  ; INT
00001030                            23  t_16        DS.L 1                  ; INT
00001034                            24  t_4         DS.B 256                ; STRING
00001134= 00                        25              DC.B 0                  ; Los strings y chars acaban en 0
00001136                            26              DS.W 0                  ; No pueden haber variables en zonas de memoria impar
00001136                            27  t_3         DS.L 1                  ; INT
0000113A                            28  t_9         DS.L 1                  ; INT
0000113E                            29  x           DS.L 1                  ; INT
00001142                            30  t_14        DS.L 1                  ; INT
00001146                            31  y           DS.L 1                  ; INT
0000114A                            32  z           DS.L 1                  ; INT
0000114E                            33  t_12        DS.L 1                  ; INT
00001152                            34  
00001152                            35  ; --------- SUBROUTINES             
00001152  226F 0004                 36  e_show      MOVEA.L     4(SP), A1   ; A1 = POP FROM STACK
00001156  700D                      37              MOVE.L      #13, D0     ; Task 13 of TRAP 15: Display the NULL terminated string pointed to by (A1) with CR, LF
00001158  4E4F                      38              TRAP        #15         ; Interruption generated
0000115A  4E75                      39              RTS                     ; RETURN TO SUBROUTINE ...
0000115C                            40  
0000115C                            41  ; --------- INITIALIZATION          
0000115C                            42  p                                   ; Etiqueta inicial (main)
0000115C                            43  
0000115C  7020                      44              MOVE.L      #32, D0     ; Task 32 of TRAP 15: Hardware/Simulator
0000115E  123C 0005                 45              MOVE.B      #5, D1      ; Enable exception processing (for input/output)
00001162  4E4F                      46              TRAP        #15         ; Interruption generated
00001164  4EB9 0000116E             47              JSR         e_inicio    ; Se ejecuta el main
0000116A  FFFF FFFF                 48              SIMHALT                 ; Fin de la ejecución
0000116E                            49  
0000116E                            50  ; --------- e_inicio: skip          
0000116E                            51                                      
0000116E                            52  ; --------- pmb e_inicio            
0000116E                            53  ; --------- t = 2                   
0000116E  7002                      54  e_inicio:   MOVE.L      #2, D0      ; D0 = #2
00001170  21C0 1000                 55              MOVE.L      D0, t       ; t = D0
00001174                            56  ; --------- param_s t               
00001174  2038 1000                 57              MOVE.L      t, D0       ; D0 = t
00001178  2F00                      58              MOVE.L      D0, -(SP)   ; PUSH INTO STACK D0
0000117A                            59  ; --------- t_1 = 3                 
0000117A  7003                      60              MOVE.L      #3, D0      ; D0 = #3
0000117C  21C0 1004                 61              MOVE.L      D0, t_1     ; t_1 = D0
00001180                            62  ; --------- param_s t_1             
00001180  2038 1004                 63              MOVE.L      t_1, D0     ; D0 = t_1
00001184  2F00                      64              MOVE.L      D0, -(SP)   ; PUSH INTO STACK D0
00001186                            65  ; --------- call e_product, t_2     
00001186  598F                      66              SUBA.L      #4, SP      ; SP = SP + 4
00001188  4EB9 000011BE             67              JSR         e_product   ; JUMP TO SUBROUTINE e_product
0000118E  201F                      68              MOVE.L      (SP)+, D0   ; D0 = POP FROM STACK
00001190  21C0 102C                 69              MOVE.L      D0, t_2     ; t_2 = D0
00001194  508F                      70              ADDA.L      #8, SP      ; SP = SP + 8
00001196                            71  ; --------- a = t_2                 
00001196  2038 102C                 72              MOVE.L      t_2, D0     ; D0 = t_2
0000119A  21C0 1028                 73              MOVE.L      D0, a       ; a = D0
0000119E                            74  ; --------- t_3 = a                 
0000119E  2038 1028                 75              MOVE.L      a, D0       ; D0 = a
000011A2  21C0 1136                 76              MOVE.L      D0, t_3     ; t_3 = D0
000011A6                            77  ; --------- t_4 = t_3               
000011A6  2038 1136                 78              MOVE.L      t_3, D0     ; D0 = t_3
000011AA  E098                      79              ROR.L       #8, D0      ; move to the left so it is followed by 0's, since it is a casting from char to string
000011AC  21C0 1034                 80              MOVE.L      D0, t_4     ; t_4 = D0
000011B0                            81  ; --------- param_s t_4             
000011B0  41F8 1034                 82              LEA.L       t_4, A0     ; A0 = t_4
000011B4  2F08                      83              MOVE.L      A0, -(SP)   ; PUSH INTO STACK A0
000011B6                            84  ; --------- call e_show             
000011B6  4EB8 1152                 85              JSR         e_show      ; JUMP TO SUBROUTINE e_show
000011BA  588F                      86              ADDA.L      #4, SP      ; SP = SP + 4
000011BC                            87  ; --------- rtn e_inicio            
000011BC  4E75                      88              RTS                     ; RETURN TO SUBROUTINE e_inicio
000011BE                            89  
000011BE                            90  
000011BE                            91  
000011BE                            92  
000011BE                            93  ; --------- e_product: skip         
000011BE                            94                                      
000011BE                            95  ; --------- pmb e_product           
000011BE  202F 0008                 96  e_product:  MOVE.L      8(SP), D0   ; D0 = POP FROM STACK
000011C2  21C0 1146                 97              MOVE.L      D0, y       ; y = D0
000011C6  202F 000C                 98              MOVE.L      12(SP), D0  ; D0 = POP FROM STACK
000011CA  21C0 113E                 99              MOVE.L      D0, x       ; x = D0
000011CE                           100  ; --------- t_5 = 0                 
000011CE  7000                     101              MOVE.L      #0, D0      ; D0 = #0
000011D0  21C0 1008                102              MOVE.L      D0, t_5     ; t_5 = D0
000011D4                           103  ; --------- z = t_5                 
000011D4  2038 1008                104              MOVE.L      t_5, D0     ; D0 = t_5
000011D8  21C0 114A                105              MOVE.L      D0, z       ; z = D0
000011DC                           106  ; --------- e: skip                 
000011DC                           107                                      
000011DC                           108  ; --------- t_6 = 0                 
000011DC  7000                     109  .e:         MOVE.L      #0, D0      ; D0 = #0
000011DE  21C0 100C                110              MOVE.L      D0, t_6     ; t_6 = D0
000011E2                           111  ; --------- if x /= t_6 goto e_3    
000011E2  2038 113E                112              MOVE.L      x, D0       ; D0 = x
000011E6  2238 100C                113              MOVE.L      t_6, D1     ; D1 = t_6
000011EA  B081                     114              CMP.L       D1, D0      ; UPDATE FLAGS WITH D0 - D1
000011EC  6600 000E                115              BNE         .e_3        ; IF Z FLAG = 0 GOTO .e_3
000011F0                           116  ; --------- t_7 = 0                 
000011F0  7000                     117              MOVE.L      #0, D0      ; D0 = #0
000011F2  21C0 1010                118              MOVE.L      D0, t_7     ; t_7 = D0
000011F6                           119  ; --------- goto e_4                
000011F6  4EF9 00001202            120              JMP         .e_4        ; goto .e_4
000011FC                           121  ; --------- e_3: skip               
000011FC                           122                                      
000011FC                           123  ; --------- t_7 = -1                
000011FC  70FF                     124  .e_3:       MOVE.L      #-1, D0     ; D0 = #-1
000011FE  21C0 1010                125              MOVE.L      D0, t_7     ; t_7 = D0
00001202                           126  ; --------- e_4: skip               
00001202                           127                                      
00001202                           128  ; --------- if t_7 == 0 goto e_1    
00001202  2038 1010                129  .e_4:       MOVE.L      t_7, D0     ; D0 = t_7
00001206  7200                     130              MOVE.L      #0, D1      ; D1 = #0
00001208  B081                     131              CMP.L       D1, D0      ; UPDATE FLAGS WITH D0 - D1
0000120A  6700 00BE                132              BEQ         .e_1        ; IF Z FLAG = 1 GOTO .e_1
0000120E                           133  ; --------- t_8 = 2                 
0000120E  7002                     134              MOVE.L      #2, D0      ; D0 = #2
00001210  21C0 1014                135              MOVE.L      D0, t_8     ; t_8 = D0
00001214                           136  ; --------- t_9 = x mod t_8         
00001214  2038 113E                137              MOVE.L      x, D0       ; D0 = x
00001218  2238 1014                138              MOVE.L      t_8, D1     ; D1 = t_8
0000121C  81C1                     139              DIVS.W      D1, D0      ; D0.h = D0 % D1. D0.l = D0 / D1
0000121E  E088                     140              LSR.L       #8, D0      ; D0.l = D0.h
00001220  E088                     141              LSR.L       #8, D0      ; D0.l = D0.h
00001222  21C0 113A                142              MOVE.L      D0, t_9     ; t_9 = D0
00001226                           143  ; --------- t_10 = 1                
00001226  7001                     144              MOVE.L      #1, D0      ; D0 = #1
00001228  21C0 1018                145              MOVE.L      D0, t_10    ; t_10 = D0
0000122C                           146  ; --------- if t_9 == t_10 goto e_5  
0000122C  2038 113A                147              MOVE.L      t_9, D0     ; D0 = t_9
00001230  2238 1018                148              MOVE.L      t_10, D1    ; D1 = t_10
00001234  B081                     149              CMP.L       D1, D0      ; UPDATE FLAGS WITH D0 - D1
00001236  6700 000E                150              BEQ         .e_5        ; IF Z FLAG = 1 GOTO .e_5
0000123A                           151  ; --------- t_11 = 0                
0000123A  7000                     152              MOVE.L      #0, D0      ; D0 = #0
0000123C  21C0 101C                153              MOVE.L      D0, t_11    ; t_11 = D0
00001240                           154  ; --------- goto e_6                
00001240  4EF9 0000124C            155              JMP         .e_6        ; goto .e_6
00001246                           156  ; --------- e_5: skip               
00001246                           157                                      
00001246                           158  ; --------- t_11 = -1               
00001246  70FF                     159  .e_5:       MOVE.L      #-1, D0     ; D0 = #-1
00001248  21C0 101C                160              MOVE.L      D0, t_11    ; t_11 = D0
0000124C                           161  ; --------- e_6: skip               
0000124C                           162                                      
0000124C                           163  ; --------- if t_11 == 0 goto e_8   
0000124C  2038 101C                164  .e_6:       MOVE.L      t_11, D0    ; D0 = t_11
00001250  7200                     165              MOVE.L      #0, D1      ; D1 = #0
00001252  B081                     166              CMP.L       D1, D0      ; UPDATE FLAGS WITH D0 - D1
00001254  6700 001E                167              BEQ         .e_8        ; IF Z FLAG = 1 GOTO .e_8
00001258                           168  ; --------- t_12 = z + y            
00001258  2038 114A                169              MOVE.L      z, D0       ; D0 = z
0000125C  2238 1146                170              MOVE.L      y, D1       ; D1 = y
00001260  D280                     171              ADD.L       D0, D1      ; D1 = D1 + D0
00001262  21C1 114E                172              MOVE.L      D1, t_12    ; t_12 = D1
00001266                           173  ; --------- z = t_12                
00001266  2038 114E                174              MOVE.L      t_12, D0    ; D0 = t_12
0000126A  21C0 114A                175              MOVE.L      D0, z       ; z = D0
0000126E                           176  ; --------- goto e_7                
0000126E  4EF9 00001274            177              JMP         .e_7        ; goto .e_7
00001274                           178  ; --------- e_8: skip               
00001274                           179                                      
00001274                           180  ; --------- e_7: skip               
00001274                           181  .e_8:                               
00001274                           182  ; --------- t_13 = 2                
00001274  7002                     183  .e_7:       MOVE.L      #2, D0      ; D0 = #2
00001276  21C0 1020                184              MOVE.L      D0, t_13    ; t_13 = D0
0000127A                           185  ; --------- t_14 = y * t_13         
0000127A                           186  ;           A*B = A1A0*B1B0 = A0*B0 + A1*B1 * 2^16  
0000127A  2038 1146                187              MOVE.L      y, D0       ; D0 = y
0000127E  2238 1020                188              MOVE.L      t_13, D1    ; D1 = t_13
00001282  3400                     189              MOVE.W      D0, D2      ; D2.L = D1.L
00001284  3601                     190              MOVE.W      D1, D3      ; D1.L = D3.L
00001286  E080                     191              ASR.L       #8, D0      ; FIRST 8 BITS OF D0 MOVED RIGHT
00001288  E080                     192              ASR.L       #8, D0      ; D0.L = old D0.H
0000128A  E081                     193              ASR.L       #8, D1      ; FIRST 8 BITS OF D1 MOVED RIGHT
0000128C  E081                     194              ASR.L       #8, D1      ; D1.L = old D1.H
0000128E  C1C1                     195              MULS.W      D1, D0      ; D0 = D0 * D1
00001290  C7C2                     196              MULS.W      D2, D3      ; D3 = D2 * D3
00001292  E180                     197              ASL.L       #8, D0      ; FIRST 8 BITS OF D0 MOVED LEFT
00001294  E180                     198              ASL.L       #8, D0      ; D0.H = old D0.L
00001296  D083                     199              ADD.L       D3, D0      ; D0 = D0 + D3
00001298  21C0 1142                200              MOVE.L      D0, t_14    ; t_14 = D0
0000129C                           201  ; --------- y = t_14                
0000129C  2038 1142                202              MOVE.L      t_14, D0    ; D0 = t_14
000012A0  21C0 1146                203              MOVE.L      D0, y       ; y = D0
000012A4                           204  ; --------- t_15 = 2                
000012A4  7002                     205              MOVE.L      #2, D0      ; D0 = #2
000012A6  21C0 1024                206              MOVE.L      D0, t_15    ; t_15 = D0
000012AA                           207  ; --------- t_16 = x / t_15         
000012AA  2038 113E                208              MOVE.L      x, D0       ; D0 = x
000012AE  2238 1024                209              MOVE.L      t_15, D1    ; D1 = t_15
000012B2  81C1                     210              DIVS.W      D1, D0      ; D0.h = D0 % D1. D0.l = D0 / D1
000012B4  C0BC 0000FFFF            211              AND.L       #$0000FFFF, D0 ; Mask
000012BA  21C0 1030                212              MOVE.L      D0, t_16    ; t_16 = D0
000012BE                           213  ; --------- x = t_16                
000012BE  2038 1030                214              MOVE.L      t_16, D0    ; D0 = t_16
000012C2  21C0 113E                215              MOVE.L      D0, x       ; x = D0
000012C6                           216  ; --------- e_2: skip               
000012C6                           217                                      
000012C6                           218  ; --------- goto e                  
000012C6  4EF8 11DC                219  .e_2:       JMP         .e          ; goto .e
000012CA                           220  ; --------- e_1: skip               
000012CA                           221                                      
000012CA                           222  ; --------- rtn e_product, z        
000012CA  2038 114A                223  .e_1:       MOVE.L      z, D0       ; D0 = z
000012CE  2F40 0004                224              MOVE.L      D0, 4(SP)   ; PUSH INTO STACK D0
000012D2  4E75                     225              RTS                     ; RETURN TO SUBROUTINE e_product
000012D4                           226  
000012D4                           227  
000012D4                           228              END p                   ; Fin del programa

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A                   1028
E_INICIO            116E
E_PRODUCT           11BE
E_PRODUCT:E         11DC
E_PRODUCT:E_1       12CA
E_PRODUCT:E_2       12C6
E_PRODUCT:E_3       11FC
E_PRODUCT:E_4       1202
E_PRODUCT:E_5       1246
E_PRODUCT:E_6       124C
E_PRODUCT:E_7       1274
E_PRODUCT:E_8       1274
E_SHOW              1152
P                   115C
T                   1000
T_1                 1004
T_10                1018
T_11                101C
T_12                114E
T_13                1020
T_14                1142
T_15                1024
T_16                1030
T_2                 102C
T_3                 1136
T_4                 1034
T_5                 1008
T_6                 100C
T_7                 1010
T_8                 1014
T_9                 113A
X                   113E
Y                   1146
Z                   114A
