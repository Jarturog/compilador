00001052 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 07/02/2024 15:15:01

00000000                             1  ; ==============================================================================
00000000                             2  ; TITLE       : p
00000000                             3  ; COMPILED BY : jartu
00000000                             4  ; COMPILER BY : Juan Arturo Abaurrea Calafell
00000000                             5  ;               Dani Salanova Dmitriyev
00000000                             6  ;               Marta González Juan
00000000                             7  ; ==============================================================================
00000000                             8  
00001000                             9              ORG         $1000       ; Origen
00001000                            10  
00001000= 00000002                  11  t           DC.L 2                  ; INT
00001004= 00000003                  12  t_1         DC.L 3                  ; INT
00001008= 00000000                  13  z           DC.L 0                  ; INT
0000100C= 00000000                  14  t_6         DC.L 0                  ; INT
00001010= 00000000                  15  t_7         DC.L 0                  ; BOOLEAN
00001014= 00000002                  16  t_8         DC.L 2                  ; INT
00001018= 00000001                  17  t_10        DC.L 1                  ; INT
0000101C= 00000000                  18  t_11        DC.L 0                  ; BOOLEAN
00001020= 00000002                  19  t_13        DC.L 2                  ; INT
00001024= 00000002                  20  t_15        DC.L 2                  ; INT
00001028                            21  t_2         DS.L 1                  ; INT
0000102C                            22  t_16        DS.L 1                  ; INT
00001030                            23  t_4         DS.L 1                  ; INT
00001034                            24  t_9         DS.L 1                  ; INT
00001038                            25  x           DS.L 1                  ; INT
0000103C                            26  t_14        DS.L 1                  ; INT
00001040                            27  y           DS.L 1                  ; INT
00001044                            28  t_12        DS.L 1                  ; INT
00001048                            29  
00001048                            30  ; --------- SUBROUTINES             
00001048  226F 0004                 31  e_show      MOVEA.L     4(SP), A1   ; A1 = POP FROM STACK
0000104C  700D                      32              MOVE.L      #13, D0     ; Task 13 of TRAP 15: Display the NULL terminated string pointed to by (A1) with CR, LF
0000104E  4E4F                      33              TRAP        #15         ; Interruption generated
00001050  4E75                      34              RTS                     ; RETURN TO SUBROUTINE ...
00001052                            35  
00001052                            36  ; --------- INITIALIZATION          
00001052                            37  p                                   ; Etiqueta inicial (main)
00001052                            38  
00001052  7020                      39              MOVE.L      #32, D0     ; Task 32 of TRAP 15: Hardware/Simulator
00001054  123C 0005                 40              MOVE.B      #5, D1      ; Enable exception processing (for input/output)
00001058  4E4F                      41              TRAP        #15         ; Interruption generated
0000105A  4EB9 00001064             42              JSR         e_inicio    ; Se ejecuta el main
00001060  FFFF FFFF                 43              SIMHALT                 ; Fin de la ejecución
00001064                            44  
00001064                            45  ; --------- e_inicio: skip          
00001064                            46                                      
00001064                            47  ; --------- pmb e_inicio            
00001064                            48  ; --------- t = 2                   
00001064  7002                      49  e_inicio:   MOVE.L      #2, D0      ; D0 = #2
00001066  21C0 1000                 50              MOVE.L      D0, t       ; t = D0
0000106A                            51  ; --------- param_s t               
0000106A  2038 1000                 52              MOVE.L      t, D0       ; D0 = t
0000106E  2F00                      53              MOVE.L      D0, -(SP)   ; PUSH INTO STACK D0
00001070                            54  ; --------- t_1 = 3                 
00001070  7003                      55              MOVE.L      #3, D0      ; D0 = #3
00001072  21C0 1004                 56              MOVE.L      D0, t_1     ; t_1 = D0
00001076                            57  ; --------- param_s t_1             
00001076  2038 1004                 58              MOVE.L      t_1, D0     ; D0 = t_1
0000107A  2F00                      59              MOVE.L      D0, -(SP)   ; PUSH INTO STACK D0
0000107C                            60  ; --------- call e_product, t_2     
0000107C  598F                      61              SUBA.L      #4, SP      ; SP = SP + 4
0000107E  4EB9 000010A2             62              JSR         e_product   ; JUMP TO SUBROUTINE e_product
00001084  201F                      63              MOVE.L      (SP)+, D0   ; D0 = POP FROM STACK
00001086  21C0 1028                 64              MOVE.L      D0, t_2     ; t_2 = D0
0000108A  508F                      65              ADDA.L      #8, SP      ; SP = SP + 8
0000108C                            66  ; --------- t_4 = t_2               
0000108C  2038 1028                 67              MOVE.L      t_2, D0     ; D0 = t_2
00001090  21C0 1030                 68              MOVE.L      D0, t_4     ; t_4 = D0
00001094                            69  ; --------- param_s t_4             
00001094  41F8 1030                 70              LEA.L       t_4, A0     ; A0 = t_4
00001098  2F08                      71              MOVE.L      A0, -(SP)   ; PUSH INTO STACK A0
0000109A                            72  ; --------- call e_show             
0000109A  4EB8 1048                 73              JSR         e_show      ; JUMP TO SUBROUTINE e_show
0000109E  588F                      74              ADDA.L      #4, SP      ; SP = SP + 4
000010A0                            75  ; --------- rtn e_inicio            
000010A0  4E75                      76              RTS                     ; RETURN TO SUBROUTINE e_inicio
000010A2                            77  
000010A2                            78  
000010A2                            79  
000010A2                            80  
000010A2                            81  ; --------- e_product: skip         
000010A2                            82                                      
000010A2                            83  ; --------- pmb e_product           
000010A2  202F 0008                 84  e_product:  MOVE.L      8(SP), D0   ; D0 = POP FROM STACK
000010A6  21C0 1040                 85              MOVE.L      D0, y       ; y = D0
000010AA  202F 000C                 86              MOVE.L      12(SP), D0  ; D0 = POP FROM STACK
000010AE  21C0 1038                 87              MOVE.L      D0, x       ; x = D0
000010B2                            88  ; --------- z = 0                   
000010B2  7000                      89              MOVE.L      #0, D0      ; D0 = #0
000010B4  21C0 1008                 90              MOVE.L      D0, z       ; z = D0
000010B8                            91  ; --------- e: skip                 
000010B8                            92                                      
000010B8                            93  ; --------- t_6 = 0                 
000010B8  7000                      94  .e:         MOVE.L      #0, D0      ; D0 = #0
000010BA  21C0 100C                 95              MOVE.L      D0, t_6     ; t_6 = D0
000010BE                            96  ; --------- if x /= t_6 goto e_3    
000010BE  2038 1038                 97              MOVE.L      x, D0       ; D0 = x
000010C2  2238 100C                 98              MOVE.L      t_6, D1     ; D1 = t_6
000010C6  B081                      99              CMP.L       D1, D0      ; UPDATE FLAGS WITH D0 - D1
000010C8  6600 000E                100              BNE         .e_3        ; IF Z FLAG = 0 GOTO .e_3
000010CC                           101  ; --------- t_7 = 0                 
000010CC  7000                     102              MOVE.L      #0, D0      ; D0 = #0
000010CE  21C0 1010                103              MOVE.L      D0, t_7     ; t_7 = D0
000010D2                           104  ; --------- goto e_4                
000010D2  4EF9 000010DE            105              JMP         .e_4        ; goto .e_4
000010D8                           106  ; --------- e_3: skip               
000010D8                           107                                      
000010D8                           108  ; --------- t_7 = -1                
000010D8  70FF                     109  .e_3:       MOVE.L      #-1, D0     ; D0 = #-1
000010DA  21C0 1010                110              MOVE.L      D0, t_7     ; t_7 = D0
000010DE                           111  ; --------- e_4: skip               
000010DE                           112                                      
000010DE                           113  ; --------- if t_7 == 0 goto e_1    
000010DE  2038 1010                114  .e_4:       MOVE.L      t_7, D0     ; D0 = t_7
000010E2  7200                     115              MOVE.L      #0, D1      ; D1 = #0
000010E4  B081                     116              CMP.L       D1, D0      ; UPDATE FLAGS WITH D0 - D1
000010E6  6700 00BE                117              BEQ         .e_1        ; IF Z FLAG = 1 GOTO .e_1
000010EA                           118  ; --------- t_8 = 2                 
000010EA  7002                     119              MOVE.L      #2, D0      ; D0 = #2
000010EC  21C0 1014                120              MOVE.L      D0, t_8     ; t_8 = D0
000010F0                           121  ; --------- t_9 = x mod t_8         
000010F0  2038 1038                122              MOVE.L      x, D0       ; D0 = x
000010F4  2238 1014                123              MOVE.L      t_8, D1     ; D1 = t_8
000010F8  81C1                     124              DIVS.W      D1, D0      ; D0.h = D0 % D1. D0.l = D0 / D1
000010FA  E088                     125              LSR.L       #8, D0      ; D0.l = D0.h
000010FC  E088                     126              LSR.L       #8, D0      ; D0.l = D0.h
000010FE  21C0 1034                127              MOVE.L      D0, t_9     ; t_9 = D0
00001102                           128  ; --------- t_10 = 1                
00001102  7001                     129              MOVE.L      #1, D0      ; D0 = #1
00001104  21C0 1018                130              MOVE.L      D0, t_10    ; t_10 = D0
00001108                           131  ; --------- if t_9 == t_10 goto e_5  
00001108  2038 1034                132              MOVE.L      t_9, D0     ; D0 = t_9
0000110C  2238 1018                133              MOVE.L      t_10, D1    ; D1 = t_10
00001110  B081                     134              CMP.L       D1, D0      ; UPDATE FLAGS WITH D0 - D1
00001112  6700 000E                135              BEQ         .e_5        ; IF Z FLAG = 1 GOTO .e_5
00001116                           136  ; --------- t_11 = 0                
00001116  7000                     137              MOVE.L      #0, D0      ; D0 = #0
00001118  21C0 101C                138              MOVE.L      D0, t_11    ; t_11 = D0
0000111C                           139  ; --------- goto e_6                
0000111C  4EF9 00001128            140              JMP         .e_6        ; goto .e_6
00001122                           141  ; --------- e_5: skip               
00001122                           142                                      
00001122                           143  ; --------- t_11 = -1               
00001122  70FF                     144  .e_5:       MOVE.L      #-1, D0     ; D0 = #-1
00001124  21C0 101C                145              MOVE.L      D0, t_11    ; t_11 = D0
00001128                           146  ; --------- e_6: skip               
00001128                           147                                      
00001128                           148  ; --------- if t_11 == 0 goto e_8   
00001128  2038 101C                149  .e_6:       MOVE.L      t_11, D0    ; D0 = t_11
0000112C  7200                     150              MOVE.L      #0, D1      ; D1 = #0
0000112E  B081                     151              CMP.L       D1, D0      ; UPDATE FLAGS WITH D0 - D1
00001130  6700 001E                152              BEQ         .e_8        ; IF Z FLAG = 1 GOTO .e_8
00001134                           153  ; --------- t_12 = z + y            
00001134  2038 1008                154              MOVE.L      z, D0       ; D0 = z
00001138  2238 1040                155              MOVE.L      y, D1       ; D1 = y
0000113C  D280                     156              ADD.L       D0, D1      ; D1 = D1 + D0
0000113E  21C1 1044                157              MOVE.L      D1, t_12    ; t_12 = D1
00001142                           158  ; --------- z = t_12                
00001142  2038 1044                159              MOVE.L      t_12, D0    ; D0 = t_12
00001146  21C0 1008                160              MOVE.L      D0, z       ; z = D0
0000114A                           161  ; --------- goto e_7                
0000114A  4EF9 00001150            162              JMP         .e_7        ; goto .e_7
00001150                           163  ; --------- e_8: skip               
00001150                           164                                      
00001150                           165  ; --------- e_7: skip               
00001150                           166  .e_8:                               
00001150                           167  ; --------- t_13 = 2                
00001150  7002                     168  .e_7:       MOVE.L      #2, D0      ; D0 = #2
00001152  21C0 1020                169              MOVE.L      D0, t_13    ; t_13 = D0
00001156                           170  ; --------- t_14 = y * t_13         
00001156                           171  ;           A*B = A1A0*B1B0 = A0*B0 + A1*B1 * 2^16  
00001156  2038 1040                172              MOVE.L      y, D0       ; D0 = y
0000115A  2238 1020                173              MOVE.L      t_13, D1    ; D1 = t_13
0000115E  3400                     174              MOVE.W      D0, D2      ; D2.L = D1.L
00001160  3601                     175              MOVE.W      D1, D3      ; D1.L = D3.L
00001162  E080                     176              ASR.L       #8, D0      ; FIRST 8 BITS OF D0 MOVED RIGHT
00001164  E080                     177              ASR.L       #8, D0      ; D0.L = old D0.H
00001166  E081                     178              ASR.L       #8, D1      ; FIRST 8 BITS OF D1 MOVED RIGHT
00001168  E081                     179              ASR.L       #8, D1      ; D1.L = old D1.H
0000116A  C1C1                     180              MULS.W      D1, D0      ; D0 = D0 * D1
0000116C  C7C2                     181              MULS.W      D2, D3      ; D3 = D2 * D3
0000116E  E180                     182              ASL.L       #8, D0      ; FIRST 8 BITS OF D0 MOVED LEFT
00001170  E180                     183              ASL.L       #8, D0      ; D0.H = old D0.L
00001172  D083                     184              ADD.L       D3, D0      ; D0 = D0 + D3
00001174  21C0 103C                185              MOVE.L      D0, t_14    ; t_14 = D0
00001178                           186  ; --------- y = t_14                
00001178  2038 103C                187              MOVE.L      t_14, D0    ; D0 = t_14
0000117C  21C0 1040                188              MOVE.L      D0, y       ; y = D0
00001180                           189  ; --------- t_15 = 2                
00001180  7002                     190              MOVE.L      #2, D0      ; D0 = #2
00001182  21C0 1024                191              MOVE.L      D0, t_15    ; t_15 = D0
00001186                           192  ; --------- t_16 = x / t_15         
00001186  2038 1038                193              MOVE.L      x, D0       ; D0 = x
0000118A  2238 1024                194              MOVE.L      t_15, D1    ; D1 = t_15
0000118E  81C1                     195              DIVS.W      D1, D0      ; D0.h = D0 % D1. D0.l = D0 / D1
00001190  C0BC 0000FFFF            196              AND.L       #$0000FFFF, D0 ; Mask
00001196  21C0 102C                197              MOVE.L      D0, t_16    ; t_16 = D0
0000119A                           198  ; --------- x = t_16                
0000119A  2038 102C                199              MOVE.L      t_16, D0    ; D0 = t_16
0000119E  21C0 1038                200              MOVE.L      D0, x       ; x = D0
000011A2                           201  ; --------- goto e                  
000011A2  4EF8 10B8                202              JMP         .e          ; goto .e
000011A6                           203  ; --------- e_1: skip               
000011A6                           204                                      
000011A6                           205  ; --------- rtn e_product, z        
000011A6  2038 1008                206  .e_1:       MOVE.L      z, D0       ; D0 = z
000011AA  2F40 0004                207              MOVE.L      D0, 4(SP)   ; PUSH INTO STACK D0
000011AE  4E75                     208              RTS                     ; RETURN TO SUBROUTINE e_product
000011B0                           209  
000011B0                           210  
000011B0                           211              END p                   ; Fin del programa

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
E_INICIO            1064
E_PRODUCT           10A2
E_PRODUCT:E         10B8
E_PRODUCT:E_1       11A6
E_PRODUCT:E_3       10D8
E_PRODUCT:E_4       10DE
E_PRODUCT:E_5       1122
E_PRODUCT:E_6       1128
E_PRODUCT:E_7       1150
E_PRODUCT:E_8       1150
E_SHOW              1048
P                   1052
T                   1000
T_1                 1004
T_10                1018
T_11                101C
T_12                1044
T_13                1020
T_14                103C
T_15                1024
T_16                102C
T_2                 1028
T_4                 1030
T_6                 100C
T_7                 1010
T_8                 1014
T_9                 1034
X                   1038
Y                   1040
Z                   1008
