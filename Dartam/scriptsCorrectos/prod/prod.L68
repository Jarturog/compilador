00001082 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 07/02/2024 18:50:50

00000000                             1  ; ==============================================================================
00000000                             2  ; TITLE       : prod
00000000                             3  ; COMPILED BY : jartu
00000000                             4  ; COMPILER BY : Juan Arturo Abaurrea Calafell
00000000                             5  ;               Dani Salanova Dmitriyev
00000000                             6  ;               Marta Gonz치lez Juan
00000000                             7  ; ==============================================================================
00000000                             8  
00001000                             9              ORG         $1000       ; Origen
00001000                            10  
00001000= 00000002                  11  t           DC.L 2                  ; INT
00001004= 00000003                  12  t_1         DC.L 3                  ; INT
00001008= 00000006                  13  t_3         DC.L 6                  ; INT
0000100C= 00000000                  14  t_4         DC.L 0                  ; BOOLEAN
00001010= 32 20 2A 20 33 20 ...     15  t_5         DC.B '2 * 3 = 6'        ; STRING
00001019= 00                        16              DC.B 0                  ; Los strings y chars acaban en 0
0000101A                            17              DS.W 0                  ; No pueden haber variables en zonas de memoria impar
Line 18 ERROR: Invalid syntax
0000101A=                           18  t_6         DC.B '6 est치 almacenado en 'a''  ; STRING
0000101A= 00                        19              DC.B 0                  ; Los strings y chars acaban en 0
0000101C                            20              DS.W 0                  ; No pueden haber variables en zonas de memoria impar
0000101C= 45 52 52 4F 52 3A ...     21  t_7         DC.B 'ERROR: 2*3 no ha dado 6'  ; STRING
00001033= 00                        22              DC.B 0                  ; Los strings y chars acaban en 0
00001034                            23              DS.W 0                  ; No pueden haber variables en zonas de memoria impar
00001034= 00000000                  24  t_8         DC.L 0                  ; INT
00001038= 00000000                  25  t_9         DC.L 0                  ; INT
0000103C= 00000000                  26  t_10        DC.L 0                  ; BOOLEAN
00001040= 00000002                  27  t_11        DC.L 2                  ; INT
00001044= 00000001                  28  t_13        DC.L 1                  ; INT
00001048= 00000000                  29  t_14        DC.L 0                  ; BOOLEAN
0000104C= 00000002                  30  t_16        DC.L 2                  ; INT
00001050= 00000002                  31  t_18        DC.L 2                  ; INT
00001054                            32  a           DS.L 1                  ; INT
00001058                            33  t_19        DS.L 1                  ; INT
0000105C                            34  t_2         DS.L 1                  ; INT
00001060                            35  t_17        DS.L 1                  ; INT
00001064                            36  x           DS.L 1                  ; INT
00001068                            37  y           DS.L 1                  ; INT
0000106C                            38  t_15        DS.L 1                  ; INT
00001070                            39  z           DS.L 1                  ; INT
00001074                            40  t_12        DS.L 1                  ; INT
00001078                            41  
00001078                            42  ; --------- SUBROUTINES             
00001078  226F 0004                 43  e_show      MOVEA.L     4(SP), A1   ; A1 = POP FROM STACK
0000107C  700D                      44              MOVE.L      #13, D0     ; Task 13 of TRAP 15: Display the NULL terminated string pointed to by (A1) with CR, LF
0000107E  4E4F                      45              TRAP        #15         ; Interruption generated
00001080  4E75                      46              RTS                     ; RETURN TO SUBROUTINE ...
00001082                            47  
00001082                            48  ; --------- INITIALIZATION          
00001082                            49  prod                                ; Etiqueta inicial (main)
00001082                            50  
00001082  7020                      51              MOVE.L      #32, D0     ; Task 32 of TRAP 15: Hardware/Simulator
00001084  123C 0005                 52              MOVE.B      #5, D1      ; Enable exception processing (for input/output)
00001088  4E4F                      53              TRAP        #15         ; Interruption generated
0000108A  4EB9 00001094             54              JSR         e_inicio    ; Se ejecuta el main
00001090  FFFF FFFF                 55              SIMHALT                 ; Fin de la ejecuci칩n
00001094                            56  
00001094                            57  ; --------- e_inicio: skip          
00001094                            58                                      
00001094                            59  ; --------- pmb e_inicio            
00001094                            60  ; --------- t = 2                   
00001094  7002                      61  e_inicio:   MOVE.L      #2, D0      ; D0 = #2
00001096  21C0 1000                 62              MOVE.L      D0, t       ; t = D0
0000109A                            63  ; --------- param_s t               
0000109A  2038 1000                 64              MOVE.L      t, D0       ; D0 = t
0000109E  2F00                      65              MOVE.L      D0, -(SP)   ; PUSH INTO STACK D0
000010A0                            66  ; --------- t_1 = 3                 
000010A0  7003                      67              MOVE.L      #3, D0      ; D0 = #3
000010A2  21C0 1004                 68              MOVE.L      D0, t_1     ; t_1 = D0
000010A6                            69  ; --------- param_s t_1             
000010A6  2038 1004                 70              MOVE.L      t_1, D0     ; D0 = t_1
000010AA  2F00                      71              MOVE.L      D0, -(SP)   ; PUSH INTO STACK D0
000010AC                            72  ; --------- call e_product, t_2     
000010AC  598F                      73              SUBA.L      #4, SP      ; SP = SP + 4
000010AE  4EB9 00001122             74              JSR         e_product   ; JUMP TO SUBROUTINE e_product
000010B4  201F                      75              MOVE.L      (SP)+, D0   ; D0 = POP FROM STACK
000010B6  21C0 105C                 76              MOVE.L      D0, t_2     ; t_2 = D0
000010BA  508F                      77              ADDA.L      #8, SP      ; SP = SP + 8
000010BC                            78  ; --------- a = t_2                 
000010BC  2038 105C                 79              MOVE.L      t_2, D0     ; D0 = t_2
000010C0  21C0 1054                 80              MOVE.L      D0, a       ; a = D0
000010C4                            81  ; --------- t_3 = 6                 
000010C4  7006                      82              MOVE.L      #6, D0      ; D0 = #6
000010C6  21C0 1008                 83              MOVE.L      D0, t_3     ; t_3 = D0
000010CA                            84  ; --------- if a == t_3 goto e      
000010CA  2038 1054                 85              MOVE.L      a, D0       ; D0 = a
000010CE  2238 1008                 86              MOVE.L      t_3, D1     ; D1 = t_3
000010D2  B081                      87              CMP.L       D1, D0      ; UPDATE FLAGS WITH D0 - D1
000010D4  6700 000E                 88              BEQ         .e          ; IF Z FLAG = 1 GOTO .e
000010D8                            89  ; --------- t_4 = 0                 
000010D8  7000                      90              MOVE.L      #0, D0      ; D0 = #0
000010DA  21C0 100C                 91              MOVE.L      D0, t_4     ; t_4 = D0
000010DE                            92  ; --------- goto e_1                
000010DE  4EF9 000010EA             93              JMP         .e_1        ; goto .e_1
000010E4                            94  ; --------- e: skip                 
000010E4                            95                                      
000010E4                            96  ; --------- t_4 = -1                
000010E4  70FF                      97  .e:         MOVE.L      #-1, D0     ; D0 = #-1
000010E6  21C0 100C                 98              MOVE.L      D0, t_4     ; t_4 = D0
000010EA                            99  ; --------- e_1: skip               
000010EA                           100                                      
000010EA                           101  ; --------- if t_4 == 0 goto e_3    
000010EA  2038 100C                102  .e_1:       MOVE.L      t_4, D0     ; D0 = t_4
000010EE  7200                     103              MOVE.L      #0, D1      ; D1 = #0
000010F0  B081                     104              CMP.L       D1, D0      ; UPDATE FLAGS WITH D0 - D1
000010F2  6700 0020                105              BEQ         .e_3        ; IF Z FLAG = 1 GOTO .e_3
000010F6                           106  ; --------- t_5 = 2 * 3 = 6         
000010F6                           107  ; --------- param_s t_5             
000010F6  41F8 1010                108              LEA.L       t_5, A0     ; A0 = t_5
000010FA  2F08                     109              MOVE.L      A0, -(SP)   ; PUSH INTO STACK A0
000010FC                           110  ; --------- call e_show             
000010FC  4EB8 1078                111              JSR         e_show      ; JUMP TO SUBROUTINE e_show
00001100  588F                     112              ADDA.L      #4, SP      ; SP = SP + 4
00001102                           113  ; --------- t_6 = 6 est치 almacenado en 'a'  
00001102                           114  ; --------- param_s t_6             
00001102  41F8 101A                115              LEA.L       t_6, A0     ; A0 = t_6
00001106  2F08                     116              MOVE.L      A0, -(SP)   ; PUSH INTO STACK A0
00001108                           117  ; --------- call e_show             
00001108  4EB8 1078                118              JSR         e_show      ; JUMP TO SUBROUTINE e_show
0000110C  588F                     119              ADDA.L      #4, SP      ; SP = SP + 4
0000110E                           120  ; --------- goto e_2                
0000110E  4EF9 00001120            121              JMP         .e_2        ; goto .e_2
00001114                           122  ; --------- e_3: skip               
00001114                           123                                      
00001114                           124  ; --------- t_7 = ERROR: 2*3 no ha dado 6  
00001114                           125  ; --------- param_s t_7             
00001114  41F8 101C                126  .e_3:       LEA.L       t_7, A0     ; A0 = t_7
00001118  2F08                     127              MOVE.L      A0, -(SP)   ; PUSH INTO STACK A0
0000111A                           128  ; --------- call e_show             
0000111A  4EB8 1078                129              JSR         e_show      ; JUMP TO SUBROUTINE e_show
0000111E  588F                     130              ADDA.L      #4, SP      ; SP = SP + 4
00001120                           131  ; --------- e_2: skip               
00001120                           132                                      
00001120                           133  ; --------- rtn e_inicio            
00001120  4E75                     134  .e_2:       RTS                     ; RETURN TO SUBROUTINE e_inicio
00001122                           135  
00001122                           136  
00001122                           137  
00001122                           138  
00001122                           139  ; --------- e_product: skip         
00001122                           140                                      
00001122                           141  ; --------- pmb e_product           
00001122  202F 0008                142  e_product:  MOVE.L      8(SP), D0   ; D0 = POP FROM STACK
00001126  21C0 1068                143              MOVE.L      D0, y       ; y = D0
0000112A  202F 000C                144              MOVE.L      12(SP), D0  ; D0 = POP FROM STACK
0000112E  21C0 1064                145              MOVE.L      D0, x       ; x = D0
00001132                           146  ; --------- t_8 = 0                 
00001132  7000                     147              MOVE.L      #0, D0      ; D0 = #0
00001134  21C0 1034                148              MOVE.L      D0, t_8     ; t_8 = D0
00001138                           149  ; --------- z = t_8                 
00001138  2038 1034                150              MOVE.L      t_8, D0     ; D0 = t_8
0000113C  21C0 1070                151              MOVE.L      D0, z       ; z = D0
00001140                           152  ; --------- e_4: skip               
00001140                           153                                      
00001140                           154  ; --------- t_9 = 0                 
00001140  7000                     155  .e_4:       MOVE.L      #0, D0      ; D0 = #0
00001142  21C0 1038                156              MOVE.L      D0, t_9     ; t_9 = D0
00001146                           157  ; --------- if x /= t_9 goto e_7    
00001146  2038 1064                158              MOVE.L      x, D0       ; D0 = x
0000114A  2238 1038                159              MOVE.L      t_9, D1     ; D1 = t_9
0000114E  B081                     160              CMP.L       D1, D0      ; UPDATE FLAGS WITH D0 - D1
00001150  6600 000E                161              BNE         .e_7        ; IF Z FLAG = 0 GOTO .e_7
00001154                           162  ; --------- t_10 = 0                
00001154  7000                     163              MOVE.L      #0, D0      ; D0 = #0
00001156  21C0 103C                164              MOVE.L      D0, t_10    ; t_10 = D0
0000115A                           165  ; --------- goto e_8                
0000115A  4EF9 00001166            166              JMP         .e_8        ; goto .e_8
00001160                           167  ; --------- e_7: skip               
00001160                           168                                      
00001160                           169  ; --------- t_10 = -1               
00001160  70FF                     170  .e_7:       MOVE.L      #-1, D0     ; D0 = #-1
00001162  21C0 103C                171              MOVE.L      D0, t_10    ; t_10 = D0
00001166                           172  ; --------- e_8: skip               
00001166                           173                                      
00001166                           174  ; --------- if t_10 == 0 goto e_5   
00001166  2038 103C                175  .e_8:       MOVE.L      t_10, D0    ; D0 = t_10
0000116A  7200                     176              MOVE.L      #0, D1      ; D1 = #0
0000116C  B081                     177              CMP.L       D1, D0      ; UPDATE FLAGS WITH D0 - D1
0000116E  6700 00BE                178              BEQ         .e_5        ; IF Z FLAG = 1 GOTO .e_5
00001172                           179  ; --------- t_11 = 2                
00001172  7002                     180              MOVE.L      #2, D0      ; D0 = #2
00001174  21C0 1040                181              MOVE.L      D0, t_11    ; t_11 = D0
00001178                           182  ; --------- t_12 = x mod t_11       
00001178  2038 1064                183              MOVE.L      x, D0       ; D0 = x
0000117C  2238 1040                184              MOVE.L      t_11, D1    ; D1 = t_11
00001180  81C1                     185              DIVS.W      D1, D0      ; D0.h = D0 % D1. D0.l = D0 / D1
00001182  E088                     186              LSR.L       #8, D0      ; D0.l = D0.h
00001184  E088                     187              LSR.L       #8, D0      ; D0.l = D0.h
00001186  21C0 1074                188              MOVE.L      D0, t_12    ; t_12 = D0
0000118A                           189  ; --------- t_13 = 1                
0000118A  7001                     190              MOVE.L      #1, D0      ; D0 = #1
0000118C  21C0 1044                191              MOVE.L      D0, t_13    ; t_13 = D0
00001190                           192  ; --------- if t_12 == t_13 goto e_9  
00001190  2038 1074                193              MOVE.L      t_12, D0    ; D0 = t_12
00001194  2238 1044                194              MOVE.L      t_13, D1    ; D1 = t_13
00001198  B081                     195              CMP.L       D1, D0      ; UPDATE FLAGS WITH D0 - D1
0000119A  6700 000E                196              BEQ         .e_9        ; IF Z FLAG = 1 GOTO .e_9
0000119E                           197  ; --------- t_14 = 0                
0000119E  7000                     198              MOVE.L      #0, D0      ; D0 = #0
000011A0  21C0 1048                199              MOVE.L      D0, t_14    ; t_14 = D0
000011A4                           200  ; --------- goto e_10               
000011A4  4EF9 000011B0            201              JMP         .e_10       ; goto .e_10
000011AA                           202  ; --------- e_9: skip               
000011AA                           203                                      
000011AA                           204  ; --------- t_14 = -1               
000011AA  70FF                     205  .e_9:       MOVE.L      #-1, D0     ; D0 = #-1
000011AC  21C0 1048                206              MOVE.L      D0, t_14    ; t_14 = D0
000011B0                           207  ; --------- e_10: skip              
000011B0                           208                                      
000011B0                           209  ; --------- if t_14 == 0 goto e_12  
000011B0  2038 1048                210  .e_10:      MOVE.L      t_14, D0    ; D0 = t_14
000011B4  7200                     211              MOVE.L      #0, D1      ; D1 = #0
000011B6  B081                     212              CMP.L       D1, D0      ; UPDATE FLAGS WITH D0 - D1
000011B8  6700 001E                213              BEQ         .e_12       ; IF Z FLAG = 1 GOTO .e_12
000011BC                           214  ; --------- t_15 = z + y            
000011BC  2038 1070                215              MOVE.L      z, D0       ; D0 = z
000011C0  2238 1068                216              MOVE.L      y, D1       ; D1 = y
000011C4  D280                     217              ADD.L       D0, D1      ; D1 = D1 + D0
000011C6  21C1 106C                218              MOVE.L      D1, t_15    ; t_15 = D1
000011CA                           219  ; --------- z = t_15                
000011CA  2038 106C                220              MOVE.L      t_15, D0    ; D0 = t_15
000011CE  21C0 1070                221              MOVE.L      D0, z       ; z = D0
000011D2                           222  ; --------- goto e_11               
000011D2  4EF9 000011D8            223              JMP         .e_11       ; goto .e_11
000011D8                           224  ; --------- e_12: skip              
000011D8                           225                                      
000011D8                           226  ; --------- e_11: skip              
000011D8                           227  .e_12:                              
000011D8                           228  ; --------- t_16 = 2                
000011D8  7002                     229  .e_11:      MOVE.L      #2, D0      ; D0 = #2
000011DA  21C0 104C                230              MOVE.L      D0, t_16    ; t_16 = D0
000011DE                           231  ; --------- t_17 = y * t_16         
000011DE                           232  ;           A*B = A1A0*B1B0 = A0*B0 + A1*B1 * 2^16  
000011DE  2038 1068                233              MOVE.L      y, D0       ; D0 = y
000011E2  2238 104C                234              MOVE.L      t_16, D1    ; D1 = t_16
000011E6  3400                     235              MOVE.W      D0, D2      ; D2.L = D1.L
000011E8  3601                     236              MOVE.W      D1, D3      ; D1.L = D3.L
000011EA  E080                     237              ASR.L       #8, D0      ; FIRST 8 BITS OF D0 MOVED RIGHT
000011EC  E080                     238              ASR.L       #8, D0      ; D0.L = old D0.H
000011EE  E081                     239              ASR.L       #8, D1      ; FIRST 8 BITS OF D1 MOVED RIGHT
000011F0  E081                     240              ASR.L       #8, D1      ; D1.L = old D1.H
000011F2  C1C1                     241              MULS.W      D1, D0      ; D0 = D0 * D1
000011F4  C7C2                     242              MULS.W      D2, D3      ; D3 = D2 * D3
000011F6  E180                     243              ASL.L       #8, D0      ; FIRST 8 BITS OF D0 MOVED LEFT
000011F8  E180                     244              ASL.L       #8, D0      ; D0.H = old D0.L
000011FA  D083                     245              ADD.L       D3, D0      ; D0 = D0 + D3
000011FC  21C0 1060                246              MOVE.L      D0, t_17    ; t_17 = D0
00001200                           247  ; --------- y = t_17                
00001200  2038 1060                248              MOVE.L      t_17, D0    ; D0 = t_17
00001204  21C0 1068                249              MOVE.L      D0, y       ; y = D0
00001208                           250  ; --------- t_18 = 2                
00001208  7002                     251              MOVE.L      #2, D0      ; D0 = #2
0000120A  21C0 1050                252              MOVE.L      D0, t_18    ; t_18 = D0
0000120E                           253  ; --------- t_19 = x / t_18         
0000120E  2038 1064                254              MOVE.L      x, D0       ; D0 = x
00001212  2238 1050                255              MOVE.L      t_18, D1    ; D1 = t_18
00001216  81C1                     256              DIVS.W      D1, D0      ; D0.h = D0 % D1. D0.l = D0 / D1
00001218  C0BC 0000FFFF            257              AND.L       #$0000FFFF, D0 ; Mask
0000121E  21C0 1058                258              MOVE.L      D0, t_19    ; t_19 = D0
00001222                           259  ; --------- x = t_19                
00001222  2038 1058                260              MOVE.L      t_19, D0    ; D0 = t_19
00001226  21C0 1064                261              MOVE.L      D0, x       ; x = D0
0000122A                           262  ; --------- goto e_4                
0000122A  4EF8 1140                263              JMP         .e_4        ; goto .e_4
0000122E                           264  ; --------- e_5: skip               
0000122E                           265                                      
0000122E                           266  ; --------- rtn e_product, z        
0000122E  2038 1070                267  .e_5:       MOVE.L      z, D0       ; D0 = z
00001232  2F40 0004                268              MOVE.L      D0, 4(SP)   ; PUSH INTO STACK D0
00001236  4E75                     269              RTS                     ; RETURN TO SUBROUTINE e_product
00001238                           270  
00001238                           271  
00001238                           272              END prod                ; Fin del programa

1 error detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A                   1054
E_INICIO            1094
E_INICIO:E          10E4
E_INICIO:E_1        10EA
E_INICIO:E_2        1120
E_INICIO:E_3        1114
E_PRODUCT           1122
E_PRODUCT:E_10      11B0
E_PRODUCT:E_11      11D8
E_PRODUCT:E_12      11D8
E_PRODUCT:E_4       1140
E_PRODUCT:E_5       122E
E_PRODUCT:E_7       1160
E_PRODUCT:E_8       1166
E_PRODUCT:E_9       11AA
E_SHOW              1078
PROD                1082
T                   1000
T_1                 1004
T_10                103C
T_11                1040
T_12                1074
T_13                1044
T_14                1048
T_15                106C
T_16                104C
T_17                1060
T_18                1050
T_19                1058
T_2                 105C
T_3                 1008
T_4                 100C
T_5                 1010
T_6                 101A
T_7                 101C
T_8                 1034
T_9                 1038
X                   1064
Y                   1068
Z                   1070
