KW_CONST: inmut
TYPE_INT: ent
ID: TURNOS
SYM_ENDINSTR: ;
KW_METHOD: f
TYPE_VOID: vacio
KW_MAIN: inicio
SYM_LPAREN: (
SYM_RPAREN: )
SYM_LKEY: {
ID: TURNOS
OP_ASIG: :
VAL_DECIMAL: 3
SYM_ENDINSTR: ;
TYPE_CHAR: car
SYM_LBRACKET: [
SYM_RBRACKET: ]
ID: str
OP_ASIG: :
VAL_CADENA: ""
SYM_ENDINSTR: ;
TUPLE: tupla
ID: persona
ID: p1
SYM_COMMA: ,
ID: p2
SYM_ENDINSTR: ;
ID: nuevaPersona
SYM_LPAREN: (
ID: p1
SYM_COMMA: ,
VAL_DECIMAL: 1
SYM_COMMA: ,
VAL_CHAR: 'a'
SYM_RPAREN: )
SYM_ENDINSTR: ;
ID: nuevaPersona
SYM_LPAREN: (
ID: p2
SYM_COMMA: ,
VAL_DECIMAL: 2
SYM_COMMA: ,
VAL_CHAR: 'm'
SYM_RPAREN: )
SYM_ENDINSTR: ;
SHOW: show
SYM_LPAREN: (
VAL_CADENA: "Bienvenido a la simulación"
SYM_RPAREN: )
SYM_ENDINSTR: ;
SHOW: show
SYM_LPAREN: (
VAL_CADENA: "Dos personas pensarán hasta que tengan hambre, momento en el que comerán"
SYM_RPAREN: )
SYM_ENDINSTR: ;
SHOW: show
SYM_LPAREN: (
VAL_CADENA: ""
SYM_RPAREN: )
SYM_ENDINSTR: ;
KW_WHILE: loop
TYPE_INT: ent
ID: i
OP_ASIG: :
VAL_DECIMAL: 0
SYM_ENDINSTR: ;
ID: i
OP_MENOR: <
ID: TURNOS
SYM_ENDINSTR: ;
ID: i
OP_INC: ++
SYM_LKEY: {
TYPE_CHAR: car
SYM_LBRACKET: [
SYM_RBRACKET: ]
ID: str
OP_ASIG: :
VAL_CADENA: "La persona"
SYM_ENDINSTR: ;
ID: p1
SYM_PUNTO: .
ID: hambre
OP_ASIG: :
ID: p1
SYM_PUNTO: .
ID: hambre
OP_SUM: +
VAL_DECIMAL: 1
SYM_ENDINSTR: ;
ID: p2
SYM_PUNTO: .
ID: hambre
OP_ASIG: :
ID: p2
SYM_PUNTO: .
ID: hambre
OP_SUM: +
VAL_DECIMAL: 1
SYM_ENDINSTR: ;
KW_IF: si
OP_NEG: ¬
SYM_LPAREN: (
SYM_LPAREN: (
ID: p1
SYM_PUNTO: .
ID: hambre
OP_MAYOR: >
ID: p1
SYM_PUNTO: .
ID: maxHambre
SYM_RPAREN: )
OP_OR: |
SYM_LPAREN: (
ID: p2
SYM_PUNTO: .
ID: hambre
OP_MAYOR: >
ID: p2
SYM_PUNTO: .
ID: maxHambre
SYM_RPAREN: )
SYM_RPAREN: )
SYM_LKEY: {
ID: imprimirTexto
SYM_LPAREN: (
VAL_CADENA: "La persona"
SYM_COMMA: ,
SYM_LPAREN: (
TYPE_CHAR: car
SYM_LBRACKET: [
SYM_RBRACKET: ]
SYM_RPAREN: )
ID: p1
SYM_PUNTO: .
ID: inicial
SYM_COMMA: ,
VAL_CADENA: "piensa"
SYM_RPAREN: )
SYM_ENDINSTR: ;
ID: imprimirTexto
SYM_LPAREN: (
VAL_CADENA: "La persona"
SYM_COMMA: ,
SYM_LPAREN: (
TYPE_CHAR: car
SYM_LBRACKET: [
SYM_RBRACKET: ]
SYM_RPAREN: )
ID: p2
SYM_PUNTO: .
ID: inicial
SYM_COMMA: ,
VAL_CADENA: "piensa"
SYM_RPAREN: )
SYM_ENDINSTR: ;
KW_CONTINUE: continuar
SYM_ENDINSTR: ;
SYM_RKEY: }
KW_IF: si
ID: p1
SYM_PUNTO: .
ID: hambre
OP_MAYOR: >
ID: p1
SYM_PUNTO: .
ID: maxHambre
SYM_LKEY: {
ID: str
OP_ASIG: :
SYM_LPAREN: (
TYPE_CHAR: car
SYM_LBRACKET: [
SYM_RBRACKET: ]
SYM_RPAREN: )
ID: p1
SYM_PUNTO: .
ID: inicial
SYM_ENDINSTR: ;
ID: p1
SYM_PUNTO: .
ID: hambre
OP_ASIG: :
VAL_DECIMAL: 0
SYM_ENDINSTR: ;
SYM_RKEY: }
KW_ELSE: no
SYM_LKEY: {
ID: str
OP_ASIG: :
SYM_LPAREN: (
TYPE_CHAR: car
SYM_LBRACKET: [
SYM_RBRACKET: ]
SYM_RPAREN: )
ID: p2
SYM_PUNTO: .
ID: inicial
SYM_ENDINSTR: ;
ID: p2
SYM_PUNTO: .
ID: hambre
OP_ASIG: :
VAL_DECIMAL: 0
SYM_ENDINSTR: ;
SYM_RKEY: }
ID: imprimirTexto
SYM_LPAREN: (
VAL_CADENA: "La persona"
SYM_COMMA: ,
ID: str
SYM_COMMA: ,
VAL_CADENA: "come"
SYM_RPAREN: )
SYM_ENDINSTR: ;
SYM_RKEY: }
SHOW: show
SYM_LPAREN: (
ID: str
SYM_RPAREN: )
SYM_ENDINSTR: ;
SHOW: show
SYM_LPAREN: (
VAL_CADENA: "Escribe lo que te ha parecido"
SYM_RPAREN: )
SYM_ENDINSTR: ;
SHOW: show
SYM_LPAREN: (
VAL_CADENA: "El resultado se guardará en opinion.txt"
SYM_RPAREN: )
SYM_ENDINSTR: ;
SCAN: scan
SYM_LPAREN: (
ID: str
SYM_RPAREN: )
SYM_ENDINSTR: ;
INTO: into
SYM_LPAREN: (
VAL_CADENA: "opinion.txt"
SYM_COMMA: ,
ID: str
SYM_RPAREN: )
SYM_ENDINSTR: ;
SHOW: show
SYM_LPAREN: (
VAL_CADENA: "Fin"
SYM_RPAREN: )
SYM_ENDINSTR: ;
SYM_RKEY: }
KW_METHOD: f
TYPE_VOID: vacio
ID: nuevaPersona
SYM_LPAREN: (
TUPLE: tupla
ID: persona
ID: p
SYM_COMMA: ,
TYPE_INT: ent
ID: maxHambre
SYM_COMMA: ,
TYPE_CHAR: car
ID: inicial
SYM_RPAREN: )
SYM_LKEY: {
KW_IF: si
ID: maxHambre
OP_MAYOR: >
ID: TURNOS
SYM_LKEY: {
SHOW: show
SYM_LPAREN: (
VAL_CADENA: "La persona con inicial"
SYM_RPAREN: )
SYM_ENDINSTR: ;
SHOW: show
SYM_LPAREN: (
SYM_LPAREN: (
TYPE_CHAR: car
SYM_LBRACKET: [
SYM_RBRACKET: ]
SYM_RPAREN: )
ID: inicial
SYM_RPAREN: )
SYM_ENDINSTR: ;
SHOW: show
SYM_LPAREN: (
VAL_CADENA: "Nunca pasará hambre"
SYM_RPAREN: )
SYM_ENDINSTR: ;
SYM_RKEY: }
ID: p
SYM_PUNTO: .
ID: maxHambre
OP_ASIG: :
ID: maxHambre
SYM_ENDINSTR: ;
ID: p
SYM_PUNTO: .
ID: inicial
OP_ASIG: :
ID: inicial
SYM_ENDINSTR: ;
SYM_RKEY: }
TUPLE: tupla
ID: persona
SYM_LKEY: {
KW_CONST: inmut
TYPE_INT: ent
ID: maxHambre
SYM_ENDINSTR: ;
TYPE_CHAR: car
ID: inicial
SYM_ENDINSTR: ;
TYPE_INT: ent
ID: hambre
OP_ASIG: :
VAL_DECIMAL: 0
SYM_ENDINSTR: ;
SYM_RKEY: }
KW_METHOD: f
TYPE_VOID: vacio
ID: imprimirTexto
SYM_LPAREN: (
TYPE_CHAR: car
SYM_LBRACKET: [
SYM_RBRACKET: ]
ID: s1
SYM_COMMA: ,
TYPE_CHAR: car
SYM_LBRACKET: [
SYM_RBRACKET: ]
ID: s2
SYM_COMMA: ,
TYPE_CHAR: car
SYM_LBRACKET: [
SYM_RBRACKET: ]
ID: s3
SYM_RPAREN: )
SYM_LKEY: {
SHOW: show
SYM_LPAREN: (
ID: s1
SYM_RPAREN: )
SYM_ENDINSTR: ;
SHOW: show
SYM_LPAREN: (
ID: s2
SYM_RPAREN: )
SYM_ENDINSTR: ;
SHOW: show
SYM_LPAREN: (
ID: s3
SYM_RPAREN: )
SYM_ENDINSTR: ;
SHOW: show
SYM_LPAREN: (
VAL_CADENA: ""
SYM_RPAREN: )
SYM_ENDINSTR: ;
SYM_RKEY: }
