KW_METHOD: f
TYPE_VOID: vacio
KW_MAIN: inicio
SYM_LPAREN: (
SYM_RPAREN: )
SYM_LKEY: {
SHOW: show
SYM_LPAREN: (
VAL_CADENA: "Impresion de las primeras 2*3*2=12 letras del abecedario"
SYM_RPAREN: )
SYM_ENDINSTR: ;
TYPE_CHAR: car
SYM_LBRACKET: [
VAL_DECIMAL: 2
SYM_RBRACKET: ]
SYM_LBRACKET: [
VAL_DECIMAL: 3
SYM_RBRACKET: ]
SYM_LBRACKET: [
VAL_DECIMAL: 2
SYM_RBRACKET: ]
ID: matrizCars
SYM_ENDINSTR: ;
KW_WHILE: loop
TYPE_INT: ent
ID: i
OP_ASIG: :
VAL_DECIMAL: 0
SYM_ENDINSTR: ;
ID: i
OP_MENOR: <
VAL_DECIMAL: 2
SYM_ENDINSTR: ;
ID: i
OP_INC: ++
SYM_LKEY: {
KW_WHILE: loop
TYPE_INT: ent
ID: j
OP_ASIG: :
VAL_DECIMAL: 0
SYM_ENDINSTR: ;
ID: j
OP_MENOR: <
VAL_DECIMAL: 3
SYM_ENDINSTR: ;
ID: j
OP_INC: ++
SYM_LKEY: {
KW_WHILE: loop
TYPE_INT: ent
ID: k
OP_ASIG: :
VAL_DECIMAL: 0
SYM_ENDINSTR: ;
ID: k
OP_MENOR: <
VAL_DECIMAL: 2
SYM_ENDINSTR: ;
ID: k
OP_INC: ++
SYM_LKEY: {
ID: matrizCars
SYM_LBRACKET: [
ID: i
SYM_RBRACKET: ]
SYM_LBRACKET: [
ID: j
SYM_RBRACKET: ]
SYM_LBRACKET: [
ID: k
SYM_RBRACKET: ]
OP_ASIG: :
VAL_CHAR: 'A'
OP_SUM: +
SYM_LPAREN: (
TYPE_CHAR: car
SYM_RPAREN: )
SYM_LPAREN: (
SYM_LPAREN: (
SYM_LPAREN: (
ID: i
OP_MUL: *
VAL_DECIMAL: 3
OP_MUL: *
VAL_DECIMAL: 2
SYM_RPAREN: )
OP_SUM: +
SYM_LPAREN: (
ID: j
OP_MUL: *
VAL_DECIMAL: 2
SYM_RPAREN: )
OP_SUM: +
ID: k
SYM_RPAREN: )
OP_MOD: \
VAL_DECIMAL: 26
SYM_RPAREN: )
SYM_ENDINSTR: ;
SHOW: show
SYM_LPAREN: (
SYM_LPAREN: (
TYPE_CHAR: car
SYM_LBRACKET: [
SYM_RBRACKET: ]
SYM_RPAREN: )
SYM_LPAREN: (
ID: matrizCars
SYM_LBRACKET: [
ID: i
SYM_RBRACKET: ]
SYM_LBRACKET: [
ID: j
SYM_RBRACKET: ]
SYM_LBRACKET: [
ID: k
SYM_RBRACKET: ]
SYM_RPAREN: )
SYM_RPAREN: )
SYM_ENDINSTR: ;
SYM_RKEY: }
SYM_RKEY: }
SYM_RKEY: }
SYM_RKEY: }
